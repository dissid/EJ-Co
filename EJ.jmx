<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseUrl" elementType="Argument">
            <stringProp name="Argument.name">baseUrl</stringProp>
            <stringProp name="Argument.value">full-ej.cs199.force.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SSLProtocol" elementType="Argument">
            <stringProp name="Argument.name">SSLProtocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thinkTime" elementType="Argument">
            <stringProp name="Argument.name">thinkTime</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="randomThinkTime" elementType="Argument">
            <stringProp name="Argument.name">randomThinkTime</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
        <stringProp name="HTTPSampler.port">${SSLPort}</stringProp>
        <stringProp name="HTTPSampler.protocol">${SLLProtocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Get User" enabled="true">
            <stringProp name="filename">data/EJ/user.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter"></stringProp>
            <stringProp name="variableNames">email,password</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/login/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get fwuid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">fwuid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;fwuid&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log fwuid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****fwuid: &quot; + vars.get(&quot;fwuid&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - isAction=true" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;loH5rC54Rf7edWHR7pKYeg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.isAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.isAction</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;220c91fd-374f-4a56-b2aa-6eef6654e349&quot;,&quot;routeType&quot;:&quot;login-home&quot;,&quot;themeLayoutType&quot;:&quot;Login&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;187daaf6-07f9-4dfb-816b-bb0c6a09f287&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:264,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">6d48c9bd-7983-48c3-b41a-2da188602da3</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - getConfigData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ui-force-components-controllers-hostConfig.HostConfig.getConfigData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-hostConfig.HostConfig.getConfigData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;27;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnectorController/ACTION$fetchClientContextData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;33;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">6d48c9bd-7983-48c3-b41a-2da188602da3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - getParsedRichTextValue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getSelfRegistrationUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getSelfRegistrationUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getForgotPasswordUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getForgotPasswordUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getIsSelfRegistrationEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getIsSelfRegistrationEnabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getIsUsernamePasswordEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getIsUsernamePasswordEnabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;41;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;img src=\&quot;/sfsites/c/resource/branding/assets/images/logo.png\&quot; alt=\&quot;EJLOGO\&quot; class=\&quot;login-ej-logo\&quot; /&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;44;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;span class=\&quot;login-headline\&quot;&gt;SIGN IN&lt;/span&gt;\n&lt;br&gt;&lt;br&gt;\n&lt;p class=\&quot;login-description\&quot;&gt;If you have an account with EJ, please sign in.&lt;/p&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;57;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getIsUsernamePasswordEnabled&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;58;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getIsSelfRegistrationEnabled&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;59;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getForgotPasswordUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;60;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getSelfRegistrationUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;63;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;img class=\&quot;sidebar-image\&quot; src=\&quot;/sfsites/c/resource/branding/assets/images/signInPage.jpg\&quot; /&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">6d48c9bd-7983-48c3-b41a-2da188602da3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - getLoginRightFrameUrl" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getLoginRightFrameUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getLoginRightFrameUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;71;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getLoginRightFrameUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">6d48c9bd-7983-48c3-b41a-2da188602da3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - getComponentDef" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.Component.getComponentDef" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.Component.getComponentDef</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;87;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponentDef&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;lightning:iconSvgTemplatesUtility&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">6d48c9bd-7983-48c3-b41a-2da188602da3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.login</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;T9lADxr3HptaGeUj8tYm9Q&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;92;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$login&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{&quot;username&quot;:&quot;${email}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;startUrl&quot;:&quot;&quot;},&quot;version&quot;:&quot;51.0&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Session ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SID</stringProp>
              <stringProp name="RegexExtractor.regex">sid=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Session ID" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****SESSION ID: &quot; + vars.get(&quot;SID&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log User" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****User: &quot; + vars.get(&quot;email&quot;) + &quot;-&quot; + vars.get(&quot;password&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Frontdoor.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="allp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">allp</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="retURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">retURL</stringProp>
                  <stringProp name="Argument.value">/apex/CommunitiesLanding</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cshc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cshc</stringProp>
                  <stringProp name="Argument.value">f000004TmEBf0000000rMt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">apv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="refURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">refURL</stringProp>
                  <stringProp name="Argument.value">https://full-ej.cs199.force.com/secur/frontdoor.jsp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="untethered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">untethered</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sid</stringProp>
                  <stringProp name="Argument.value">${SID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secur/frontdoor.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CommunitiesLanding" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">apex/CommunitiesLanding</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Token" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****Token: &quot; + vars.get(&quot;token&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Published Changelist Num" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">publishedChangelistNum</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;publishedChangelistNum&quot;:&quot;(\d+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Published Changelist Num" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****publishedChangelistNum: &quot; + vars.get(&quot;publishedChangelistNum&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page - getPageComponent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;21a9cea6-255e-481a-91f9-2cfc221f7f54&quot;,&quot;routeType&quot;:&quot;home&quot;,&quot;themeLayoutType&quot;:&quot;Home&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;bbc62647-c279-40f9-8a73-b4679a5f6df5&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:${publishedChangelistNum},&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">32b773df-d68c-4c2b-9456-1a7f5f904674</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page - getConfigData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ui-force-components-controllers-hostConfig.HostConfig.getConfigData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-hostConfig.HostConfig.getConfigData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-themeHeader.ThemeHeader.getHeaderConfig" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-themeHeader.ThemeHeader.getHeaderConfig</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.SearchGlobalDataProvider.getSearchSettings" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.SearchGlobalDataProvider.getSearchSettings</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-customizableUserProfileMenu.CustomizableUserProfileMenu.getProfileIconOrCompanyLogoAndUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-customizableUserProfileMenu.CustomizableUserProfileMenu.getProfileIconOrCompanyLogoAndUserName</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-navigationMenu.NavigationMenuDataProvider.getNavigationMenu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-navigationMenu.NavigationMenuDataProvider.getNavigationMenu</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-chatter-components-messages.Messages.getMessagingPermAndPref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-chatter-components-messages.Messages.getMessagingPermAndPref</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;28;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.messages.MessagesController/ACTION$getMessagingPermAndPref&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;38;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;div class=\&quot;footer\&quot;&gt;\n  &lt;div class=\&quot;footer__main-container slds-grid slds-wrap\&quot;&gt;\n    &lt;div class=\&quot;footer__logo-container slds-col slds-size_1-of-1\&quot;&gt;\n      &lt;a href=\&quot;/\&quot;&gt;\n        &lt;img src=\&quot;{!contentAsset.EJLOGO.1}\&quot; alt=\&quot;EJLOGO\&quot; class=\&quot;footer__logo\&quot; /&gt; &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;div class=\&quot;footer__account slds-col slds-size_1-of-1 slds-small-size--1-of-2 slds-medium-size--1-of-4\&quot;&gt;\n      &lt;h4 class=\&quot;footer__title\&quot;&gt;Account &amp;amp; Store&lt;/h4&gt; \n      &lt;ul class=\&quot;footer__list\&quot;&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;/s/comm-my-account\&quot; target=\&quot;_blank\&quot;&gt;My Profile&lt;/a&gt;&lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/about-us/locations\&quot; target=\&quot;_blank\&quot;&gt;Locations&lt;/a&gt;&lt;/li&gt; \n      &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;div class=\&quot;footer__policy slds-col slds-size_1-of-1 slds-small-size--1-of-2 slds-medium-size--1-of-4\&quot;&gt;\n      &lt;h4 class=\&quot;footer__title\&quot;&gt;Policies&lt;/h4&gt; \n      &lt;ul class=\&quot;footer__list\&quot;&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/privacy-policy\&quot; target=\&quot;_blank\&quot;&gt;Privacy Policy&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/cookie-policy\&quot; target=\&quot;_blank\&quot;&gt;Cookie Policy&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/terms-of-use\&quot; target=\&quot;_blank\&quot;&gt;Terms of Use&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/anti-bribery-and-corruption-policy\&quot; target=\&quot;_blank\&quot;&gt;Anti-Bribery and Corruption policy&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/customer-terms\&quot; target=\&quot;_blank\&quot;&gt;Customer Terms and Conditions&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/supplier-terms-and-conditions\&quot; target=\&quot;_blank\&quot;&gt;Supplier Terms and Conditions&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://online.marsh.com/marshconnectpublic/marsh2/public/moi?client=C410\&quot; target=\&quot;_blank\&quot;&gt;Memorandum of Insurance&lt;/a&gt; &lt;/li&gt; \n        &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/cocen\&quot; target=\&quot;_blank\&quot;&gt;Code of Conduct&lt;/a&gt; &lt;/li&gt; \n       &lt;/ul&gt; \n    &lt;/div&gt;\n    &lt;div class=\&quot;footer__contact slds-col slds-grid slds-wrap slds-size_1-of-1 slds-medium-size--1-of-4\&quot;&gt;\n      &lt;div class=\&quot;slds-col slds-size_1-of-2 slds-small-size--1-of-1 slds-medium-size--1-of-1\&quot;&gt;\n        &lt;ul class=\&quot;footer__list\&quot;&gt;\n          &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/contact/\&quot; target=\&quot;_blank\&quot;&gt;Contact Us&lt;/a&gt; &lt;/li&gt;\n          &lt;li class=\&quot;footer__item\&quot;&gt;123-456-7899 &lt;/li&gt;         \n        &lt;/ul&gt;\n      &lt;/div&gt;\n      &lt;div class=\&quot;slds-col slds-size_1-of-2 slds-medium-size--1-of-1\&quot;&gt;\n        &lt;ul class=\&quot;footer__list\&quot;&gt;\n          &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a class=\&quot;footer__link\&quot; href=\&quot;https://www.ejco.com/am/en/index\&quot; target=\&quot;_blank\&quot;&gt;Visit our Corporate Site&lt;/a&gt; &lt;/li&gt; \n          &lt;li class=\&quot;footer__item\&quot;&gt;&lt;a href=\&quot;https://www.ejco.com/am/en/resource-center/lunch-and-learn\&quot; target=\&quot;_blank\&quot;&gt;Request a Lunch &amp;amp; Learn&lt;/a&gt; &lt;/li&gt; \n        &lt;/ul&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\&quot;footer__copyright slds-col slds-size_1-of-1\&quot;&gt;Copyright &amp;copy; 2021 EJ Group, Inc All Rights Reserved&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;41;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;!-- header --&gt;\n&lt;div class=\&quot;top-header\&quot;&gt;\n    &lt;div class=\&quot;top-header__container slds-grid slds-grid_align-end slds-p-horizontal_xx-large\&quot;&gt;\n        &lt;div class=\&quot;slds-col slds-align-middle contact-phone\&quot;&gt;\n            &lt;span&gt;&lt;img class=\&quot;icon\&quot; src=\&quot;/sfsites/c/resource/branding/assets/icons/icon-phone.svg\&quot; width=\&quot;24\&quot; height=\&quot;24\&quot;/&gt;800-626-4653&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class=\&quot;slds-col slds-align-middle slds-m-left_x-large contact-location\&quot;&gt;\n            &lt;a href=\&quot;https://www.ejco.com/am/en/about-us/locations\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;icon\&quot; src=\&quot;/sfsites/c/resource/branding/assets/icons/icon-location.svg\&quot; width=\&quot;24\&quot; height=\&quot;24\&quot;/&gt;Locations&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\&quot;slds-col slds-align-middle slds-m-left_x-large contact-us\&quot;&gt;\n            &lt;a href=\&quot;https://www.ejco.com/am/en/contact/\&quot;  target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;icon\&quot; src=\&quot;/sfsites/c/resource/branding/assets/icons/icon-mail.svg\&quot; width=\&quot;24\&quot; height=\&quot;24\&quot;/&gt;Contact Us&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;46;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.SearchGlobalDataProviderController/ACTION$getSearchSettings&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;60;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.navigationMenu.NavigationMenuDataProviderController/ACTION$getNavigationMenu&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:navigationMenuBase&quot;,&quot;params&quot;:{&quot;navigationLinkSetIdOrName&quot;:&quot;Default_User_Profile_Menu1&quot;,&quot;includeImageUrl&quot;:false,&quot;addHomeMenuItem&quot;:false,&quot;menuItemTypesToSkip&quot;:[&quot;MenuLabel&quot;,&quot;NavigationalTopic&quot;],&quot;masterLabel&quot;:&quot;Default User Profile Menu&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;62;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.customizableUserProfileMenu.CustomizableUserProfileMenuController/ACTION$getProfileIconOrCompanyLogoAndUserName&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:customizableUserProfileMenu&quot;,&quot;params&quot;:{&quot;showCompanyLogo&quot;:false,&quot;includeCompanyName&quot;:true},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;70;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.navigationMenu.NavigationMenuDataProviderController/ACTION$getNavigationMenu&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:navigationMenuBase&quot;,&quot;params&quot;:{&quot;navigationLinkSetIdOrName&quot;:&quot;Default_Navigation2&quot;,&quot;includeImageUrl&quot;:false,&quot;addHomeMenuItem&quot;:true,&quot;menuItemTypesToSkip&quot;:[&quot;SystemLink&quot;,&quot;Event&quot;],&quot;masterLabel&quot;:&quot;Default Navigation&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;76;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.SearchGlobalDataProviderController/ACTION$getSearchSettings&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;84;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.themeHeader.ThemeHeaderController/ACTION$getHeaderConfig&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:themeHeaderBase&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;98;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnectorController/ACTION$fetchClientContextData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;110;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;113;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">32b773df-d68c-4c2b-9456-1a7f5f904674</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">3687780000eb8494a1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Account ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accountId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.effectiveAccountId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Token" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****Account ID: &quot; + vars.get(&quot;accountId&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page - getCommunityNavigationMenu" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.NavigationMenu.getCommunityNavigationMenu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.NavigationMenu.getCommunityNavigationMenu</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;151;a&quot;,&quot;descriptor&quot;:&quot;aura://NavigationMenuController/ACTION$getCommunityNavigationMenu&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;navigationLinkSetDeveloperName&quot;:&quot;Shop_Categories&quot;,&quot;publishStatus&quot;:&quot;Live&quot;,&quot;includeImageUrl&quot;:true,&quot;addHomeMenuItem&quot;:false,&quot;menuItemTypesToSkip&quot;:[&quot;MenuLabel&quot;,&quot;NavigationalTopic&quot;,&quot;SystemLink&quot;,&quot;Event&quot;]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">32b773df-d68c-4c2b-9456-1a7f5f904674</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">45667800000038a285</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">d8f6e8fc64906672</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page - getComponentDef" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.Component.getComponentDef" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.Component.getComponentDef</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;160;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponentDef&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;lightning:iconSvgTemplatesUtility&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">32b773df-d68c-4c2b-9456-1a7f5f904674</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">4853030000e40f5547</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">22ff90bea45a44b8</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page - getNameFieldValue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-recordservicecomponent.RecordServiceComponent.getNameFieldValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-recordservicecomponent.RecordServiceComponent.getNameFieldValue</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;169;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.recordservicecomponent.RecordServiceComponentController/ACTION$getNameFieldValue&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;01t2S00000C8WpsQAF&quot;,&quot;field&quot;:&quot;Name&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;171;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.recordservicecomponent.RecordServiceComponentController/ACTION$getNameFieldValue&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;01tE0000009dnEdIAI&quot;,&quot;field&quot;:&quot;Name&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;173;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.recordservicecomponent.RecordServiceComponentController/ACTION$getNameFieldValue&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;01tE0000001A7LGIA0&quot;,&quot;field&quot;:&quot;Name&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">32b773df-d68c-4c2b-9456-1a7f5f904674</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5355050000ab7d8a4a</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">8aed6dcba426dbd9</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">c56ae5a36679a171</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PLP" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Get Product Listing Pages" enabled="true">
            <stringProp name="filename">data/EJ/plp.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter"></stringProp>
            <stringProp name="variableNames">plp</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;386;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${plp}GAE.undefined.FULL.null.null.null.VIEW.true.null.null.null&quot;}},{&quot;id&quot;:&quot;387;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${plp}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;393;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;f1494877-5553-42b3-baff-e19ff75dea78&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqA&quot;,&quot;entity_name&quot;:&quot;ProductCategory&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;categoryPath&quot;:&quot;drainage-grates-frames-and-curb-inlets&quot;,&quot;recordId&quot;:&quot;${plp}&quot;,&quot;routeNamespace&quot;:&quot;category&quot;,&quot;picasso_id&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77229260000c9c35c8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">b4c66d00d00706de</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log PLP" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****PLP: &quot; + vars.get(&quot;plp&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - Retrieve Cart Summary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;397;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77341870000e803d91</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">dc86e8580bc6d9a1</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Account ID" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">accountId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.accountId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Account ID" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Account ID: &quot; + vars.get(&quot;accountId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;435;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accpuntId}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77353480000683589e</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">682ff599fc1811e7</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;436;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2B_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;categoryId&quot;:&quot;${plp}&quot;,&quot;includePrices&quot;:true,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[],&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77355930000905496b</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">012b63e333eaad13</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get product total" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">productTotal</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.productsPage.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product Total" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****ProductTotal: &quot; + vars.get(&quot;productTotal&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/shop-products/access-covers-grates-and-frames/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;441;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77212.85,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/\&quot;,\&quot;requestURI\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;entityId\&quot;:\&quot;${plp}\&quot;}},\&quot;sequence\&quot;:12,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${plp}\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77217.7,\&quot;duration\&quot;:18092,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:3,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77250.96,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:13,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77329.9,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${plp}\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77353.09,\&quot;duration\&quot;:7,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77360.95,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.1299999999901047}}]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77362.21,\&quot;duration\&quot;:2,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;${plp}GAE\&quot;,\&quot;name\&quot;:\&quot;Home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77480.97,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;${plp}GAE\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:14,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:77218.26,\&quot;duration\&quot;:1543,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77265.42,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77334.21,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:77229.3,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:2386,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;386;a\&quot;,\&quot;387;a\&quot;,\&quot;393;a\&quot;],\&quot;requestId\&quot;:\&quot;77229260000c9c35c8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:4602,\&quot;xhrDuration\&quot;:247,\&quot;xhrStall\&quot;:5,\&quot;startTime\&quot;:77231,\&quot;fetchStart\&quot;:77231,\&quot;requestStart\&quot;:77236,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:237,\&quot;transfer\&quot;:10,\&quot;transferSize\&quot;:1841,\&quot;serverTime\&quot;:63,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:251},{\&quot;ts\&quot;:77341.89,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:1086,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;397;a\&quot;],\&quot;requestId\&quot;:\&quot;77341870000e803d91\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2255,\&quot;xhrDuration\&quot;:407,\&quot;xhrStall\&quot;:136,\&quot;startTime\&quot;:77343,\&quot;fetchStart\&quot;:77343,\&quot;requestStart\&quot;:77479,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:401,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:1506,\&quot;serverTime\&quot;:145,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:411},{\&quot;ts\&quot;:77353.49,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:24,\&quot;requestLength\&quot;:1242,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;435;a\&quot;],\&quot;requestId\&quot;:\&quot;77353480000683589e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2312,\&quot;xhrDuration\&quot;:403,\&quot;xhrStall\&quot;:168,\&quot;startTime\&quot;:77355,\&quot;fetchStart\&quot;:77355,\&quot;requestStart\&quot;:77523,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:397,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:1517,\&quot;serverTime\&quot;:108,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:406},{\&quot;ts\&quot;:77355.94,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:1477,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;436;a\&quot;],\&quot;requestId\&quot;:\&quot;77355930000905496b\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:47656,\&quot;xhrDuration\&quot;:1223,\&quot;xhrStall\&quot;:166,\&quot;startTime\&quot;:77357,\&quot;fetchStart\&quot;:77357,\&quot;requestStart\&quot;:77523,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1217,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:4138,\&quot;serverTime\&quot;:929,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1225}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:77224.88,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;386;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:23,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:257},{\&quot;ts\&quot;:77225.15,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;387;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:2,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:257},{\&quot;ts\&quot;:77229.05,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;393;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:253},{\&quot;ts\&quot;:77258.3,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;397;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:83,\&quot;serverTime\&quot;:{\&quot;total\&quot;:122,\&quot;db\&quot;:23,\&quot;xhrServerTime\&quot;:145,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:495},{\&quot;ts\&quot;:77353.43,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;435;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:81,\&quot;db\&quot;:20,\&quot;xhrServerTime\&quot;:108,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:406},{\&quot;ts\&quot;:77355.88,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;436;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:896,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:928,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1226}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:9.05,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-f1494877-5553-42b3-baff-e19ff75dea78.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:9.05}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:78763.91,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.42999999997846317}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:1543,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${plp}\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:276,\&quot;longestTask\&quot;:161,\&quot;network\&quot;:{\&quot;rtt\&quot;:100,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:1543,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:2}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:4,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:78764.29,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Home.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Home\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:15,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613822027893000,\&quot;duration\&quot;:1543000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-0ZG\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;b4c66d00d00706de\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822027904000,\&quot;duration\&quot;:251000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=21&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77229260000c9c35c8\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;dc86e8580bc6d9a1\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028016000,\&quot;duration\&quot;:412000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=20&amp;ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77341870000e803d91\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;682ff599fc1811e7\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028028000,\&quot;duration\&quot;:406000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=14&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77353480000683589e\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;012b63e333eaad13\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028030000,\&quot;duration\&quot;:1226000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=12&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77355930000905496b\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[7,7]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[1,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822028035,\&quot;value\&quot;:[0,0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029436,\&quot;value\&quot;:[59076]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029436,\&quot;value\&quot;:[7533]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[2851]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[22068]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[1543]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">78764740000ddc70f2</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load More" enabled="true"/>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While product total less 26" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(Integer.parseInt(vars.get(&quot;productTotal&quot;).trim()) &lt; 26)}</stringProp>
          </WhileController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Go to PLP" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
                <stringProp name="79316">PLP</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Load More" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/shop-products/access-covers-grates-and-frames/manhole-covers-and-frames/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;368;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2B_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;categoryId&quot;:&quot;${plp}&quot;,&quot;includePrices&quot;:true,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:1,&quot;pageSize&quot;:25,&quot;refinements&quot;:[],&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get flag isFilterable" enabled="true">
              <stringProp name="TestPlan.comments">If filters exist for PLP</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">isFilterable</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.facets[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.facets[0].nameOrId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Type" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.facets[0].values[0].type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Attribute Type" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterAttributeType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.facets[0].attributeType</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Value " enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterValue</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.facets[0].values[0].displayName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log isFilterable PLP" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****isFilterable: &quot; + vars.get(&quot;isFilterable&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Name" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Name: &quot; + vars.get(&quot;filterName&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Type" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Type: &quot; + vars.get(&quot;filterType&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Attribute Type" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Attribute Type: &quot; + vars.get(&quot;filterAttributeType&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Value" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Value: &quot; + vars.get(&quot;filterValue&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Facet Filter" enabled="true"/>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While filters are not available" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;isFilterable&quot;).equals(&quot;false&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Go to PLP" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
                <stringProp name="79316">PLP</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">78</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/shop-products/access-covers-grates-and-frames/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;671;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2B_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;categoryId&quot;:&quot;${plp}&quot;,&quot;includePrices&quot;:true,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[{&quot;nameOrId&quot;:&quot;${filterName}&quot;,&quot;type&quot;:&quot;${filterType}&quot;,&quot;attributeType&quot;:&quot;${filterAttributeType}&quot;,&quot;values&quot;:[&quot;${filterValue}&quot;]}],&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Product ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pdp</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.productsPage.products[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get SKU" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sku</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.productsPage.products[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product SKU" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Product SKU: &quot; + vars.get(&quot;sku&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****PDP After Filtering: &quot; + vars.get(&quot;pdp&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PDP" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">79</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${pdp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;938;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${pdp}.0122S000000oVjUQAU.FULL.null.null.null.VIEW.true.null.LastModifiedDate,Description,Hydrant_Card__c,LastModifiedBy;2Id,StockKeepingUnit,Product_Drawing_URL__c,Name,Region__c,Project_Types__c,CreatedBy;2Id,CreatedById,CreatedBy;2Name,RecordTypeId,ProductImage__c,Item_web_description__c,CurrencyIsoCode,LastModifiedBy;2Name,Product_UOM__c,SystemModstamp,Series__c,Drawing_pdf__c,b2b_Web_Name__c,M3_STAT__c,CreatedDate,Family,Product_Weight__c,Id,Status__c,LastModifiedById.null&quot;}},{&quot;id&quot;:&quot;939;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${pdp}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;946;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;ec156ed9-59a4-49be-a336-2f9278a747e2&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqJ&quot;,&quot;entity_name&quot;:&quot;Product2&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordName&quot;:&quot;detail&quot;,&quot;recordId&quot;:&quot;${pdp}&quot;,&quot;picasso_id&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">654183230000da9de9</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">d4170c18025295bd</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert PDP is opened" enabled="true">
              <stringProp name="JMES_PATH">actions[0].state</stringProp>
              <stringProp name="EXPECTED_VALUE">SUCCESS</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${pdp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;949;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}},{&quot;id&quot;:&quot;950;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65459671000069ba3f</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">daafe06b10d362cf</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">81</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${pdp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1011;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654165.88,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;,\&quot;requestURI\&quot;:\&quot;/s/product/detail/${pdp}\&quot;,\&quot;entityId\&quot;:\&quot;${pdp}\&quot;}},\&quot;sequence\&quot;:39,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${pdp}\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654168.14,\&quot;duration\&quot;:33741,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:9,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654175.19,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;0ZG7f0000008Rq3GAE\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:40,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${pdp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654175.35,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;${pdp}\&quot;,\&quot;recordType\&quot;:\&quot;Product2\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:41,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${pdp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654593.11,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${pdp}\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654629.87,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008RqMGAU\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654946.34,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008RqMGAU\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:654168.93,\&quot;duration\&quot;:824,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:654593.01,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:654183.27,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:79,\&quot;requestLength\&quot;:2766,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;938;a\&quot;,\&quot;939;a\&quot;,\&quot;946;a\&quot;],\&quot;requestId\&quot;:\&quot;654183230000da9de9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8362,\&quot;xhrDuration\&quot;:332,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:654561,\&quot;fetchStart\&quot;:654561,\&quot;requestStart\&quot;:654563,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:325,\&quot;transfer\&quot;:7,\&quot;transferSize\&quot;:2855,\&quot;serverTime\&quot;:195,\&quot;xhrDelay\&quot;:379},\&quot;duration\&quot;:711},{\&quot;ts\&quot;:654596.72,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:80,\&quot;requestLength\&quot;:1666,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;949;a\&quot;,\&quot;950;a\&quot;],\&quot;requestId\&quot;:\&quot;65459671000069ba3f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:3067,\&quot;xhrDuration\&quot;:339,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:654598,\&quot;fetchStart\&quot;:654598,\&quot;requestStart\&quot;:654601,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:333,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1548,\&quot;serverTime\&quot;:211,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:342}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:654174.76,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;938;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:8,\&quot;serverTime\&quot;:{\&quot;total\&quot;:106,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:722},{\&quot;ts\&quot;:654177.15,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;939;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:720},{\&quot;ts\&quot;:654183.04,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;946;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:714},{\&quot;ts\&quot;:654568.59,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;949;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;serverTime\&quot;:{\&quot;total\&quot;:108,\&quot;db\&quot;:27,\&quot;xhrServerTime\&quot;:210,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:371},{\&quot;ts\&quot;:654579.35,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;950;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:17,\&quot;serverTime\&quot;:{\&quot;total\&quot;:63,\&quot;db\&quot;:8,\&quot;xhrServerTime\&quot;:210,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:360}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:12.72,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-ec156ed9-59a4-49be-a336-2f9278a747e2.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:12.72}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:654994.7,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.5400000000372529,\&quot;storeIngest\&quot;:0.35999999998603016,\&quot;storeBroadcast\&quot;:0}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:823,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${pdp}\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:487,\&quot;longestTask\&quot;:487,\&quot;network\&quot;:{\&quot;rtt\&quot;:50,\&quot;downlink\&quot;:3.05},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:823,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProduct_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProductPrice_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;total\&quot;:{\&quot;hits\&quot;:5,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:10,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${pdp}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654995.01,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:42,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${pdp}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613936315024000,\&quot;duration\&quot;:823000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/product/detail/${pdp}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-01t\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;d4170c18025295bd\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;timestamp\&quot;:1613936315038000,\&quot;duration\&quot;:712000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=78&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;654183230000da9de9\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;daafe06b10d362cf\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;timestamp\&quot;:1613936315452000,\&quot;duration\&quot;:342000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=75&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;65459671000069ba3f\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:3},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[64,64,64]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[0,0,3]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0,0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315848,\&quot;value\&quot;:[12555]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315848,\&quot;value\&quot;:[5195]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[2851]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[39719]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[823]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315456,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315456,\&quot;value\&quot;:[1]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6549955000007e9914</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login &gt; Local Listing &gt; PLP &gt; PDP " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
            <stringProp name="73596745">Login</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Local Specifications" enabled="true">
          <stringProp name="RunTime.seconds">1</stringProp>
        </RunTime>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Local Specifications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">35</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/local-specifications</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;583;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">0d7937a5f26b3079</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">196702830000d0ca27</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">28245dc3999906b1</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">0d7937a5f26b3079</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Account ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">account</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.accountId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Account ID" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****Account ID: &quot; + vars.get(&quot;account&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Local Specifications - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">36</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/local-specifications</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;620;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:196612.54,\&quot;pageStartTime\&quot;:1613741387413,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;multi-level-nav\&quot;,\&quot;scope\&quot;:\&quot;menu-item-clicked\&quot;,\&quot;context\&quot;:{\&quot;operation\&quot;:\&quot;navigate\&quot;,\&quot;level\&quot;:1,\&quot;wasSubmenuOpen\&quot;:false}},\&quot;sequence\&quot;:19,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:196614.91,\&quot;pageStartTime\&quot;:1613741387413,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/\&quot;,\&quot;requestURI\&quot;:\&quot;/s/local-specifications\&quot;,\&quot;entityId\&quot;:null}},\&quot;sequence\&quot;:20,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:196615.6,\&quot;duration\&quot;:12934,\&quot;pageStartTime\&quot;:1613741387413,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:6,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:196640.78,\&quot;pageStartTime\&quot;:1613741387413,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:21,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;custom-local-specifications\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/local-specifications\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:196699.47,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613741387413,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Local_Specifications_1__c\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:196712.61,\&quot;duration\&quot;:22,\&quot;pageStartTime\&quot;:1613741387413,\&quot;marks\&quot;:{\&quot;custom\&quot;:[]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;0a67f0000008OQsAAM\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:196611.16,\&quot;duration\&quot;:974,\&quot;pageStartTime\&quot;:1613741387413,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:25,\&quot;endHeapMB\&quot;:26,\&quot;uiThreadDelay\&quot;:144,\&quot;target\&quot;:\&quot;multi-level-nav\&quot;,\&quot;scope\&quot;:\&quot;menu-item-clicked\&quot;,\&quot;operation\&quot;:\&quot;navigate\&quot;,\&quot;level\&quot;:1,\&quot;wasSubmenuOpen\&quot;:false,\&quot;pageContext\&quot;:\&quot;custom-local-specifications\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/local-specifications\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:196616.45,\&quot;duration\&quot;:969,\&quot;pageStartTime\&quot;:1613741387413,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:196653.4,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:196701.64,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:196702.86,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:35,\&quot;requestLength\&quot;:1034,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;583;a\&quot;],\&quot;requestId\&quot;:\&quot;196702830000d0ca27\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1628,\&quot;xhrDuration\&quot;:835,\&quot;xhrStall\&quot;:481,\&quot;startTime\&quot;:196704,\&quot;fetchStart\&quot;:196704,\&quot;requestStart\&quot;:197185,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:829,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1421,\&quot;serverTime\&quot;:175,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:837}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:196646.94,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;583;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:55,\&quot;serverTime\&quot;:{\&quot;total\&quot;:140,\&quot;db\&quot;:26,\&quot;xhrServerTime\&quot;:174,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:894}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:7.51,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-0e10043a-d135-4821-82de-38336ef889f3.c255\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7.51}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:197586.45,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.15000000002328306}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:969,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:143,\&quot;longestTask\&quot;:143,\&quot;network\&quot;:{\&quot;rtt\&quot;:200,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:969,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;lds:getApex__b2b_LocalSpecification_NoCat_getLocalL1Specs_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__b2b_LocalSpecification_NoCat_getLocalL2Specs_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;total\&quot;:{\&quot;hits\&quot;:2,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:7,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;custom-local-specifications\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/local-specifications\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;0d7937a5f26b3079\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;0d7937a5f26b3079\&quot;,\&quot;id\&quot;:\&quot;0d7937a5f26b3079\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613741584032000,\&quot;duration\&quot;:969000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/local-specifications\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;custom-local-specifications\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;0d7937a5f26b3079\&quot;,\&quot;id\&quot;:\&quot;28245dc3999906b1\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;0d7937a5f26b3079\&quot;,\&quot;timestamp\&quot;:1613741584118000,\&quot;duration\&quot;:838000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=34&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;196702830000d0ca27\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:2},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[13,13]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[1,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:[1,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585001,\&quot;value\&quot;:[975]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[2191]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[1357]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584031,\&quot;value\&quot;:[1998]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584031,\&quot;value\&quot;:[20645]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584031,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741585002,\&quot;value\&quot;:[969]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_LocalSpecification_NoCat_getLocalL1Specs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613741584127,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_LocalSpecification_NoCat_getLocalL1Specs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_LocalSpecification_NoCat_getLocalL1Specs_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_LocalSpecification_NoCat_getLocalL2Specs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_LocalSpecification_NoCat_getLocalL2Specs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_LocalSpecification_NoCat_getLocalL2Specs_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613741584128,\&quot;value\&quot;:[0]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">197587110000184bfa</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PLP" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Get Local Specifications" enabled="true">
            <stringProp name="filename">data/EJ/localSpecId.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">localSpec</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">42</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/detail/${localSpec}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;575;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;0ZG7f0000008QGaGAM.undefined.FULL.null.null.null.VIEW.true.null.null.null&quot;}},{&quot;id&quot;:&quot;576;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0ZG7f0000008QGaGAM&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;582;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;f1494877-5553-42b3-baff-e19ff75dea78&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqA&quot;,&quot;entity_name&quot;:&quot;ProductCategory&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;categoryPath&quot;:&quot;detail&quot;,&quot;recordId&quot;:&quot;0ZG7f0000008QGaGAM&quot;,&quot;routeNamespace&quot;:&quot;category&quot;,&quot;picasso_id&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8826839000006090a2</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">911fcbb99f96b9aa</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log LocalSpec" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****LocalSpec: &quot; + vars.get(&quot;localSpec&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">43</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/detail/${localSpec}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;608;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo_NoCat&quot;,&quot;method&quot;:&quot;getCategoryInfo&quot;,&quot;params&quot;:{&quot;categoryId&quot;:&quot;0ZG7f0000008QGaGAM&quot;,&quot;localSpecId&quot;:&quot;${localSpec}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">88271523000082c846</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">45e3cce1e6b578cd</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">44</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/detail/${localSpec}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;609;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${account}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8827171400002e9174</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">0ec8fe828a98b65f</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">45</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/detail/${localSpec}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;610;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2B_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;categoryId&quot;:&quot;0ZG7f0000008QGaGAM&quot;,&quot;includePrices&quot;:true,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[],&quot;localSpec&quot;:&quot;${localSpec}&quot;,&quot;effectiveAccountId&quot;:&quot;${account}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8827189400003c4c72</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">5a8ba1b45a2b586f</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">81d2a1211db85709</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Product ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productId</stringProp>
              <stringProp name="RegexExtractor.regex">},&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product ID" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****ProductId: &quot; + vars.get(&quot;productId&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/detail/${localSpec}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;613;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:882674.58,\&quot;pageStartTime\&quot;:1613744769510,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/local-specifications\&quot;,\&quot;requestURI\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;,\&quot;entityId\&quot;:\&quot;0ZG7f0000008QGaGAM\&quot;}},\&quot;sequence\&quot;:23,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;0ZG7f0000008QGaGAM\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;custom-local-specifications\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/local-specifications\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:882675.01,\&quot;duration\&quot;:16926,\&quot;pageStartTime\&quot;:1613744769510,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:10,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:882700.06,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613744769510,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;0ZG7f0000008QGaGAM\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:882712.36,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613744769510,\&quot;marks\&quot;:{\&quot;custom\&quot;:[]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;navigate\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Home\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008QGaGAM\&quot;,\&quot;localSpec\&quot;:\&quot;${localSpec}\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:882976.67,\&quot;pageStartTime\&quot;:1613744769510,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;0ZG7f0000008QGaGAM\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:24,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:882675.42,\&quot;duration\&quot;:1513,\&quot;pageStartTime\&quot;:1613744769510,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:882699.95,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:882683.93,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:42,\&quot;requestLength\&quot;:2326,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;575;a\&quot;,\&quot;576;a\&quot;,\&quot;582;a\&quot;],\&quot;requestId\&quot;:\&quot;8826839000006090a2\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2734,\&quot;xhrDuration\&quot;:289,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:882685,\&quot;fetchStart\&quot;:882685,\&quot;requestStart\&quot;:882687,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:282,\&quot;transfer\&quot;:7,\&quot;transferSize\&quot;:1698,\&quot;serverTime\&quot;:92,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:292},{\&quot;ts\&quot;:882715.25,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:43,\&quot;requestLength\&quot;:1210,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;608;a\&quot;],\&quot;requestId\&quot;:\&quot;88271523000082c846\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1156,\&quot;xhrDuration\&quot;:294,\&quot;xhrStall\&quot;:57,\&quot;startTime\&quot;:882716,\&quot;fetchStart\&quot;:882716,\&quot;requestStart\&quot;:882773,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:293,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:1206,\&quot;serverTime\&quot;:64,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:296},{\&quot;ts\&quot;:882717.16,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:44,\&quot;requestLength\&quot;:1208,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;609;a\&quot;],\&quot;requestId\&quot;:\&quot;8827171400002e9174\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1653,\&quot;xhrDuration\&quot;:391,\&quot;xhrStall\&quot;:56,\&quot;startTime\&quot;:882718,\&quot;fetchStart\&quot;:882718,\&quot;requestStart\&quot;:882774,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:354,\&quot;transfer\&quot;:37,\&quot;transferSize\&quot;:1419,\&quot;serverTime\&quot;:133,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:395},{\&quot;ts\&quot;:882718.95,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:45,\&quot;requestLength\&quot;:1491,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;610;a\&quot;],\&quot;requestId\&quot;:\&quot;8827189400003c4c72\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:4978,\&quot;xhrDuration\&quot;:1390,\&quot;xhrStall\&quot;:255,\&quot;startTime\&quot;:882719,\&quot;fetchStart\&quot;:882719,\&quot;requestStart\&quot;:882975,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1389,\&quot;transfer\&quot;:1,\&quot;transferSize\&quot;:1911,\&quot;serverTime\&quot;:937,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1393}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:882679.88,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;575;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:29,\&quot;db\&quot;:7,\&quot;xhrServerTime\&quot;:92,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:297},{\&quot;ts\&quot;:882680.2,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;576;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:92,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:297},{\&quot;ts\&quot;:882683.75,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;582;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:92,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:294},{\&quot;ts\&quot;:882715.16,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;608;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;ERROR\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:42,\&quot;db\&quot;:11,\&quot;xhrServerTime\&quot;:64,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:297},{\&quot;ts\&quot;:882717.06,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;609;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:105,\&quot;db\&quot;:26,\&quot;xhrServerTime\&quot;:132,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:395},{\&quot;ts\&quot;:882718.87,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;610;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:914,\&quot;db\&quot;:82,\&quot;xhrServerTime\&quot;:937,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1394}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:7.26,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-f1494877-5553-42b3-baff-e19ff75dea78.c257\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7.26}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:884188.98,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.3200000000651926}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:1513,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;0ZG7f0000008QGaGAM\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;custom-local-specifications\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/local-specifications\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:60,\&quot;longestTask\&quot;:60,\&quot;network\&quot;:{\&quot;rtt\&quot;:200,\&quot;downlink\&quot;:8.15},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:1513,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:2}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:11,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;id\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613745652209000,\&quot;duration\&quot;:1513000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-0ZG\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;id\&quot;:\&quot;911fcbb99f96b9aa\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;timestamp\&quot;:1613745652217000,\&quot;duration\&quot;:292000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=41&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;8826839000006090a2\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;id\&quot;:\&quot;45e3cce1e6b578cd\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;timestamp\&quot;:1613745652249000,\&quot;duration\&quot;:296000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=38&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;88271523000082c846\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;id\&quot;:\&quot;0ec8fe828a98b65f\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;timestamp\&quot;:1613745652250000,\&quot;duration\&quot;:396000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=37&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;8827171400002e9174\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;id\&quot;:\&quot;5a8ba1b45a2b586f\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;81d2a1211db85709\&quot;,\&quot;timestamp\&quot;:1613745652252000,\&quot;duration\&quot;:1394000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=25&amp;ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute=1&amp;ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;8827189400003c4c72\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653723,\&quot;value\&quot;:[8,8]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653723,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653723,\&quot;value\&quot;:[2,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745652252,\&quot;value\&quot;:[0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653722,\&quot;value\&quot;:[12771]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653722,\&quot;value\&quot;:[7510]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745652209,\&quot;value\&quot;:[1998]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745652209,\&quot;value\&quot;:[12599]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745652209,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613745653723,\&quot;value\&quot;:[1513]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">88418966000053ab43</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PDP" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${productId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1201;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${productId}.0122S000000oVjUQAU.FULL.null.null.null.VIEW.true.null.LastModifiedDate,Description,Hydrant_Card__c,LastModifiedBy;2Id,StockKeepingUnit,Product_Drawing_URL__c,Name,Region__c,Project_Types__c,CreatedBy;2Id,CreatedById,CreatedBy;2Name,RecordTypeId,ProductImage__c,Item_web_description__c,CurrencyIsoCode,LastModifiedBy;2Name,Product_UOM__c,SystemModstamp,Series__c,Drawing_pdf__c,b2b_Web_Name__c,M3_STAT__c,CreatedDate,Family,Product_Weight__c,Id,Status__c,LastModifiedById.null&quot;}},{&quot;id&quot;:&quot;1202;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${productId}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;1209;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;ec156ed9-59a4-49be-a336-2f9278a747e2&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqJ&quot;,&quot;entity_name&quot;:&quot;Product2&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordName&quot;:&quot;detail&quot;,&quot;recordId&quot;:&quot;${productId}&quot;,&quot;picasso_id&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">be23162d662c8e52</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">3482782360000490bc</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">13b448b916511009</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">be23162d662c8e52</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Product Value" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">productValue</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[1].returnValue.RecordData._Title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product Value" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;****ProductValue: &quot; + vars.get(&quot;productValue&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">124</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${productId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1212;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${account}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}},{&quot;id&quot;:&quot;1213;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${account}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">be23162d662c8e52</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">34828104500009a28d</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">3f5297a96fa8f1bb</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">be23162d662c8e52</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">125</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${productValue}/${productId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1244;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:3482769.4,\&quot;pageStartTime\&quot;:1613749415122,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;,\&quot;requestURI\&quot;:\&quot;/s/product/detail/01tE0000001A876IAC\&quot;,\&quot;entityId\&quot;:\&quot;01tE0000001A876IAC\&quot;}},\&quot;sequence\&quot;:48,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;01tE0000001A876IAC\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:3482770.09,\&quot;duration\&quot;:25634,\&quot;pageStartTime\&quot;:1613749415122,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:22,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:3482776.14,\&quot;pageStartTime\&quot;:1613749415122,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;0ZG7f0000008QGaGAM\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:49,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/01tE0000001A876IAC\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:3482776.33,\&quot;pageStartTime\&quot;:1613749415122,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;01tE0000001A876IAC\&quot;,\&quot;recordType\&quot;:\&quot;Product2\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:50,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/01tE0000001A876IAC\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:3482807.27,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613749415122,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;01tE0000001A876IAC\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:3482831.3,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613749415122,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008OK8GAM\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:3483317.73,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613749415122,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008OK8GAM\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:3482770.53,\&quot;duration\&quot;:590,\&quot;pageStartTime\&quot;:1613749415122,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:3482807.17,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:3482782.39,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:123,\&quot;requestLength\&quot;:2764,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1201;a\&quot;,\&quot;1202;a\&quot;,\&quot;1209;a\&quot;],\&quot;requestId\&quot;:\&quot;3482782360000490bc\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6049,\&quot;xhrDuration\&quot;:467,\&quot;xhrStall\&quot;:59,\&quot;startTime\&quot;:3482783,\&quot;fetchStart\&quot;:3482783,\&quot;requestStart\&quot;:3482843,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:451,\&quot;transfer\&quot;:15,\&quot;transferSize\&quot;:2590,\&quot;serverTime\&quot;:220,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:469},{\&quot;ts\&quot;:3482810.46,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:124,\&quot;requestLength\&quot;:1663,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1212;a\&quot;,\&quot;1213;a\&quot;],\&quot;requestId\&quot;:\&quot;34828104500009a28d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2311,\&quot;xhrDuration\&quot;:501,\&quot;xhrStall\&quot;:32,\&quot;startTime\&quot;:3482811,\&quot;fetchStart\&quot;:3482811,\&quot;requestStart\&quot;:3482844,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:495,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1455,\&quot;serverTime\&quot;:291,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:503}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:3482775.69,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1201;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:6,\&quot;serverTime\&quot;:{\&quot;total\&quot;:162,\&quot;db\&quot;:91,\&quot;xhrServerTime\&quot;:219,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:478},{\&quot;ts\&quot;:3482777.74,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1202;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:16,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:219,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:477},{\&quot;ts\&quot;:3482782.2,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1209;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:219,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:473},{\&quot;ts\&quot;:3482788.79,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1212;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:21,\&quot;serverTime\&quot;:{\&quot;total\&quot;:193,\&quot;db\&quot;:109,\&quot;xhrServerTime\&quot;:290,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:525},{\&quot;ts\&quot;:3482796.78,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1213;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:58,\&quot;db\&quot;:7,\&quot;xhrServerTime\&quot;:290,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:517}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:10.45,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-ec156ed9-59a4-49be-a336-2f9278a747e2.c258\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10.45}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:3483361.37,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.2000000006519258,\&quot;storeIngest\&quot;:0.2900000000372529,\&quot;storeBroadcast\&quot;:0.01000000024214387}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:590,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;01tE0000001A876IAC\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/detail/0ZG7f0000008QGaGAM\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:75,\&quot;longestTask\&quot;:75,\&quot;network\&quot;:{\&quot;rtt\&quot;:300,\&quot;downlink\&quot;:0.9},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:590,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProduct_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProductPrice_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;total\&quot;:{\&quot;hits\&quot;:5,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:23,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/01tE0000001A876IAC\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;be23162d662c8e52\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;id\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613752897834000,\&quot;duration\&quot;:590000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/product/detail/01tE0000001A876IAC\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-01t\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;id\&quot;:\&quot;13b448b916511009\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;timestamp\&quot;:1613752897846000,\&quot;duration\&quot;:469000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=122&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;3482782360000490bc\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;id\&quot;:\&quot;3f5297a96fa8f1bb\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;be23162d662c8e52\&quot;,\&quot;timestamp\&quot;:1613752897874000,\&quot;duration\&quot;:503000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=120&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;34828104500009a28d\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:3},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898425,\&quot;value\&quot;:[159,159]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898425,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898425,\&quot;value\&quot;:[0,3]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898317,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898317,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:[0,0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898424,\&quot;value\&quot;:[9486]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898424,\&quot;value\&quot;:[5192]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897834,\&quot;value\&quot;:[2000]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897834,\&quot;value\&quot;:[22413]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897834,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898425,\&quot;value\&quot;:[590]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752898317,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897875,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897875,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897875,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613752897876,\&quot;value\&quot;:[0]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">3483362050000ee7b3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login &gt; PLP &gt; PDP &gt; Add to Project" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
            <stringProp name="73596745">Login</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PLP" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Get Product Listing Pages" enabled="true">
            <stringProp name="filename">data/EJ/plp.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter"></stringProp>
            <stringProp name="variableNames">plp</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open PLP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;386;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${plp}GAE.undefined.FULL.null.null.null.VIEW.true.null.null.null&quot;}},{&quot;id&quot;:&quot;387;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${plp}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;393;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;f1494877-5553-42b3-baff-e19ff75dea78&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqA&quot;,&quot;entity_name&quot;:&quot;ProductCategory&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;categoryPath&quot;:&quot;drainage-grates-frames-and-curb-inlets&quot;,&quot;recordId&quot;:&quot;${plp}&quot;,&quot;routeNamespace&quot;:&quot;category&quot;,&quot;picasso_id&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;,&quot;routeId&quot;:&quot;e503743f-6fff-447e-ad6b-c4eb01e417ce&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77229260000c9c35c8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">b4c66d00d00706de</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log PLP" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****PLP: &quot; + vars.get(&quot;plp&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - RetrieveCartSummary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;397;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77341870000e803d91</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">dc86e8580bc6d9a1</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Account ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accountID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.accountId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Account ID" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Account ID: &quot; + vars.get(&quot;accountID&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;435;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77353480000683589e</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">682ff599fc1811e7</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;436;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2B_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;categoryId&quot;:&quot;${plp}&quot;,&quot;includePrices&quot;:true,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[],&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">77355930000905496b</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">012b63e333eaad13</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">607290e36836fca0</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Product ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">product</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.productsPage.products[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get SKU" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sku</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.productsPage.products[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****PDP: &quot; + vars.get(&quot;product&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Product SKU" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Product SKU: &quot; + vars.get(&quot;sku&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PLP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/category/shop-products/access-covers-grates-and-frames/drainage-grates-frames-and-curb-inlets/${plp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;441;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77212.85,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/\&quot;,\&quot;requestURI\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;entityId\&quot;:\&quot;${plp}\&quot;}},\&quot;sequence\&quot;:12,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${plp}\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77217.7,\&quot;duration\&quot;:18092,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:3,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77250.96,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:13,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77329.9,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${plp}\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77353.09,\&quot;duration\&quot;:7,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77360.95,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.1299999999901047}}]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:77362.21,\&quot;duration\&quot;:2,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;${plp}GAE\&quot;,\&quot;name\&quot;:\&quot;Home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:77480.97,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;${plp}GAE\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:14,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:77218.26,\&quot;duration\&quot;:1543,\&quot;pageStartTime\&quot;:1613821950675,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77265.42,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:77334.21,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:77229.3,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:2386,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;386;a\&quot;,\&quot;387;a\&quot;,\&quot;393;a\&quot;],\&quot;requestId\&quot;:\&quot;77229260000c9c35c8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:4602,\&quot;xhrDuration\&quot;:247,\&quot;xhrStall\&quot;:5,\&quot;startTime\&quot;:77231,\&quot;fetchStart\&quot;:77231,\&quot;requestStart\&quot;:77236,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:237,\&quot;transfer\&quot;:10,\&quot;transferSize\&quot;:1841,\&quot;serverTime\&quot;:63,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:251},{\&quot;ts\&quot;:77341.89,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:1086,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;397;a\&quot;],\&quot;requestId\&quot;:\&quot;77341870000e803d91\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2255,\&quot;xhrDuration\&quot;:407,\&quot;xhrStall\&quot;:136,\&quot;startTime\&quot;:77343,\&quot;fetchStart\&quot;:77343,\&quot;requestStart\&quot;:77479,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:401,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:1506,\&quot;serverTime\&quot;:145,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:411},{\&quot;ts\&quot;:77353.49,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:24,\&quot;requestLength\&quot;:1242,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;435;a\&quot;],\&quot;requestId\&quot;:\&quot;77353480000683589e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2312,\&quot;xhrDuration\&quot;:403,\&quot;xhrStall\&quot;:168,\&quot;startTime\&quot;:77355,\&quot;fetchStart\&quot;:77355,\&quot;requestStart\&quot;:77523,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:397,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:1517,\&quot;serverTime\&quot;:108,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:406},{\&quot;ts\&quot;:77355.94,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:1477,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;436;a\&quot;],\&quot;requestId\&quot;:\&quot;77355930000905496b\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:47656,\&quot;xhrDuration\&quot;:1223,\&quot;xhrStall\&quot;:166,\&quot;startTime\&quot;:77357,\&quot;fetchStart\&quot;:77357,\&quot;requestStart\&quot;:77523,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1217,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:4138,\&quot;serverTime\&quot;:929,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1225}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:77224.88,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;386;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:23,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:257},{\&quot;ts\&quot;:77225.15,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;387;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:2,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:257},{\&quot;ts\&quot;:77229.05,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;393;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:63,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:253},{\&quot;ts\&quot;:77258.3,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;397;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:83,\&quot;serverTime\&quot;:{\&quot;total\&quot;:122,\&quot;db\&quot;:23,\&quot;xhrServerTime\&quot;:145,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:495},{\&quot;ts\&quot;:77353.43,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;435;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:81,\&quot;db\&quot;:20,\&quot;xhrServerTime\&quot;:108,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:406},{\&quot;ts\&quot;:77355.88,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;436;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:896,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:928,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1226}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:9.05,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-f1494877-5553-42b3-baff-e19ff75dea78.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:9.05}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:78763.91,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.42999999997846317}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:1543,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${plp}\&quot;,\&quot;entityType\&quot;:\&quot;ProductCategory\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:276,\&quot;longestTask\&quot;:161,\&quot;network\&quot;:{\&quot;rtt\&quot;:100,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:1543,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:2}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:4,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:78764.29,\&quot;pageStartTime\&quot;:1613821950675,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Home.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Home\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:15,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613822027893000,\&quot;duration\&quot;:1543000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/category/drainage-grates-frames-and-curb-inlets/${plp}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-0ZG\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;b4c66d00d00706de\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822027904000,\&quot;duration\&quot;:251000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=21&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77229260000c9c35c8\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;dc86e8580bc6d9a1\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028016000,\&quot;duration\&quot;:412000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=20&amp;ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77341870000e803d91\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;682ff599fc1811e7\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028028000,\&quot;duration\&quot;:406000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=14&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77353480000683589e\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;id\&quot;:\&quot;012b63e333eaad13\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;607290e36836fca0\&quot;,\&quot;timestamp\&quot;:1613822028030000,\&quot;duration\&quot;:1226000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=12&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;77355930000905496b\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[7,7]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[1,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822028035,\&quot;value\&quot;:[0,0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029436,\&quot;value\&quot;:[59076]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029436,\&quot;value\&quot;:[7533]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[2851]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[22068]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822027892,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613822029439,\&quot;value\&quot;:[1543]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">78764740000ddc70f2</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PDP" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">79</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;938;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${product}.0122S000000oVjUQAU.FULL.null.null.null.VIEW.true.null.LastModifiedDate,Description,Hydrant_Card__c,LastModifiedBy;2Id,StockKeepingUnit,Product_Drawing_URL__c,Name,Region__c,Project_Types__c,CreatedBy;2Id,CreatedById,CreatedBy;2Name,RecordTypeId,ProductImage__c,Item_web_description__c,CurrencyIsoCode,LastModifiedBy;2Name,Product_UOM__c,SystemModstamp,Series__c,Drawing_pdf__c,b2b_Web_Name__c,M3_STAT__c,CreatedDate,Family,Product_Weight__c,Id,Status__c,LastModifiedById.null&quot;}},{&quot;id&quot;:&quot;939;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${product}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;946;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;ec156ed9-59a4-49be-a336-2f9278a747e2&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqJ&quot;,&quot;entity_name&quot;:&quot;Product2&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordName&quot;:&quot;detail&quot;,&quot;recordId&quot;:&quot;${product}&quot;,&quot;picasso_id&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;,&quot;routeId&quot;:&quot;dc849bcd-a0c4-4055-a692-a04ad4fd2fd5&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">654183230000da9de9</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">d4170c18025295bd</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/detail/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;949;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}},{&quot;id&quot;:&quot;950;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65459671000069ba3f</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">daafe06b10d362cf</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">80af8d6cdc4d3aad</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDP - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">81</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${pdp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1011;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654165.88,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;,\&quot;requestURI\&quot;:\&quot;/s/product/detail/${product}\&quot;,\&quot;entityId\&quot;:\&quot;${product}\&quot;}},\&quot;sequence\&quot;:39,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${product}\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654168.14,\&quot;duration\&quot;:33741,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:9,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654175.19,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;readsSummary\&quot;,\&quot;attributes\&quot;:{\&quot;read\&quot;:{},\&quot;reads\&quot;:{},\&quot;missedRecordType\&quot;:{\&quot;0ZG7f0000008Rq3GAE\&quot;:1},\&quot;shouldLog\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:40,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${product}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654175.35,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;${product}\&quot;,\&quot;recordType\&quot;:\&quot;Product2\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:41,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${product}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654593.11,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${product}\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654629.87,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008RqMGAU\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:654946.34,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;recordId\&quot;:\&quot;0ZG7f0000008RqMGAU\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:654168.93,\&quot;duration\&quot;:824,\&quot;pageStartTime\&quot;:1613935660847,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:654593.01,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:654183.27,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:79,\&quot;requestLength\&quot;:2766,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;938;a\&quot;,\&quot;939;a\&quot;,\&quot;946;a\&quot;],\&quot;requestId\&quot;:\&quot;654183230000da9de9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8362,\&quot;xhrDuration\&quot;:332,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:654561,\&quot;fetchStart\&quot;:654561,\&quot;requestStart\&quot;:654563,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:325,\&quot;transfer\&quot;:7,\&quot;transferSize\&quot;:2855,\&quot;serverTime\&quot;:195,\&quot;xhrDelay\&quot;:379},\&quot;duration\&quot;:711},{\&quot;ts\&quot;:654596.72,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:80,\&quot;requestLength\&quot;:1666,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;949;a\&quot;,\&quot;950;a\&quot;],\&quot;requestId\&quot;:\&quot;65459671000069ba3f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:3067,\&quot;xhrDuration\&quot;:339,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:654598,\&quot;fetchStart\&quot;:654598,\&quot;requestStart\&quot;:654601,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:333,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1548,\&quot;serverTime\&quot;:211,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:342}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:654174.76,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;938;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:8,\&quot;serverTime\&quot;:{\&quot;total\&quot;:106,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:722},{\&quot;ts\&quot;:654177.15,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;939;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:720},{\&quot;ts\&quot;:654183.04,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;946;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:195,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:714},{\&quot;ts\&quot;:654568.59,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;949;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;serverTime\&quot;:{\&quot;total\&quot;:108,\&quot;db\&quot;:27,\&quot;xhrServerTime\&quot;:210,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:371},{\&quot;ts\&quot;:654579.35,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;950;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:17,\&quot;serverTime\&quot;:{\&quot;total\&quot;:63,\&quot;db\&quot;:8,\&quot;xhrServerTime\&quot;:210,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:360}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:12.72,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-ec156ed9-59a4-49be-a336-2f9278a747e2.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:12.72}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:654994.7,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.5400000000372529,\&quot;storeIngest\&quot;:0.35999999998603016,\&quot;storeBroadcast\&quot;:0}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:823,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${product}\&quot;,\&quot;entityType\&quot;:\&quot;Product2\&quot;,\&quot;context\&quot;:\&quot;detail-0ZG\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/category/shop-products/water-distribution/fire-hydrants/0ZG7f0000008Rq3GAE\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:487,\&quot;longestTask\&quot;:487,\&quot;network\&quot;:{\&quot;rtt\&quot;:50,\&quot;downlink\&quot;:3.05},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:823,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;AuraRecordStore_auraIf\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProduct_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__B2BGetInfo_getProductPrice_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;lds:getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;total\&quot;:{\&quot;hits\&quot;:5,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:10,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${product}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:654995.01,\&quot;pageStartTime\&quot;:1613935660847,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:42,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/${product}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1613936315024000,\&quot;duration\&quot;:823000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/product/detail/${product}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-01t\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;d4170c18025295bd\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;timestamp\&quot;:1613936315038000,\&quot;duration\&quot;:712000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=78&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;654183230000da9de9\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;id\&quot;:\&quot;daafe06b10d362cf\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;80af8d6cdc4d3aad\&quot;,\&quot;timestamp\&quot;:1613936315452000,\&quot;duration\&quot;:342000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=75&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;65459671000069ba3f\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:3},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[64,64,64]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[0,0,3]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0,0,0,0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315848,\&quot;value\&quot;:[12555]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315848,\&quot;value\&quot;:[5195]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[2851]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[39719]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315023,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315850,\&quot;value\&quot;:[823]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315751,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProduct_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getProductPrice_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315455,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1613936315456,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_ProductSpecification_getProductSpecs_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1613936315456,\&quot;value\&quot;:[1]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6549955000007e9914</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add To Project" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add To Project" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;163;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getLists&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:true,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert adding product to project" enabled="true">
              <stringProp name="JMES_PATH">actions[0].state</stringProp>
              <stringProp name="EXPECTED_VALUE">SUCCESS</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">319361900003756d40</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add To Project - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;164;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;createAndAddToList&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;productId&quot;:&quot;${product}&quot;,&quot;wishlistName&quot;:&quot;Jmeter Test${__RandomString(4,0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)}&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">4101897000049982ad</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add To Project - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;165;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getLists&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:true,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">41743430000ba23527</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login  &gt; PLP &gt; PDP &gt; Add to Cart &gt; Checkout" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
            <stringProp name="73596745">Login</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PLP" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-737985728">Login &gt; PLP &gt; PDP &gt; Add to Project</stringProp>
            <stringProp name="79316">PLP</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PDP" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-737985728">Login &gt; PLP &gt; PDP &gt; Add to Project</stringProp>
            <stringProp name="79068">PDP</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add To Cart" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add To Cart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;330;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;addToCart&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;productId&quot;:&quot;${product}&quot;,&quot;quantity&quot;:1,&quot;effectiveAccountId&quot;:&quot;${accountID}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert adding product to cart" enabled="true">
              <stringProp name="JMES_PATH">actions[0].state</stringProp>
              <stringProp name="EXPECTED_VALUE">SUCCESS</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">554583040000a009cb</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Cart ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.cartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Cart Item ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cartItemId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.returnValue.cartItemId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Cart ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Cart ID:&quot; + vars.get(&quot;cartId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Cart Item ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Cart Item ID:&quot; + vars.get(&quot;cartItemId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add To Cart - RetrieveCartSummary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/product/${sku}/${product}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;332;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">555645000000b0b7b3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cart" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">79</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.getCartItems" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.getCartItems</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wishlist.getWishlists" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wishlist.getWishlists</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/cart/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1037;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${cartId}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;1045;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WishlistController/ACTION$getWishlists&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;includeDisplayedList&quot;:false,&quot;productFieldNames&quot;:[]}},{&quot;id&quot;:&quot;1047;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$getCartItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;,&quot;productFieldNames&quot;:[]}},{&quot;id&quot;:&quot;1054;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$getCartItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;,&quot;productFieldNames&quot;:[]}},{&quot;id&quot;:&quot;1060;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;${cartId}&quot;}},{&quot;id&quot;:&quot;1066;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;8705f7e8-d622-4dfa-a433-0c880f5fc501&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;4abaab2b-f64b-471d-bd0c-521533c5a80a&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExqS&quot;,&quot;entity_name&quot;:&quot;WebCart&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordId&quot;:&quot;${cartId}&quot;,&quot;picasso_id&quot;:&quot;8705f7e8-d622-4dfa-a433-0c880f5fc501&quot;,&quot;routeId&quot;:&quot;8705f7e8-d622-4dfa-a433-0c880f5fc501&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">8749825b56bd321d</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">559164720000df323b</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">8e1ce478d61d7d11</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">8749825b56bd321d</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cart - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/cart/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1110;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:559126.93,\&quot;pageStartTime\&quot;:1614070257226,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/product/detail/01tE0000001A7LGIA0\&quot;,\&quot;requestURI\&quot;:\&quot;/s/cart/${cartId}\&quot;,\&quot;entityId\&quot;:\&quot;${cartId}\&quot;}},\&quot;sequence\&quot;:38,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${cartId}\&quot;,\&quot;entityType\&quot;:\&quot;WebCart\&quot;,\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/01tE0000001A7LGIA0\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:559128.84,\&quot;duration\&quot;:17068,\&quot;pageStartTime\&quot;:1614070257226,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:10,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:559196,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614070257226,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${cartId}\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:559975.28,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614070257226,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;01tE0000001A7LGIA0\&quot;,\&quot;objectApiName\&quot;:\&quot;Product2\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:559122.57,\&quot;duration\&quot;:906,\&quot;pageStartTime\&quot;:1614070257226,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:74,\&quot;endHeapMB\&quot;:75,\&quot;uiThreadDelay\&quot;:95,\&quot;target\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:\&quot;slds-dropdown-trigger slds-p-around_xxx-small\&quot;,\&quot;notInstrumented\&quot;:true,\&quot;pageContext\&quot;:\&quot;detail-0a6\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/cart/${cartId}\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:559129.42,\&quot;duration\&quot;:900,\&quot;pageStartTime\&quot;:1614070257226,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:559195.91,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:559164.76,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:79,\&quot;requestLength\&quot;:3185,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1037;a\&quot;,\&quot;1045;a\&quot;,\&quot;1047;a\&quot;,\&quot;1054;a\&quot;,\&quot;1060;a\&quot;,\&quot;1066;a\&quot;],\&quot;requestId\&quot;:\&quot;559164720000df323b\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:11018,\&quot;xhrDuration\&quot;:781,\&quot;xhrStall\&quot;:41,\&quot;startTime\&quot;:559166,\&quot;fetchStart\&quot;:559166,\&quot;requestStart\&quot;:559208,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:774,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:2786,\&quot;serverTime\&quot;:568,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:785}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:559132.37,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1037;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:32,\&quot;serverTime\&quot;:{\&quot;total\&quot;:43,\&quot;db\&quot;:18,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:819},{\&quot;ts\&quot;:559141.01,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1045;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:wishlistService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WishlistController/ACTION$getWishlists\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:23,\&quot;serverTime\&quot;:{\&quot;total\&quot;:46,\&quot;db\&quot;:11,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:810},{\&quot;ts\&quot;:559144.11,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1047;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$getCartItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:20,\&quot;serverTime\&quot;:{\&quot;total\&quot;:236,\&quot;db\&quot;:19,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:807},{\&quot;ts\&quot;:559152.42,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1054;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$getCartItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:155,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:799},{\&quot;ts\&quot;:559158.66,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1060;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:25,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:793},{\&quot;ts\&quot;:559164.54,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1066;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:568,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:787}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:34.2,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-4abaab2b-f64b-471d-bd0c-521533c5a80a.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:34.2}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:560032.35,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.07999999995809048}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:900,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${cartId}\&quot;,\&quot;entityType\&quot;:\&quot;WebCart\&quot;,\&quot;context\&quot;:\&quot;detail-01t\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/product/detail/01tE0000001A7LGIA0\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:94,\&quot;longestTask\&quot;:94,\&quot;network\&quot;:{\&quot;rtt\&quot;:300,\&quot;downlink\&quot;:1.45},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:900,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;lds:getApex__B2BGetInfo_getCartName_false\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0},\&quot;total\&quot;:{\&quot;hits\&quot;:1,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:11,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0a6\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/cart/${cartId}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;8749825b56bd321d\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:560032.68,\&quot;pageStartTime\&quot;:1614070257226,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:39,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-0a6\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/cart/${cartId}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;8749825b56bd321d\&quot;,\&quot;id\&quot;:\&quot;8749825b56bd321d\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614070816531000,\&quot;duration\&quot;:900000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/cart/${cartId}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-0a6\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;8749825b56bd321d\&quot;,\&quot;id\&quot;:\&quot;8e1ce478d61d7d11\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;8749825b56bd321d\&quot;,\&quot;timestamp\&quot;:1614070816567000,\&quot;duration\&quot;:785000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=78&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;559164720000df323b\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614070816601,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817435,\&quot;value\&quot;:[161,161,161]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817435,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817435,\&quot;value\&quot;:[3,3,1]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070816601,\&quot;value\&quot;:[0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817431,\&quot;value\&quot;:[906]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817432,\&quot;value\&quot;:[11581]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817432,\&quot;value\&quot;:[3881]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070816531,\&quot;value\&quot;:[2855]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070816531,\&quot;value\&quot;:[31830]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070816531,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817435,\&quot;value\&quot;:[900]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__B2BGetInfo_getCartName_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614070816601,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__B2BGetInfo_getCartName_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614070816601,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__B2BGetInfo_getCartName_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070816601,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614070817352,\&quot;value\&quot;:[0]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">560033200000ea5f84</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Checkout Shipping" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Precondition" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Address ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">16</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;XrAWq7KlNf8wSyobBsPNEA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;MQUkNmnW1oYwiyIgQu8R_w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;TvkWWYjc5lgUaBHUxjkWQw&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;6clxMbQpvXsP3Tj9HKLGIA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account?tabset-2cb20=tab3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;532;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewManagerGrid.ListViewManagerGridController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;listReference&quot;:{&quot;listViewIdOrName&quot;:&quot;NonDefaultActiveAddresses__r&quot;,&quot;inContextOfRecordId&quot;:&quot;${accountID}&quot;,&quot;isMRU&quot;:false,&quot;isSearch&quot;:false},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;,&quot;layoutMode&quot;:&quot;VIEW&quot;,&quot;inContextOfComponent&quot;:&quot;force:listViewManagerGrid&quot;,&quot;enableMassActions&quot;:true,&quot;enableRowErrors&quot;:false,&quot;useHoversForLookup&quot;:false}},{&quot;id&quot;:&quot;535;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;NonDefaultActiveAddresses__r&quot;,&quot;pageSize&quot;:50,&quot;sortBy&quot;:&quot;&quot;,&quot;limit&quot;:1000,&quot;useTimeout&quot;:false,&quot;queryLocator&quot;:null,&quot;parentRecordId&quot;:&quot;${accountID}&quot;,&quot;getCount&quot;:false,&quot;isPreview&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">313539100000f1ae36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Address ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">addressId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[1].returnValue.recordIdActionsList[0].recordId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Address ID " enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.info(&quot;****Address ID:&quot; + vars.get(&quot;addressId&quot;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Address ID" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account?tabset-2cb20=tab3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1120;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewManagerGrid.ListViewManagerGridController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;listReference&quot;:{&quot;listViewIdOrName&quot;:&quot;ContactPointAddresses&quot;,&quot;inContextOfRecordId&quot;:&quot;${accountID}&quot;,&quot;isMRU&quot;:false,&quot;isSearch&quot;:false},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;,&quot;layoutMode&quot;:&quot;VIEW&quot;,&quot;inContextOfComponent&quot;:&quot;force:listViewManagerGrid&quot;,&quot;enableMassActions&quot;:true,&quot;enableRowErrors&quot;:false,&quot;useHoversForLookup&quot;:false}},{&quot;id&quot;:&quot;1123;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;ContactPointAddresses&quot;,&quot;pageSize&quot;:50,&quot;sortBy&quot;:&quot;&quot;,&quot;limit&quot;:1000,&quot;useTimeout&quot;:false,&quot;queryLocator&quot;:null,&quot;parentRecordId&quot;:&quot;${accountID}&quot;,&quot;getCount&quot;:false,&quot;isPreview&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">1372089240000e2c77</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Address ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">addressId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[1].returnValue.recordIdActionsList[0].recordId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Address ID " enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.info(&quot;****Address ID:&quot; + vars.get(&quot;addressId&quot;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.Component.getComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.Component.getComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;180;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://siteforce:pageLoader&quot;,&quot;attributes&quot;:{&quot;pageLoadType&quot;:&quot;THEME_LAYOUT&quot;,&quot;themeLayoutType&quot;:&quot;Checkout&quot;}}},{&quot;id&quot;:&quot;181;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;68019e48-b2ec-4725-a14b-5f002b4c9bea&quot;,&quot;routeType&quot;:&quot;checkout&quot;,&quot;themeLayoutType&quot;:&quot;Checkout&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;b2f08a03-d38b-4e14-8909-ba06895c520a&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;recordId&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:263,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">27540910000d9334ee</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">f803372a9298be94</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping - getRecordAndTranslationData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.userHasRunFlowPermissions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.userHasRunFlowPermissions</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.checkEffectiveAccount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.checkEffectiveAccount</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;198;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${cartId}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;204;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CheckoutFlowController/ACTION$checkEffectiveAccount&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:checkoutFlow&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;205;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CheckoutFlowController/ACTION$userHasRunFlowPermissions&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:checkoutFlow&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;209;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}},{&quot;id&quot;:&quot;214;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;68019e48-b2ec-4725-a14b-5f002b4c9bea&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;b2f08a03-d38b-4e14-8909-ba06895c520a&quot;,&quot;view_uddid&quot;:&quot;0I37f000000Exs6&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordId&quot;:&quot;${cartId}&quot;,&quot;picasso_id&quot;:&quot;68019e48-b2ec-4725-a14b-5f002b4c9bea&quot;,&quot;routeId&quot;:&quot;68019e48-b2ec-4725-a14b-5f002b4c9bea&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2872908000097f6c95</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">9ec3bf6bec055afa</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping - RunInterview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.runInterview" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.runInterview</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;262;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$runInterview&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flowDevName&quot;:&quot;Checkout_Flow&quot;,&quot;arguments&quot;:&quot;[{\&quot;name\&quot;:\&quot;cartId\&quot;,\&quot;type\&quot;:\&quot;String\&quot;,\&quot;supportsRecordId\&quot;:false,\&quot;value\&quot;:\&quot;${cartId}\&quot;}]&quot;,&quot;enableTrace&quot;:false,&quot;enableRollbackMode&quot;:false,&quot;debugAsUserId&quot;:&quot;&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">29174530000797f69c</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">04e3af2649da8e91</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;269;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;b2b_Utility&quot;,&quot;method&quot;:&quot;getShippingOptions&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;},&quot;cacheable&quot;:true,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">317381100007c9e0aa</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">ab597f3e46c03026</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;270;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;b2b_Utility&quot;,&quot;method&quot;:&quot;getCartProductItems&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;},&quot;cacheable&quot;:true,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">31742590000381d94a</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">73dd957bffe2c181</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">9078eeea015f09f5</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Shipping - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;271;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:27523.7,\&quot;pageStartTime\&quot;:1614072126013,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/cart/${cartId}\&quot;,\&quot;requestURI\&quot;:\&quot;/s/checkout/${cartId}\&quot;,\&quot;entityId\&quot;:\&quot;${cartId}\&quot;}},\&quot;sequence\&quot;:5,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${cartId}\&quot;,\&quot;context\&quot;:\&quot;detail-0a6\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/cart/${cartId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:27530.74,\&quot;duration\&quot;:26354,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:1,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:28689.74,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;aura:if\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://flowruntime:multiCheckbox\&quot;,\&quot;markup://ui:outputRichText\&quot;,\&quot;markup://flowruntime:pauseScreen\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://b2b_buyer_data:cartService\&quot;,\&quot;markup://flowruntime:currencyInput\&quot;,\&quot;markup://flowruntime:flowRuntime\&quot;,\&quot;markup://flowruntime:visibilityWrapper\&quot;,\&quot;markup://flowruntime:pauseFinalizedMessage\&quot;,\&quot;markup://flowruntime:numberInput\&quot;,\&quot;markup://flowruntime:modalManager\&quot;,\&quot;markup://flowruntime:errorText\&quot;,\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://flowruntime:dropDownInput\&quot;,\&quot;markup://forceCommunity:seoAssistant\&quot;,\&quot;markup://flowruntime:name\&quot;,\&quot;markup://ui:inputSecret\&quot;,\&quot;markup://flowruntime:dateTimeInput\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://flowruntime:longTextInput\&quot;,\&quot;markup://flowruntime:flowRuntimeV2\&quot;,\&quot;markup://ui:scrollerWrapper\&quot;,\&quot;layout://siteforce-generatedpage-b2f08a03-d38b-4e14-8909-ba06895c520a.c263\&quot;,\&quot;markup://flowruntime:dateInput\&quot;,\&quot;markup://ui:inputCurrency\&quot;,\&quot;markup://siteforce:contentArea\&quot;,\&quot;markup://flowruntime:twoColumn\&quot;,\&quot;markup://forceCommunity:richText\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;markup://ui:inputRadio\&quot;,\&quot;markup://forceCommunity:checkoutFlow\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://flowruntime:body\&quot;,\&quot;markup://flowruntime:spinner\&quot;,\&quot;markup://flowruntime:actionBar\&quot;,\&quot;markup://flowruntime:visibilityWrapperV2\&quot;,\&quot;markup://ui:inputNumber\&quot;,\&quot;markup://flowruntime:actionButton\&quot;,\&quot;layout://siteforce-generatedpage-Checkout.c263\&quot;,\&quot;markup://siteforce:b2bBody\&quot;,\&quot;markup://forceCommunity:htmlBlock\&quot;,\&quot;markup://flowruntime:passwordInput\&quot;,\&quot;markup://flowruntime:choiceUserInput\&quot;,\&quot;markup://siteforce:hiddenRegion\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://forceCommunity:checkoutHeaderWrapper\&quot;,\&quot;markup://flowruntime:textInput\&quot;,\&quot;markup://flowruntime:actionBase\&quot;,\&quot;markup://lightning:overlayLibrary\&quot;,\&quot;markup://flowruntime:flowRuntimeForFlexiPage\&quot;,\&quot;markup://ui:inputCheckbox\&quot;,\&quot;markup://flowruntime:checkboxInput\&quot;,\&quot;markup://flowruntime:picklistInput\&quot;,\&quot;markup://force:skipLink\&quot;,\&quot;markup://ui:inputSmartNumber\&quot;,\&quot;markup://flowruntime:oneColumn\&quot;,\&quot;markup://forceCommunity:outputRichText\&quot;,\&quot;markup://lightning:progressIndicator\&quot;,\&quot;markup://flowruntime:displayText\&quot;,\&quot;markup://flowruntime:helpIcon\&quot;,\&quot;markup://flowruntime:radioButtonInput\&quot;,\&quot;markup://flowruntime:header\&quot;,\&quot;markup://flowruntime:flowRuntimeV1\&quot;,\&quot;markup://flowruntime:inputWrapper\&quot;,\&quot;markup://flowruntime:richTextWrapper\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://flowruntime:finalizePause\&quot;,\&quot;markup://force:skipToContent\&quot;,\&quot;markup://forceCommunity:themeHeaderRendered\&quot;,\&quot;markup://flowruntime:actionSelected\&quot;,\&quot;markup://force:recordUpdated\&quot;,\&quot;markup://flowruntime:hideFromScreenReader\&quot;,\&quot;markup://forceCommunity:themeMenuToggled\&quot;,\&quot;markup://flowruntime:statusChange\&quot;,\&quot;markup://forceCommunity:themeNavTriggerToggled\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:28978.23,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;\&quot;,\&quot;objectApiName\&quot;:\&quot;Cart\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:29190.33,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${cartId}\&quot;,\&quot;objectApiName\&quot;:\&quot;Cart\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:29168.86,\&quot;duration\&quot;:2314,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{\&quot;custom\&quot;:[],\&quot;transport\&quot;:[{\&quot;ts\&quot;:29174.56,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:10,\&quot;requestLength\&quot;:1334,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;262;a\&quot;],\&quot;requestId\&quot;:\&quot;29174530000797f69c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:566729,\&quot;xhrDuration\&quot;:2300,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:29177,\&quot;fetchStart\&quot;:29177,\&quot;requestStart\&quot;:29200,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1693,\&quot;transfer\&quot;:607,\&quot;transferSize\&quot;:107111,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:2305}]},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;flowRuntimeController.onInitialized\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;consumerIdentifier\&quot;:\&quot;flowRuntime\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:31484.57,\&quot;pageStartTime\&quot;:1614072126013,\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;screenName\&quot;:\&quot;ShippingAddressScreen\&quot;,\&quot;sectionsCount\&quot;:0,\&quot;columnsCount\&quot;:0,\&quot;screenFieldCounts\&quot;:{\&quot;c:b2bCheckoutShippingAddress\&quot;:1},\&quot;totalFieldsCount\&quot;:1,\&quot;customerAuraLcCount\&quot;:0,\&quot;customerLwcLcCount\&quot;:1,\&quot;outOfTheBoxLcCount\&quot;:0,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;sequence\&quot;:6,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/${cartId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:27514.7,\&quot;duration\&quot;:4725,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:85,\&quot;endHeapMB\&quot;:121,\&quot;uiThreadDelay\&quot;:716,\&quot;target\&quot;:\&quot;slds-button slds-button_brand slds-p-vertical_xx-small slds-p-horizontal_medium\&quot;,\&quot;scope\&quot;:\&quot;ui-widget\&quot;,\&quot;notInstrumented\&quot;:true,\&quot;pageContext\&quot;:\&quot;checkout\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/checkout/${cartId}\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:27533.34,\&quot;duration\&quot;:4710,\&quot;pageStartTime\&quot;:1614072126013,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;flowruntime\&quot;,\&quot;name\&quot;:\&quot;flowRuntimeCommunity.onInit\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:29127.91,\&quot;context\&quot;:{\&quot;networkId\&quot;:\&quot;0DB7f000000Cb36\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:checkoutFlow\&quot;},{\&quot;ns\&quot;:\&quot;flowruntime\&quot;,\&quot;name\&quot;:\&quot;flowRuntimeForFlexiPage.onInit\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:29131.48,\&quot;context\&quot;:null,\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeForFlexiPage\&quot;},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;flowRuntime:screenFieldInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:31496.82,\&quot;context\&quot;:{\&quot;COMPONENT_INSTANCE\&quot;:1},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;performance:buildComponentTree\&quot;,\&quot;ts\&quot;:31485.99,\&quot;context\&quot;:{\&quot;status\&quot;:\&quot;STARTED\&quot;},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;duration\&quot;:14}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:27541.04,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:8,\&quot;requestLength\&quot;:2007,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;180;a\&quot;,\&quot;181;a\&quot;],\&quot;requestId\&quot;:\&quot;27540910000d9334ee\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2403959,\&quot;xhrDuration\&quot;:1120,\&quot;xhrStall\&quot;:13,\&quot;startTime\&quot;:27545,\&quot;fetchStart\&quot;:27545,\&quot;requestStart\&quot;:27558,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:785,\&quot;transfer\&quot;:335,\&quot;transferSize\&quot;:380320,\&quot;serverTime\&quot;:590,\&quot;xhrDelay\&quot;:9},\&quot;duration\&quot;:1129},{\&quot;ts\&quot;:28729.1,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:9,\&quot;requestLength\&quot;:2906,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;198;a\&quot;,\&quot;204;a\&quot;,\&quot;205;a\&quot;,\&quot;209;a\&quot;,\&quot;214;a\&quot;],\&quot;requestId\&quot;:\&quot;2872908000097f6c95\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:5141,\&quot;xhrDuration\&quot;:390,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:28730,\&quot;fetchStart\&quot;:28730,\&quot;requestStart\&quot;:28733,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:383,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:2124,\&quot;serverTime\&quot;:216,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:393},{\&quot;ts\&quot;:29174.56,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:10,\&quot;requestLength\&quot;:1334,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;262;a\&quot;],\&quot;requestId\&quot;:\&quot;29174530000797f69c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:566729,\&quot;xhrDuration\&quot;:2300,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:29177,\&quot;fetchStart\&quot;:29177,\&quot;requestStart\&quot;:29200,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1693,\&quot;transfer\&quot;:607,\&quot;transferSize\&quot;:107111,\&quot;serverTime\&quot;:1377,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:2305},{\&quot;ts\&quot;:31742.62,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:12,\&quot;requestLength\&quot;:1352,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;270;a\&quot;],\&quot;requestId\&quot;:\&quot;31742590000381d94a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1448,\&quot;xhrDuration\&quot;:424,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:31744,\&quot;fetchStart\&quot;:31744,\&quot;requestStart\&quot;:31747,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:422,\&quot;transfer\&quot;:2,\&quot;transferSize\&quot;:1265,\&quot;serverTime\&quot;:98,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:428},{\&quot;ts\&quot;:31738.13,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:11,\&quot;requestLength\&quot;:1351,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;269;a\&quot;],\&quot;requestId\&quot;:\&quot;317381100007c9e0aa\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2814,\&quot;xhrDuration\&quot;:429,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:31740,\&quot;fetchStart\&quot;:31740,\&quot;requestStart\&quot;:31742,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:428,\&quot;transfer\&quot;:1,\&quot;transferSize\&quot;:1548,\&quot;serverTime\&quot;:187,\&quot;xhrDelay\&quot;:18},\&quot;duration\&quot;:447}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:27539.04,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;180;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://siteforce:pageLoader\&quot;},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:47,\&quot;db\&quot;:13,\&quot;xhrServerTime\&quot;:590,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:15,\&quot;duration\&quot;:1167},{\&quot;ts\&quot;:27540.19,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;181;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:publiclyCacheableComponentLoader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:152,\&quot;db\&quot;:72,\&quot;xhrServerTime\&quot;:590,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:18,\&quot;duration\&quot;:1184},{\&quot;ts\&quot;:28697.38,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;183;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:richText\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:true},\&quot;callbackTime\&quot;:0,\&quot;enqueueWait\&quot;:31,\&quot;duration\&quot;:31},{\&quot;ts\&quot;:28700.51,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;186;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:richText\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:true},\&quot;callbackTime\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;duration\&quot;:28},{\&quot;ts\&quot;:28709.02,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;198;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:5,\&quot;enqueueWait\&quot;:15,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:215,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:418},{\&quot;ts\&quot;:28712.47,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;204;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:checkoutFlow\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CheckoutFlowController/ACTION$checkEffectiveAccount\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:5,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:13,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:215,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:416},{\&quot;ts\&quot;:28712.53,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;205;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:checkoutFlow\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CheckoutFlowController/ACTION$userHasRunFlowPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:5,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:215,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:45,\&quot;duration\&quot;:461},{\&quot;ts\&quot;:28718.7,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;209;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:5,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:118,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:215,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:455},{\&quot;ts\&quot;:28723.72,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;214;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:5,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:215,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:450},{\&quot;ts\&quot;:29168.91,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;262;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$runInterview\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1323,\&quot;db\&quot;:725,\&quot;xhrServerTime\&quot;:1377,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:2314},{\&quot;ts\&quot;:31742.51,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;270;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:72,\&quot;db\&quot;:19,\&quot;xhrServerTime\&quot;:97,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:429},{\&quot;ts\&quot;:31738.03,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;269;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:160,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:187,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:448}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:80.93,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-Checkout.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:14.07},{\&quot;name\&quot;:\&quot;siteforce-generatedpage-b2f08a03-d38b-4e14-8909-ba06895c520a.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:17.04},{\&quot;name\&quot;:\&quot;flowruntime:flowRuntimeForFlexiPage\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:43.52},{\&quot;name\&quot;:\&quot;c:b2bCheckoutShippingAddress\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:2.42},{\&quot;name\&quot;:\&quot;flowruntime:body\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:2.1}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:32245.37,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.5299999999951979,\&quot;storeIngest\&quot;:0.27999999999883585,\&quot;storeBroadcast\&quot;:0.3100000000013097}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:4709,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${cartId}\&quot;,\&quot;context\&quot;:\&quot;detail-0a6\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/cart/${cartId}\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:715,\&quot;longestTask\&quot;:324,\&quot;network\&quot;:{\&quot;rtt\&quot;:200,\&quot;downlink\&quot;:3.85},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:4709,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:2,\&quot;misses\&quot;:0},\&quot;lds:getApex__b2b_Utility_getShippingOptions_false\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;lds:getApex__b2b_Utility_getCartProductItems_false\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:2,\&quot;misses\&quot;:2}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:2,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/${cartId}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:32246.09,\&quot;pageStartTime\&quot;:1614072126013,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;layout://siteforce-generatedpage-Checkout.c263\&quot;,\&quot;layout://siteforce-generatedpage-b2f08a03-d38b-4e14-8909-ba06895c520a.c263\&quot;,\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://forceCommunity:checkoutFlow\&quot;,\&quot;markup://forceCommunity:checkoutHeaderWrapper\&quot;,\&quot;markup://commerce_checkout:checkoutHeader\&quot;,\&quot;markup://flowruntime:flowRuntimeForFlexiPage\&quot;,\&quot;markup://flowruntime:flowRuntime\&quot;,\&quot;markup://flowruntime:flowRuntimeV2\&quot;,\&quot;markup://flowruntime:runtimeLib\&quot;,\&quot;markup://flowruntime:spinner\&quot;,\&quot;markup://force:inlineSpinner\&quot;,\&quot;markup://force:dotsSpinner\&quot;,\&quot;markup://c:b2bCheckoutShippingAddress\&quot;,\&quot;markup://flowruntime:visibilityWrapperV2\&quot;,\&quot;markup://flowruntime:oneColumn\&quot;,\&quot;markup://flowruntime:body\&quot;],\&quot;pageCounter\&quot;:2,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:7,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/${cartId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:32246.27,\&quot;pageStartTime\&quot;:1614072126013,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;forceCommunity:richText\&quot;:{\&quot;namespace\&quot;:\&quot;forceCommunity\&quot;,\&quot;name\&quot;:\&quot;richText\&quot;,\&quot;auraApiVersion\&quot;:\&quot;192\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Checkout.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Checkout\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:8,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/${cartId}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614072153547000,\&quot;duration\&quot;:4709000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/checkout/${cartId}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;checkout\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;f803372a9298be94\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;timestamp\&quot;:1614072153555000,\&quot;duration\&quot;:1130000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=7&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;27540910000d9334ee\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;9ec3bf6bec055afa\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;timestamp\&quot;:1614072154743000,\&quot;duration\&quot;:393000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=8&amp;aura.Component.getComponent=1&amp;ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;2872908000097f6c95\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;04e3af2649da8e91\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;timestamp\&quot;:1614072155188000,\&quot;duration\&quot;:2306000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=9&amp;ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute=1&amp;ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary=1&amp;ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.checkEffectiveAccount=1&amp;ui-communities-components-aura-components-forceCommunity-commerce.CheckoutFlow.userHasRunFlowPermissions=1&amp;ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;29174530000797f69c\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;ab597f3e46c03026\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;timestamp\&quot;:1614072157752000,\&quot;duration\&quot;:448000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=10&amp;ui-interaction-runtime-components-controllers.FlowRuntime.runInterview=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;317381100007c9e0aa\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;id\&quot;:\&quot;73dd957bffe2c181\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;9078eeea015f09f5\&quot;,\&quot;timestamp\&quot;:1614072157757000,\&quot;duration\&quot;:428000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=6&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;31742590000381d94a\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614072157760,\&quot;value\&quot;:2},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158261,\&quot;value\&quot;:[2,6]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158261,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158261,\&quot;value\&quot;:[1,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158203,\&quot;value\&quot;:[0,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158203,\&quot;value\&quot;:[0,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158204,\&quot;value\&quot;:[0,0,0,1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158253,\&quot;value\&quot;:[4725]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158257,\&quot;value\&quot;:[2982845]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158257,\&quot;value\&quot;:[10869]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072153546,\&quot;value\&quot;:[5468]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072153546,\&quot;value\&quot;:[64660]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072153546,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158260,\&quot;value\&quot;:[4709]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072155139,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_Utility_getShippingOptions_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614072157751,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-count.getApex__b2b_Utility_getShippingOptions_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614072157756,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-duration.getApex__b2b_Utility_getShippingOptions_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158204,\&quot;value\&quot;:[453]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_Utility_getCartProductItems_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614072157756,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-count.getApex__b2b_Utility_getCartProductItems_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614072157760,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-duration.getApex__b2b_Utility_getCartProductItems_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614072158189,\&quot;value\&quot;:[433]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">32247790000b7c2dce</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Order" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">127</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2881;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;checkoutShippingAddress.cartId&quot;,&quot;value&quot;:&quot;${cartId}&quot;,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutShippingAddress.contactPointAddressId&quot;,&quot;value&quot;:&quot;${addressId}&quot;,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutShippingAddress.deliveryDate&quot;,&quot;value&quot;:null,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutShippingAddress.deliveryMethodId&quot;,&quot;value&quot;:&quot;2Dm7f0000004C93CAE&quot;,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutShippingAddress.holdForRelease&quot;,&quot;value&quot;:false,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutShippingAddress.warehouseId&quot;,&quot;value&quot;:&quot;&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5813728080000c92ce</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Checkout Session ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">checkoutSessionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.fields[0].inputs[0].value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Checkouk Session ID " enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Checkout Session ID:&quot; + vars.get(&quot;checkoutSessionId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">20000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">128</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2884;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58146790300000b77f</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - FlowRuntime.executeAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">129</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2888;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5815077460000089d4</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">130</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2891;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5815577170000577d0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - FlowRuntime.executeAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">131</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2895;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5815942310000d1c77</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">132</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2898;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58164760600003d7ca</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">133</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2902;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">581718771000016d5a</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - FlowRuntime.executeAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">134</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2903;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58175728000000b8d3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">135</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2906;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5818377870000bfaef</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">136</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2910;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58191753000009b239</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - FlowRuntime.executeAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">137</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2911;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58195742000000495a</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review Order - ApexAction.execute" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">138</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;I1X-5Qz3GoDrm3UZy1BUUA&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;_ZenNoSAym0caC_9ar8MvQ&quot;,&quot;MODULE@markup://lst:quickFilterPanel&quot;:&quot;1uLNzI6NTWQIn-siPlzg3g&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:&quot;VIEW_ONE&quot;,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2916;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;b2b_Utility&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;},&quot;cacheable&quot;:true,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">58201220500006155e</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;279;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;checkoutOrderReview.cartDeliveryGroup&quot;,&quot;value&quot;:{&quot;Id&quot;:&quot;${checkoutSessionId}&quot;,&quot;DeliverToCity&quot;:&quot;Shelby Township&quot;,&quot;DeliverToCountry&quot;:&quot;US&quot;,&quot;DeliverToName&quot;:&quot;Core and Main Shelby&quot;,&quot;DeliverToPostalCode&quot;:&quot;48315&quot;,&quot;DeliverToState&quot;:&quot;MI&quot;,&quot;DeliverToStreet&quot;:&quot;6575 Twenty Three Mile Road&quot;,&quot;Warehouse__c&quot;:null,&quot;ContactPointAddress__c&quot;:&quot;${addressId}&quot;,&quot;DesiredDeliveryDate&quot;:null,&quot;ShippingInstructions&quot;:null,&quot;b2b_HoldForRelease__c&quot;:false,&quot;DeliveryMethodId&quot;:&quot;2Dm7f0000004C93CAE&quot;},&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutOrderReview.cartId&quot;,&quot;value&quot;:&quot;${cartId}&quot;,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutOrderReview.cpaRecord&quot;,&quot;value&quot;:{&quot;Id&quot;:&quot;${addressId}&quot;,&quot;b2b_CompanyName__c&quot;:null,&quot;Contact_Phone_Number__c&quot;:null},&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutOrderReview.orderDeliveryMethod&quot;,&quot;value&quot;:{&quot;Id&quot;:&quot;2Dm7f0000004C93CAE&quot;,&quot;Carrier&quot;:&quot;Standard Delivery&quot;},&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Order" enabled="true"/>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">999999</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format">000000</stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;287;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;checkoutPaymentInformation.paymentType&quot;,&quot;value&quot;:&quot;PurchaseOrderNumber&quot;,&quot;isVisible&quot;:true},{&quot;field&quot;:&quot;checkoutPaymentInformation.enteredPoNumberValue&quot;,&quot;value&quot;:&quot;${counter}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">53d18929-961c-4c63-b9df-e73d0dbd7779</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">820508600000825005</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert placing order " enabled="true">
              <stringProp name="JMES_PATH">actions[0].state</stringProp>
              <stringProp name="EXPECTED_VALUE">SUCCESS</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;290;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">53d18929-961c-4c63-b9df-e73d0dbd7779</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">822748950000caa3ee</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">17</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;294;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">53d18929-961c-4c63-b9df-e73d0dbd7779</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8236227200004d913e</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getSessionStuff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">18</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wait.getSessionStuff</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;295;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">53d18929-961c-4c63-b9df-e73d0dbd7779</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">82441688000008d510</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - FlowRuntime.executeAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">19</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-interaction-runtime-components-controllers.FlowRuntime.executeAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-interaction-runtime-components-controllers.FlowRuntime.executeAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/checkout/${cartId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;296;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">53d18929-961c-4c63-b9df-e73d0dbd7779</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8247977800009f4b3e</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Serialized Encoded State" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.serializedEncodedState</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Order Confirmation ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderConfirmationId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.fields[0].inputs[1].value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Order Confirmation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Order Confirmation ID:&quot; + vars.get(&quot;orderConfirmationId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getPageComponent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/orderconfirmation/${orderConfirmationId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;307;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;routeType&quot;:&quot;orderconfirmation&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;d5735920-071b-47aa-a18d-8bf7399d2051&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;recordId&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:263,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">83a0e9d9-5390-4650-96b4-273c75a7cbcb</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8269665900006b7312</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">47e7758e60690f17</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - RetrieveCartSummary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">21</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/orderconfirmation/${orderConfirmationId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;323;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">83a0e9d9-5390-4650-96b4-273c75a7cbcb</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">8270650100005cbc6a</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">3037dc1c75660e78</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getRecordAndTranslationData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/orderconfirmation/${orderConfirmationId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;328;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;331;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;div&gt;\n&lt;h1 class=\&quot;order-confirmation-title\&quot;&gt;Thank you for shopping with us!&lt;/h1&gt;\n&lt;p&gt;Thank you for placing your order. Delivery/pickup dates will be confirmed during order processing. Your order may be subject to account approval.&lt;/p&gt;\n&lt;h4&gt;Confirmation information&lt;/h4&gt;\n&lt;/div&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;337;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;d5735920-071b-47aa-a18d-8bf7399d2051&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExsF&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;picasso_id&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;routeId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">83a0e9d9-5390-4650-96b4-273c75a7cbcb</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">827306810000ad4ae7</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">737e82d416e0323e</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - getRecordWithFields" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.RecordUi.getRecordWithFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.RecordUi.getRecordWithFields</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/orderconfirmation/${orderConfirmationId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;356;a&quot;,&quot;descriptor&quot;:&quot;aura://RecordUiController/ACTION$getRecordWithFields&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;fields&quot;:[&quot;OrderSummary.OrderNumber&quot;]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">83a0e9d9-5390-4650-96b4-273c75a7cbcb</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">827333760000de3350</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">26f141247ba6a047</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">12f77a01cbd9e676</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Order - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;fV3Zo7mI3PLrr1VMsCPF3w&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;eswConfigDeveloperName&quot;:null,&quot;isVoiceOver&quot;:null,&quot;setupAppContextId&quot;:null,&quot;density&quot;:null,&quot;srcdoc&quot;:null,&quot;appContextId&quot;:null,&quot;dynamicTypeSize&quot;:null},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/orderconfirmation/${orderConfirmationId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;290;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}  {&quot;actions&quot;:[{&quot;id&quot;:&quot;294;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}  {&quot;actions&quot;:[{&quot;id&quot;:&quot;295;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WaitController/ACTION$getSessionStuff&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sessionId&quot;:&quot;${checkoutSessionId}&quot;}}]}   {&quot;actions&quot;:[{&quot;id&quot;:&quot;296;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.interaction.runtime.components.controllers.FlowRuntimeController/ACTION$executeAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;action&quot;:&quot;NEXT&quot;,&quot;interview&quot;:&quot;${serializedEncodedState}&quot;,&quot;fields&quot;:[{&quot;field&quot;:&quot;commerceScreenWait_0.cartCheckoutSessionId&quot;,&quot;value&quot;:&quot;${checkoutSessionId}&quot;,&quot;isVisible&quot;:true}],&quot;uiElementVisited&quot;:true,&quot;enableTrace&quot;:false,&quot;lcErrors&quot;:{}}}]}   {&quot;actions&quot;:[{&quot;id&quot;:&quot;307;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;routeType&quot;:&quot;orderconfirmation&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;d5735920-071b-47aa-a18d-8bf7399d2051&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;recordId&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:263,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}   {&quot;actions&quot;:[{&quot;id&quot;:&quot;323;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}  {&quot;actions&quot;:[{&quot;id&quot;:&quot;328;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;331;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;div&gt;\n&lt;h1 class=\&quot;order-confirmation-title\&quot;&gt;Thank you for shopping with us!&lt;/h1&gt;\n&lt;p&gt;Thank you for placing your order. Delivery/pickup dates will be confirmed during order processing. Your order may be subject to account approval.&lt;/p&gt;\n&lt;h4&gt;Confirmation information&lt;/h4&gt;\n&lt;/div&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;337;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;d5735920-071b-47aa-a18d-8bf7399d2051&quot;,&quot;view_uddid&quot;:&quot;0I37f000000ExsF&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;picasso_id&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;,&quot;routeId&quot;:&quot;32688ddb-03f3-443d-8a10-0871dcd9a872&quot;}}}]}  {&quot;actions&quot;:[{&quot;id&quot;:&quot;356;a&quot;,&quot;descriptor&quot;:&quot;aura://RecordUiController/ACTION$getRecordWithFields&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${orderConfirmationId}&quot;,&quot;fields&quot;:[&quot;OrderSummary.OrderNumber&quot;]}}]}  {&quot;actions&quot;:[{&quot;id&quot;:&quot;358;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:76312.63,\&quot;duration\&quot;:4563,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{\&quot;transport\&quot;:[{\&quot;ts\&quot;:76314.14,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:7249,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;279;a\&quot;],\&quot;requestId\&quot;:\&quot;76314000000a4925c9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:580815,\&quot;xhrDuration\&quot;:4550,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:76317,\&quot;fetchStart\&quot;:76317,\&quot;requestStart\&quot;:76320,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:4223,\&quot;transfer\&quot;:327,\&quot;transferSize\&quot;:111979,\&quot;xhrDelay\&quot;:6},\&quot;duration\&quot;:4556}]},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;flowRuntimeHelper.handleActionSelected.NEXT\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;consumerIdentifier\&quot;:\&quot;flowRuntime\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:80878.97,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;screenName\&quot;:\&quot;paymentMethodScreen\&quot;,\&quot;sectionsCount\&quot;:0,\&quot;columnsCount\&quot;:0,\&quot;screenFieldCounts\&quot;:{\&quot;c:checkoutPaymentInformation\&quot;:1},\&quot;totalFieldsCount\&quot;:1,\&quot;customerAuraLcCount\&quot;:0,\&quot;customerLwcLcCount\&quot;:1,\&quot;outOfTheBoxLcCount\&quot;:0,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;sequence\&quot;:10,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:822738.56,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://forceCommunity:commerceScreenWait\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:820508.33,\&quot;duration\&quot;:2230,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{\&quot;transport\&quot;:[{\&quot;ts\&quot;:820508.64,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:8262,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;287;a\&quot;],\&quot;requestId\&quot;:\&quot;820508600000825005\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:22444,\&quot;xhrDuration\&quot;:2222,\&quot;xhrStall\&quot;:1071,\&quot;startTime\&quot;:820512,\&quot;fetchStart\&quot;:820512,\&quot;requestStart\&quot;:821584,\&quot;dns\&quot;:575,\&quot;tcp\&quot;:492,\&quot;ttfb\&quot;:2221,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:10838,\&quot;serverTime\&quot;:938,\&quot;xhrDelay\&quot;:7},\&quot;duration\&quot;:2229}]},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;flowRuntimeHelper.handleActionSelected.NEXT\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;consumerIdentifier\&quot;:\&quot;flowRuntime\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:822739.66,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;screenName\&quot;:\&quot;Wait_Screen\&quot;,\&quot;sectionsCount\&quot;:0,\&quot;columnsCount\&quot;:0,\&quot;screenFieldCounts\&quot;:{\&quot;forceCommunity:commerceScreenWait\&quot;:1},\&quot;totalFieldsCount\&quot;:1,\&quot;customerAuraLcCount\&quot;:1,\&quot;customerLwcLcCount\&quot;:0,\&quot;outOfTheBoxLcCount\&quot;:0,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;sequence\&quot;:11,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:826936.31,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://forceCommunity:flowRedirect\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:824797.49,\&quot;duration\&quot;:2139,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[],\&quot;transport\&quot;:[{\&quot;ts\&quot;:824797.81,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:19,\&quot;requestLength\&quot;:9523,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;296;a\&quot;],\&quot;requestId\&quot;:\&quot;8247977800009f4b3e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:15118,\&quot;xhrDuration\&quot;:2132,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:824800,\&quot;fetchStart\&quot;:824800,\&quot;requestStart\&quot;:824803,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2131,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:9754,\&quot;serverTime\&quot;:1922,\&quot;xhrDelay\&quot;:6},\&quot;duration\&quot;:2138}]},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;flowRuntimeHelper.handleActionSelected.NEXT\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;consumerIdentifier\&quot;:\&quot;flowRuntime\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:826937.55,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;flowDevName\&quot;:\&quot;Checkout_Flow\&quot;,\&quot;screenName\&quot;:\&quot;Order_Confirmation_Page\&quot;,\&quot;sectionsCount\&quot;:0,\&quot;columnsCount\&quot;:0,\&quot;screenFieldCounts\&quot;:{\&quot;forceCommunity:flowRedirect\&quot;:1},\&quot;totalFieldsCount\&quot;:1,\&quot;customerAuraLcCount\&quot;:1,\&quot;customerLwcLcCount\&quot;:0,\&quot;outOfTheBoxLcCount\&quot;:0,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;sequence\&quot;:12,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:826943.49,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;,\&quot;requestURI\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;,\&quot;entityId\&quot;:\&quot;${orderConfirmationId}\&quot;}},\&quot;sequence\&quot;:13,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${orderConfirmationId}\&quot;,\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:826947.64,\&quot;duration\&quot;:817440,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:2,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:17035,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:826947.96,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://c:checkoutPaymentInformation\&quot;,\&quot;markup://forceCommunity:commerceScreenWait\&quot;,\&quot;markup://commerce_checkout:screenWait\&quot;,\&quot;markup://forceCommunity:flowRedirect\&quot;],\&quot;pageCounter\&quot;:2,\&quot;phase\&quot;:\&quot;navFromPage\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:14,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;${orderConfirmationId}\&quot;,\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:826991.79,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:15,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;orderconfirmation\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:827073.86,\&quot;duration\&quot;:1,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;0a67f0000008OSUAA2\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:827289.73,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://ui:outputRichText\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://forceCommunity:seoAssistant\&quot;,\&quot;layout://siteforce-generatedpage-d5735920-071b-47aa-a18d-8bf7399d2051.c263\&quot;,\&quot;markup://forceCommunity:richText\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://forceCommunity:htmlBlock\&quot;,\&quot;markup://forceCommunity:commerceOrderConfirmation\&quot;,\&quot;markup://siteforce:hiddenRegion\&quot;,\&quot;markup://forceCommunity:outputRichText\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://force:recordUpdated\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:827338.26,\&quot;duration\&quot;:8,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[]},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;${orderConfirmationId}\&quot;,\&quot;objectApiName\&quot;:\&quot;OrderSummary\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;,\&quot;pageName\&quot;:\&quot;home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:827845.84,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;${orderConfirmationId}\&quot;,\&quot;recordType\&quot;:\&quot;OrderSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;,\&quot;context\&quot;:null},\&quot;sequence\&quot;:16,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;orderconfirmation\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:827861.33,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;storage-stats\&quot;,\&quot;attributes\&quot;:{\&quot;name\&quot;:\&quot;actions\&quot;,\&quot;adapter\&quot;:\&quot;memory\&quot;,\&quot;sizeKB\&quot;:-1,\&quot;maxSizeKB\&quot;:153600,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:827898.16,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;0a67f0000008OTNAA2\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:826949.46,\&quot;duration\&quot;:991,\&quot;pageStartTime\&quot;:1614082444042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:827006.79,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:827329.22,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;flowRuntime:screenFieldInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:826954.9,\&quot;context\&quot;:{\&quot;COMPONENT_INSTANCE\&quot;:1},\&quot;owner\&quot;:\&quot;flowruntime:flowRuntimeV2\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:826966.68,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:20,\&quot;requestLength\&quot;:1874,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;307;a\&quot;],\&quot;requestId\&quot;:\&quot;8269665900006b7312\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:127860,\&quot;xhrDuration\&quot;:317,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:826968,\&quot;fetchStart\&quot;:826968,\&quot;requestStart\&quot;:826971,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:313,\&quot;transfer\&quot;:4,\&quot;transferSize\&quot;:20560,\&quot;serverTime\&quot;:131,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:321},{\&quot;ts\&quot;:827333.78,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:1242,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;356;a\&quot;],\&quot;requestId\&quot;:\&quot;827333760000de3350\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1419,\&quot;xhrDuration\&quot;:508,\&quot;xhrStall\&quot;:47,\&quot;startTime\&quot;:827335,\&quot;fetchStart\&quot;:827335,\&quot;requestStart\&quot;:827383,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:45,\&quot;ttfb\&quot;:503,\&quot;transfer\&quot;:4,\&quot;transferSize\&quot;:1353,\&quot;serverTime\&quot;:291,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:511},{\&quot;ts\&quot;:827306.83,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:2826,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;328;a\&quot;,\&quot;331;a\&quot;,\&quot;337;a\&quot;],\&quot;requestId\&quot;:\&quot;827306810000ad4ae7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:4394,\&quot;xhrDuration\&quot;:535,\&quot;xhrStall\&quot;:47,\&quot;startTime\&quot;:827308,\&quot;fetchStart\&quot;:827308,\&quot;requestStart\&quot;:827356,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:45,\&quot;ttfb\&quot;:528,\&quot;transfer\&quot;:7,\&quot;transferSize\&quot;:2077,\&quot;serverTime\&quot;:316,\&quot;xhrDelay\&quot;:11},\&quot;duration\&quot;:546},{\&quot;ts\&quot;:827065.05,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:1256,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;323;a\&quot;],\&quot;requestId\&quot;:\&quot;8270650100005cbc6a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1540,\&quot;xhrDuration\&quot;:827,\&quot;xhrStall\&quot;:220,\&quot;startTime\&quot;:827067,\&quot;fetchStart\&quot;:827067,\&quot;requestStart\&quot;:827287,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:821,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1382,\&quot;serverTime\&quot;:437,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:830}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:826953.41,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;307;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:publiclyCacheableComponentLoader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:84,\&quot;db\&quot;:30,\&quot;xhrServerTime\&quot;:130,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:14,\&quot;duration\&quot;:350},{\&quot;ts\&quot;:827333.67,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;356;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://RecordUiController/ACTION$getRecordWithFields\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:267,\&quot;db\&quot;:19,\&quot;xhrServerTime\&quot;:291,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:511},{\&quot;ts\&quot;:827294.14,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;328;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:10,\&quot;serverTime\&quot;:{\&quot;total\&quot;:276,\&quot;db\&quot;:179,\&quot;xhrServerTime\&quot;:315,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:562},{\&quot;ts\&quot;:827296.84,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;331;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:richText\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:9,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:315,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:560},{\&quot;ts\&quot;:827303.03,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;337;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:10,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:315,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:554},{\&quot;ts\&quot;:826999.69,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;323;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:64,\&quot;serverTime\&quot;:{\&quot;total\&quot;:410,\&quot;db\&quot;:87,\&quot;xhrServerTime\&quot;:434,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:896}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:22.83,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;flowruntime:visibilityWrapperV2\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1.21},{\&quot;name\&quot;:\&quot;siteforce-generatedpage-d5735920-071b-47aa-a18d-8bf7399d2051.c263\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:11.42},{\&quot;name\&quot;:\&quot;flowruntime:body\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1.42},{\&quot;name\&quot;:\&quot;flowruntime:actionButton\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:6.51},{\&quot;name\&quot;:\&quot;flowruntime:actionBar\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1.92}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:827942.41,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.5100000000093132,\&quot;storeIngest\&quot;:1.090000000083819,\&quot;storeBroadcast\&quot;:2.5899999999674037}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:990,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;${orderConfirmationId}\&quot;,\&quot;context\&quot;:\&quot;checkout\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/checkout/0a67f0000008OSUAA2\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:201,\&quot;longestTask\&quot;:141,\&quot;network\&quot;:{\&quot;rtt\&quot;:200,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:990,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;lds:getRecord\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:2}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:3,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;orderconfirmation\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:827942.99,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://flowruntime:actionBase\&quot;,\&quot;markup://flowruntime:actionButton\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://flowruntime:actionBar\&quot;,\&quot;layout://siteforce-generatedpage-d5735920-071b-47aa-a18d-8bf7399d2051.c263\&quot;,\&quot;markup://forceCommunity:commerceOrderConfirmation\&quot;,\&quot;markup://commerce_checkout:orderConfirmation\&quot;],\&quot;pageCounter\&quot;:3,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:17,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;orderconfirmation\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:827943.16,\&quot;pageStartTime\&quot;:1614082444042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Checkout.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Checkout\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;forceCommunity:richText\&quot;:{\&quot;namespace\&quot;:\&quot;forceCommunity\&quot;,\&quot;name\&quot;:\&quot;richText\&quot;,\&quot;auraApiVersion\&quot;:\&quot;192\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c263\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c263\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:18,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;orderconfirmation\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;id\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614083270996000,\&quot;duration\&quot;:990000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/orderconfirmation/${orderConfirmationId}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;orderconfirmation\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;id\&quot;:\&quot;47e7758e60690f17\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;timestamp\&quot;:1614083271013000,\&quot;duration\&quot;:322000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=19&amp;ui-interaction-runtime-components-controllers.FlowRuntime.executeAction=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;8269665900006b7312\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;id\&quot;:\&quot;3037dc1c75660e78\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;timestamp\&quot;:1614083271112000,\&quot;duration\&quot;:830000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=12&amp;aura.ApexAction.execute=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;8270650100005cbc6a\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;id\&quot;:\&quot;737e82d416e0323e\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;timestamp\&quot;:1614083271354000,\&quot;duration\&quot;:547000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=20&amp;ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;827306810000ad4ae7\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;id\&quot;:\&quot;26f141247ba6a047\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;12f77a01cbd9e676\&quot;,\&quot;timestamp\&quot;:1614083271381000,\&quot;duration\&quot;:511000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=2&amp;aura.Component.getComponentDef=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;827333760000de3350\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614082524973,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614083271383,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;get-record-normal-invoke-count\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614083271380,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271990,\&quot;value\&quot;:[6,6,18]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271990,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271990,\&quot;value\&quot;:[2,0,1]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271902,\&quot;value\&quot;:[3,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271902,\&quot;value\&quot;:[1,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271895,\&quot;value\&quot;:[0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083264461,\&quot;value\&quot;:[70,71]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271987,\&quot;value\&quot;:[137465]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271987,\&quot;value\&quot;:[8660]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083270995,\&quot;value\&quot;:[627212]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083270995,\&quot;value\&quot;:[74037]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083270995,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271990,\&quot;value\&quot;:[990]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getRecord\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614083271378,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-count.getRecord\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614083271383,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-miss-duration.getRecord\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271897,\&quot;value\&quot;:[519]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271902,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-emit-record-changed-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614083271897,\&quot;value\&quot;:[2]},{\&quot;owner\&quot;:\&quot;LIGHTNING.lds.service\&quot;,\&quot;name\&quot;:\&quot;request.getApex__b2b_Utility_getCartSummary_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614082524971,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-count.getApex__b2b_Utility_getCartSummary_false\&quot;,\&quot;type\&quot;:\&quot;Counter\&quot;,\&quot;ts\&quot;:1614082524973,\&quot;value\&quot;:1},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;cache-hit-duration.getApex__b2b_Utility_getCartSummary_false\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614082524973,\&quot;value\&quot;:[2]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">83a0e9d9-5390-4650-96b4-273c75a7cbcb</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">827944590000f4c2f4</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login &gt; Account Details &gt; Addresses &gt; My Project &gt; Log out" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
            <stringProp name="73596745">Login</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="My Profile" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;307;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;19e9a84a-d13c-4337-8e9d-da8af7697337&quot;,&quot;routeType&quot;:&quot;detail-005&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;80186079-05ee-47d2-b5cb-b6029f559dc5&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;recordId&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:${publishedChangelistNum},&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">103316480000bba4d4</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">4096247ab64641d0</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert the page is open" enabled="false">
              <stringProp name="JMES_PATH">actions[0].state</stringProp>
              <stringProp name="EXPECTED_VALUE">SUCCESS</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile - RetrieveCartSummary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;314;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">103418500000818683</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">13ca46087fa07aac</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Owner ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ownerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].returnValue.ownerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Owner ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Owner ID: &quot; + vars.get(&quot;ownerId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile - getUserXdsEnabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserProfileSettings" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserProfileSettings</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-reputation.ReputationWidget.getReputationWidgetAttributes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-reputation.ReputationWidget.getReputationWidgetAttributes</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-userProfileHeader.UserProfileHeader.getUserProfileHeaderAttributes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-userProfileHeader.UserProfileHeader.getUserProfileHeaderAttributes</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserXdsEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserXdsEnabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-userProfileDetail.UserProfileDetail.getUserProfileDetailAttributes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-userProfileDetail.UserProfileDetail.getUserProfileDetailAttributes</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-userProfileBase.UserProfileBase.getUserProfileBaseAttributes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-userProfileBase.UserProfileBase.getUserProfileBaseAttributes</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;319;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;home&quot;,&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;322;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;347;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userSettings.UserSettingsController/ACTION$getUserProfileSettings&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userSettingsInternal&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;,&quot;config&quot;:{&quot;AccountSettings&quot;:{&quot;display&quot;:true},&quot;LocationSettings&quot;:{&quot;display&quot;:true},&quot;ProfileVisibilitySettings&quot;:{&quot;display&quot;:false},&quot;EmailNotificationSettings&quot;:{&quot;display&quot;:false}}},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;350;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userSettings.UserSettingsController/ACTION$getUserXdsEnabled&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userSettingsCustomizable&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;354;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userProfileBase&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;366;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.reputation.ReputationWidgetController/ACTION$getReputationWidgetAttributes&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;}},{&quot;id&quot;:&quot;368;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;}},{&quot;id&quot;:&quot;370;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileHeader.UserProfileHeaderController/ACTION$getUserProfileHeaderAttributes&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userProfileHeader&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;,&quot;displayBadge&quot;:true},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;374;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userProfileBase&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;376;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileDetail.UserProfileDetailController/ACTION$getUserProfileDetailAttributes&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:userProfileDetail&quot;,&quot;params&quot;:{&quot;id&quot;:&quot;${ownerId}&quot;,&quot;displayBadge&quot;:true},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;383;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;19e9a84a-d13c-4337-8e9d-da8af7697337&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;80186079-05ee-47d2-b5cb-b6029f559dc5&quot;,&quot;view_uddid&quot;:&quot;0I37f000000Exqt&quot;,&quot;entity_name&quot;:&quot;User&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;recordId&quot;:&quot;home&quot;,&quot;picasso_id&quot;:&quot;19e9a84a-d13c-4337-8e9d-da8af7697337&quot;,&quot;routeId&quot;:&quot;19e9a84a-d13c-4337-8e9d-da8af7697337&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">104560190000b057dd</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">b543a875b3516d77</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile - handleAction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-global-components-one-actionsManager.ActionsManager.handleAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-global-components-one-actionsManager.ActionsManager.handleAction</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;437;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;recordId&quot;:&quot;${ownerId}&quot;,&quot;context&quot;:&quot;CHATTER&quot;,&quot;entityApiName&quot;:&quot;RECORD&quot;,&quot;record&quot;:null,&quot;section&quot;:&quot;SINGLE_ACTION_LINKS&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionNames&quot;:[],&quot;enableActionsConfiguration&quot;:false,&quot;isLABPreview&quot;:false,&quot;actionsRequestId&quot;:0},{&quot;recordId&quot;:&quot;${ownerId}&quot;,&quot;context&quot;:&quot;RECORD&quot;,&quot;record&quot;:null,&quot;section&quot;:&quot;PAGE&quot;,&quot;size&quot;:1,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionNames&quot;:[],&quot;enableActionsConfiguration&quot;:false,&quot;isLABPreview&quot;:false,&quot;actionsRequestId&quot;:1}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">106356130000baea8f</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">ab586a2ebcdb5136</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile - getViewRecordLayout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">17</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordViewEdit.RecordViewEdit.getViewRecordLayout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordViewEdit.RecordViewEdit.getViewRecordLayout</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;441;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordViewEdit.RecordViewEditController/ACTION$getViewRecordLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${ownerId}&quot;,&quot;layoutType&quot;:&quot;FULL&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">106394480000e569d8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">5094c879ba128ddb</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">e342de5915d40b58</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Profile - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">18</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/profile/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;484;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:103307.09,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/\&quot;,\&quot;requestURI\&quot;:\&quot;/s/profile/home\&quot;,\&quot;entityId\&quot;:\&quot;home\&quot;}},\&quot;sequence\&quot;:9,\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;home\&quot;,\&quot;entityType\&quot;:\&quot;User\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:103313.14,\&quot;duration\&quot;:91396,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:2,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:103364.86,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:10,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:103428.28,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;0a67f0000008OVOAA2\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:104504.63,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://ui:inputRange\&quot;,\&quot;markup://forceCommunity:userSettingsInternal\&quot;,\&quot;markup://force:recordEdit\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://ui:outputRichText\&quot;,\&quot;markup://force:photoCrop\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://force:dependencyManagerAPI\&quot;,\&quot;markup://ui:inputPercent\&quot;,\&quot;markup://ui:autocompletePanel\&quot;,\&quot;markup://ui:autocompleteList\&quot;,\&quot;markup://forceChatter:topicAutocompleteInput\&quot;,\&quot;markup://ui:inputDateTime\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:label\&quot;,\&quot;layout://siteforce-generatedpage-80186079-05ee-47d2-b5cb-b6029f559dc5.c264\&quot;,\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://dataImporter:diInputFile\&quot;,\&quot;markup://ui:inputSearch\&quot;,\&quot;markup://forceDiscovery:userProfileKnowledgeableAboutDataProvider\&quot;,\&quot;markup://ui:inputFile\&quot;,\&quot;markup://forceCommunity:seoAssistant\&quot;,\&quot;markup://ui:inputSecret\&quot;,\&quot;markup://ui:inputFileOpenBrowse\&quot;,\&quot;markup://force:pageError\&quot;,\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://force:recordView\&quot;,\&quot;markup://ui:outputPercent\&quot;,\&quot;markup://ui:inputRichText\&quot;,\&quot;markup://forceChatter:selectTopicSuggestionOption\&quot;,\&quot;markup://ui:inputDateTimeHtml\&quot;,\&quot;markup://ui:inputEmail\&quot;,\&quot;markup://forceChatter:selectTopicSuggestionDataProvider\&quot;,\&quot;markup://ui:inputCurrency\&quot;,\&quot;markup://forceCommunity:userProfileDetail\&quot;,\&quot;markup://forceChatter:topicSuggestionAutoComplete\&quot;,\&quot;markup://forceCommunity:richText\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;markup://ui:outputCheckbox\&quot;,\&quot;markup://ui:inputDateTrigger\&quot;,\&quot;markup://ui:inputRadio\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://ui:output\&quot;,\&quot;markup://ui:inputTextAreaForAutocomplete\&quot;,\&quot;markup://ui:inputNumber\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://forceCommunity:placeholder\&quot;,\&quot;markup://forceCommunity:htmlBlock\&quot;,\&quot;markup://ui:inputSelectOptionGroup\&quot;,\&quot;markup://ui:outputPhone\&quot;,\&quot;markup://forceCommunity:userSettingsCustomizable\&quot;,\&quot;markup://forceCommunity:userProfileBase\&quot;,\&quot;markup://forceChatter:newMessageButton\&quot;,\&quot;markup://forceCommunity:reputationWidget\&quot;,\&quot;markup://siteforce:hiddenRegion\&quot;,\&quot;markup://ui:autocompleteOption\&quot;,\&quot;markup://ui:outputSelect\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://forceChatter:entityPhoto\&quot;,\&quot;markup://forceCommunity:userProfileBody\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://ui:outputNumber\&quot;,\&quot;markup://ui:outputLabel\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://forceDiscovery:userProfileKnowledgeableAboutModal\&quot;,\&quot;markup://forceDiscovery:userProfileKnowledgeableAbout\&quot;,\&quot;markup://ui:outputURL\&quot;,\&quot;markup://ui:outputEmail\&quot;,\&quot;markup://forceCommunity:stamp\&quot;,\&quot;markup://forceCommunity:actionButtonMobile\&quot;,\&quot;markup://ui:inputCheckbox\&quot;,\&quot;markup://force:photoCropDraggable\&quot;,\&quot;markup://ui:outputCurrency\&quot;,\&quot;markup://forceCommunity:userProfileStats\&quot;,\&quot;markup://forceCommunity:userProfileHeader\&quot;,\&quot;markup://ui:message\&quot;,\&quot;markup://ui:inputSmartNumber\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://forceTopic:topicLink\&quot;,\&quot;markup://forceCommunity:actionsContainerMobile\&quot;,\&quot;markup://ui:outputDate\&quot;,\&quot;markup://dataImporter:diInvisibleFileUploader\&quot;,\&quot;markup://forceCommunity:outputRichText\&quot;,\&quot;markup://ui:inputDateRange\&quot;,\&quot;markup://ui:inputDateHtml\&quot;,\&quot;markup://ui:outputTextArea\&quot;,\&quot;markup://ui:inputURL\&quot;,\&quot;markup://ui:outputMultiSelect\&quot;,\&quot;markup://ui:inputDate\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://forceChatter:updatePhoto\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://ui:inputFileFilesList\&quot;,\&quot;markup://ui:outputDateTime\&quot;,\&quot;markup://ui:inputFileDroppableZone\&quot;,\&quot;markup://ui:inputPhone\&quot;,\&quot;markup://forceCommunity:userProfileEdit\&quot;,\&quot;markup://forceDiscovery:userProfileKnowledgeableAboutTopic\&quot;,\&quot;markup://forceCommunity:userProfileKnowledgeableAbout\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://force:getDependencyTreeInfo\&quot;,\&quot;markup://ui:noMoreContent\&quot;,\&quot;markup://force:recordFieldError\&quot;,\&quot;markup://force:inputLookupAdditionalFieldsUpdate\&quot;,\&quot;markup://forceChatter:touchStart\&quot;,\&quot;markup://ui:hideDatePicker\&quot;,\&quot;markup://ui:load\&quot;,\&quot;markup://force:toggleFieldsHighlight\&quot;,\&quot;markup://force:save\&quot;,\&quot;markup://force:validationErrors\&quot;,\&quot;markup://ui:selectListOption\&quot;,\&quot;markup://ui:updateAriaAttributes\&quot;,\&quot;markup://ui:dataProvide\&quot;,\&quot;markup://ui:matchText\&quot;,\&quot;markup://ui:showDatePicker\&quot;,\&quot;markup://forceChatter:touchEnd\&quot;,\&quot;markup://ui:scrollBy\&quot;,\&quot;markup://ui:showMore\&quot;,\&quot;markup://ui:inputChange\&quot;,\&quot;markup://force:recordDataChange\&quot;,\&quot;markup://forceDiscovery:userProfileKnowledgeableDataAppend\&quot;,\&quot;markup://force:recordSaveSuccess\&quot;,\&quot;markup://ui:fetchData\&quot;,\&quot;markup://ui:autocompleteListCollapse\&quot;,\&quot;markup://force:recordError\&quot;,\&quot;markup://ui:autocompleteListExpand\&quot;,\&quot;markup://force:cleanupRecordFieldError\&quot;,\&quot;markup://ui:matchDone\&quot;,\&quot;markup://force:recordSave\&quot;,\&quot;markup://force:recordSaveError\&quot;,\&quot;markup://force:recordUpdated\&quot;,\&quot;markup://ui:listHighlight\&quot;,\&quot;markup://ui:openPicker\&quot;,\&quot;markup://ui:addRemove\&quot;,\&quot;markup://force:recordPageError\&quot;,\&quot;markup://ui:inputFileChangeEvent\&quot;,\&quot;markup://forceChatter:pillItemInserted\&quot;,\&quot;markup://force:loadComplete\&quot;,\&quot;markup://ui:dataChanged\&quot;,\&quot;markup://dataImporter:diFileUploadProgress\&quot;,\&quot;markup://dataImporter:diFileSelected\&quot;,\&quot;markup://selfService:updateData\&quot;,\&quot;markup://ui:searchEvent\&quot;,\&quot;markup://force:loadExtPoint\&quot;,\&quot;markup://force:registerPicklist\&quot;,\&quot;markup://dataImporter:diFileRejected\&quot;,\&quot;markup://force:refreshActions\&quot;,\&quot;markup://dataImporter:diFileUploadCompleted\&quot;,\&quot;markup://ui:registerDatePickerManager\&quot;,\&quot;markup://ui:abortFetchData\&quot;,\&quot;markup://force:imageChange\&quot;,\&quot;markup://ui:scrollTo\&quot;,\&quot;markup://forceCommunity:updateUserProfile\&quot;,\&quot;markup://ui:toggleRichText\&quot;,\&quot;markup://ui:dataProvideError\&quot;,\&quot;markup://force:componentRendered\&quot;,\&quot;markup://forceChatter:touchMove\&quot;,\&quot;markup://ui:updateSize\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:104585.36,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;home\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:109090.5,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:communityApp\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://ui:inputRange\&quot;,\&quot;markup://forceSearch:recordPreviewBody\&quot;,\&quot;markup://force:listLoadingTemplate\&quot;,\&quot;markup://force:listViewManagerHeader\&quot;,\&quot;markup://ui:outputRichText\&quot;,\&quot;markup://force:virtualAutocompleteMenu\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://force:outputImage\&quot;,\&quot;markup://force:outputFormulaHtml\&quot;,\&quot;markup://forceSearch:resultsGridLVMDataManager\&quot;,\&quot;markup://ui:inputPercent\&quot;,\&quot;markup://forceSearch:scopesListContainer\&quot;,\&quot;markup://force:outputAnimatedNumber\&quot;,\&quot;markup://force:changeOwnerContent\&quot;,\&quot;markup://emailui:formattedEmail\&quot;,\&quot;markup://forceSearch:recordPreviewTitle\&quot;,\&quot;markup://force:listViewPickerDataProvider\&quot;,\&quot;markup://forceSearch:multiScopesDataProvider\&quot;,\&quot;markup://force:dynamicLabelProvider\&quot;,\&quot;markup://forceSearch:searchPageDesktop\&quot;,\&quot;markup://force:highlightText\&quot;,\&quot;markup://force:pageBlockSectionEdit\&quot;,\&quot;markup://force:inlineEditGrid\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayManager\&quot;,\&quot;markup://forceSearch:scopesListSection\&quot;,\&quot;markup://ui:inputFile\&quot;,\&quot;markup://forceSearch:recordPreviewActions\&quot;,\&quot;markup://forceSearch:noResults\&quot;,\&quot;markup://lightning:deprecatedFormattedTime\&quot;,\&quot;markup://force:inlineEditPanelBody\&quot;,\&quot;markup://force:breadCrumbs\&quot;,\&quot;markup://force:inputLookupPanelItem\&quot;,\&quot;markup://force:virtualRecordList\&quot;,\&quot;markup://forceSearch:recordPreviewHeader\&quot;,\&quot;markup://forceSearch:scopesListPlaceholder\&quot;,\&quot;markup://forceSearch:searchResultsSummary\&quot;,\&quot;markup://ui:inputRichText\&quot;,\&quot;markup://forceSearch:lookupAdvanced\&quot;,\&quot;markup://ui:inputDateTimeHtml\&quot;,\&quot;markup://force:relatedListQuickLinksContainer\&quot;,\&quot;markup://force:sortFilterMenuItem\&quot;,\&quot;markup://ui:inputEmail\&quot;,\&quot;markup://force:outputCurrency\&quot;,\&quot;markup://force:virtualAutocompleteMenuOption\&quot;,\&quot;markup://forceSearch:resultsTopResultsDataProvider\&quot;,\&quot;markup://force:statusIconSummary\&quot;,\&quot;markup://ui:outputCheckbox\&quot;,\&quot;markup://forceSearch:inputLookupDesktopDataProvider\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineColumnDataProvider\&quot;,\&quot;markup://force:pageBlockItem\&quot;,\&quot;markup://force:outputPicklist\&quot;,\&quot;markup://force:listViewManagerDisplayViewConfiguration\&quot;,\&quot;markup://force:pageBlockItemView\&quot;,\&quot;markup://forceSearch:mruMobile\&quot;,\&quot;markup://force:pageBlockSectionRow\&quot;,\&quot;markup://force:walkthrough\&quot;,\&quot;markup://force:relatedListQuickLinksContainerDataProvider\&quot;,\&quot;markup://force:listViewManager\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewCloseConfirmModal\&quot;,\&quot;markup://force:inputLookupPanelSelector\&quot;,\&quot;markup://force:pageBlock\&quot;,\&quot;markup://runtime_search_federated:externalScopesList\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewMultipleRecordTypeTabSet\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://force:outputOwnerIdLookupWithChangeLink\&quot;,\&quot;markup://forceSearch:feedback\&quot;,\&quot;markup://force:relatedListsDataCollection\&quot;,\&quot;markup://ui:inputSelectOptionGroup\&quot;,\&quot;markup://force:outputField\&quot;,\&quot;markup://force:staticGoogleMap\&quot;,\&quot;markup://ui:outputPhone\&quot;,\&quot;markup://force:socialPhotoController\&quot;,\&quot;markup://force:outputCustomLinkUrl\&quot;,\&quot;markup://force:outputRichText\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineView\&quot;,\&quot;markup://forceSearch:searchScopeHeader\&quot;,\&quot;markup://ui:outputSelect\&quot;,\&quot;markup://forceSearch:resultsCompact\&quot;,\&quot;markup://forceSearch:resultsTopResults\&quot;,\&quot;markup://force:pageBlockItemEdit\&quot;,\&quot;markup://force:buttonBarDeprecated\&quot;,\&quot;markup://forceSearch:entitySelectorMenu\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderConfiguration\&quot;,\&quot;markup://ui:outputLabel\&quot;,\&quot;markup://forceSearch:inputLookupDesktopActionItem\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://force:outputRecordTypeWithoutChangeLink\&quot;,\&quot;markup://forceSearch:scopeOverflow\&quot;,\&quot;markup://ui:pill\&quot;,\&quot;markup://force:outputName\&quot;,\&quot;markup://force:navigateConfirmation\&quot;,\&quot;markup://ui:dropzone\&quot;,\&quot;markup://ui:outputURL\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineDataProvider\&quot;,\&quot;markup://ui:outputEmail\&quot;,\&quot;markup://forceSearch:scopeItem\&quot;,\&quot;markup://ui:inputCheckbox\&quot;,\&quot;markup://force:statusIcon\&quot;,\&quot;markup://force:outputEventDateTime\&quot;,\&quot;markup://forceSearch:scopesRibbonDataProvider\&quot;,\&quot;markup://ui:inputSmartNumber\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnHeader\&quot;,\&quot;markup://force:objectHomePipelineView\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://force:outputTime\&quot;,\&quot;markup://force:listViewPickerAutocompleteOption\&quot;,\&quot;markup://force:outputFieldInternal\&quot;,\&quot;markup://force:list\&quot;,\&quot;markup://force:outputLocation\&quot;,\&quot;markup://ui:inputDateRange\&quot;,\&quot;markup://ui:inputDateHtml\&quot;,\&quot;markup://forceSearch:resultsFeedback\&quot;,\&quot;markup://ui:outputTextArea\&quot;,\&quot;markup://force:splitViewListRecord\&quot;,\&quot;markup://force:listSorterDataProvider\&quot;,\&quot;markup://ui:inputDate\&quot;,\&quot;markup://forceSearch:inputLookupDesktop\&quot;,\&quot;markup://force:listViewManagerSplitViewList\&quot;,\&quot;markup://forceSearch:recordPreviewFields\&quot;,\&quot;markup://ui:inputFileFilesList\&quot;,\&quot;markup://forceSearch:searchDataProvider\&quot;,\&quot;markup://ui:outputDateTime\&quot;,\&quot;markup://ui:inputFileDroppableZone\&quot;,\&quot;markup://force:listViewManagerSettingsMenuConfiguration\&quot;,\&quot;markup://force:pageBlockSectionView\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://forceSearch:scopedResults\&quot;,\&quot;markup://forceSearch:bestResultFooter\&quot;,\&quot;markup://force:inputLookupTrigger\&quot;,\&quot;markup://forceSearch:scopesDataProvider\&quot;,\&quot;markup://forceSearch:inputLookupDesktopOption\&quot;,\&quot;markup://lightning:buttonMenu\&quot;,\&quot;markup://force:listTemplate\&quot;,\&quot;markup://force:outputAddressText\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://force:listViewManagerSettingsMenuOptionConfiguration\&quot;,\&quot;markup://force:listViewPicker\&quot;,\&quot;markup://forceSearch:scopesList\&quot;,\&quot;markup://lightning:menuItem\&quot;,\&quot;markup://force:socialPhoto_v2\&quot;,\&quot;markup://force:relatedListHover\&quot;,\&quot;markup://force:outputPhone\&quot;,\&quot;markup://force:dependencyManagerAPI\&quot;,\&quot;markup://forceSearch:scopesListDataProvider\&quot;,\&quot;markup://ui:autocompletePanel\&quot;,\&quot;markup://lightning:deprecatedIcon\&quot;,\&quot;markup://forceSearch:entityMenuItem\&quot;,\&quot;markup://ui:autocompleteList\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://ui:dataGrid\&quot;,\&quot;markup://ui:inputDateTime\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:label\&quot;,\&quot;markup://lightning:deprecatedPrimitiveIcon\&quot;,\&quot;markup://force:listViewManagerSecondaryDisplayManager\&quot;,\&quot;markup://force:inputLookupPanel\&quot;,\&quot;markup://forceSearch:scopeOverflowList\&quot;,\&quot;markup://ui:inputSearch\&quot;,\&quot;markup://runtime_sales_pipelineboard:genericPipelineDataProvider\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://forceSearch:baseSearchPage\&quot;,\&quot;markup://ui:asyncImage\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnModal\&quot;,\&quot;markup://forceSearch:recordPreview\&quot;,\&quot;markup://force:dataProviderLoadErrorMessage\&quot;,\&quot;markup://ui:inputSecret\&quot;,\&quot;markup://forceSearch:bestResult\&quot;,\&quot;markup://ui:infiniteList\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumn\&quot;,\&quot;markup://ui:inputFileOpenBrowse\&quot;,\&quot;markup://force:panelCallbackAction\&quot;,\&quot;markup://forceSearch:resultsHeaderFilters\&quot;,\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;markup://ui:block\&quot;,\&quot;layout://rl-User-VIEW-FULL----force_highlights-_1-0-346330595a6c755365653442424233534430443778673d3d.c\&quot;,\&quot;markup://force:listViewManagerStateManager\&quot;,\&quot;markup://ui:outputPercent\&quot;,\&quot;markup://force:outputNameForUser\&quot;,\&quot;markup://forceSearch:mru\&quot;,\&quot;markup://force:alternateIdProvider\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewCloseLostTarget\&quot;,\&quot;markup://force:relatedListViewDataManager\&quot;,\&quot;markup://forceSearch:mruMobileItem\&quot;,\&quot;markup://runtime_search_federated:externalScopes\&quot;,\&quot;markup://forceSearch:recordPreviewRelatedList\&quot;,\&quot;markup://forceSearch:searchFor\&quot;,\&quot;markup://force:relatedListViewManager\&quot;,\&quot;markup://ui:inputCurrency\&quot;,\&quot;markup://force:outputNoteorAttachment\&quot;,\&quot;markup://ui:inputDateTrigger\&quot;,\&quot;markup://ui:dragAndDropAccessibilityMenu\&quot;,\&quot;markup://ui:inputRadio\&quot;,\&quot;markup://forceSearch:viewportChangeHandler\&quot;,\&quot;markup://opencti:outputPhone\&quot;,\&quot;markup://force:listViewSettingsMenu\&quot;,\&quot;markup://ui:output\&quot;,\&quot;markup://ui:inputTextAreaForAutocomplete\&quot;,\&quot;markup://force:pageBlockSection\&quot;,\&quot;markup://force:listViewManagerDisplaysConfiguration\&quot;,\&quot;markup://ui:inputNumber\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewConfigurationModal\&quot;,\&quot;markup://force:breadCrumbItem\&quot;,\&quot;markup://runtime_search_federated:externalScopesListDataProvider\&quot;,\&quot;markup://forceSearch:search\&quot;,\&quot;markup://force:outputAnytype\&quot;,\&quot;markup://force:virtualAutocompleteMenuList\&quot;,\&quot;markup://force:listViewPlaceholder\&quot;,\&quot;markup://forceSearch:resultsGridLVM\&quot;,\&quot;markup://forceSearch:scopesRibbon\&quot;,\&quot;markup://force:inputLookup\&quot;,\&quot;markup://ui:autocompleteOption\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://forceSearch:groupContainer\&quot;,\&quot;markup://force:outputModStampWithPreview\&quot;,\&quot;markup://ui:pillContainer\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://force:listViewManagerDisplayDataConfiguration\&quot;,\&quot;markup://forceSearch:searchPage\&quot;,\&quot;markup://ui:outputNumber\&quot;,\&quot;markup://force:outputLookupWithPreview\&quot;,\&quot;markup://forceSearch:base\&quot;,\&quot;markup://forceSearch:searchResultsGridHeader\&quot;,\&quot;markup://forceSearch:baseSearch\&quot;,\&quot;markup://forceSearch:resultsRegion\&quot;,\&quot;markup://force:outputLookupText\&quot;,\&quot;markup://force:listViewManagerGrid\&quot;,\&quot;markup://force:inlineEditPanelFooter\&quot;,\&quot;markup://force:outputAddress\&quot;,\&quot;markup://force:outputLookup\&quot;,\&quot;markup://ui:listSorter\&quot;,\&quot;markup://forceSearch:lookupAdvancedFooter\&quot;,\&quot;markup://force:outputModStamp\&quot;,\&quot;markup://ui:outputCurrency\&quot;,\&quot;markup://forceSearch:queryExpansionMessage\&quot;,\&quot;markup://force:outputRecordType\&quot;,\&quot;markup://ui:abstractDataGrid\&quot;,\&quot;markup://force:listViewManagerLayoutHandlingConfiguration\&quot;,\&quot;markup://force:relatedListContainerMetadataProvider\&quot;,\&quot;markup://force:lookupCreateActionManager\&quot;,\&quot;markup://forceSearch:resultsMultiScope\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://force:outputPlainText\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://forceSearch:baseResults\&quot;,\&quot;markup://force:outputOwnerLookup\&quot;,\&quot;markup://ui:outputDate\&quot;,\&quot;markup://force:entityIcon\&quot;,\&quot;markup://ui:dragAndDropAccessibility\&quot;,\&quot;markup://ui:inputURL\&quot;,\&quot;markup://ui:outputMultiSelect\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://force:outputFile\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://ui:inputPhone\&quot;,\&quot;markup://forceSearch:scopes\&quot;,\&quot;markup://force:listViewManagerDisplaySwitcher\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderMenu\&quot;,\&quot;markup://force:outputURL\&quot;,\&quot;markup://force:outputScheduleDateField\&quot;,\&quot;markup://force:listViewManagerGridFooter\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://force:shortcutCommandHandled\&quot;,\&quot;markup://force:getDependencyTreeInfo\&quot;,\&quot;markup://force:correlatedChange\&quot;,\&quot;markup://ui:noMoreContent\&quot;,\&quot;markup://force:recordFieldError\&quot;,\&quot;markup://force:inputLookupAdditionalFieldsUpdate\&quot;,\&quot;markup://ui:updateGridRow\&quot;,\&quot;markup://force:listViewManagerGridFooterSave\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewScrollEvent\&quot;,\&quot;markup://opencti:clickToDial\&quot;,\&quot;markup://force:inputLookupPanelItemSelect\&quot;,\&quot;markup://force:recordChanged\&quot;,\&quot;markup://ui:load\&quot;,\&quot;markup://force:toggleFieldsHighlight\&quot;,\&quot;markup://force:listViewManagerListViewCreate\&quot;,\&quot;markup://ui:closeRow\&quot;,\&quot;markup://force:validationErrors\&quot;,\&quot;markup://force:showAppMessage\&quot;,\&quot;markup://ui:selectListOption\&quot;,\&quot;markup://ui:dataProvide\&quot;,\&quot;markup://ui:resize\&quot;,\&quot;markup://force:updateMDPVisibility\&quot;,\&quot;markup://force:pageBlockSectionToggled\&quot;,\&quot;markup://ui:matchText\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayChanged\&quot;,\&quot;markup://force:windowUpdate\&quot;,\&quot;markup://force:inlineEditStateChange\&quot;,\&quot;markup://force:dataManagerChanged\&quot;,\&quot;markup://force:changeOwnerSubmit\&quot;,\&quot;markup://force:listIdChange\&quot;,\&quot;markup://ui:showDatePicker\&quot;,\&quot;markup://ui:sort\&quot;,\&quot;markup://ui:scrollBy\&quot;,\&quot;markup://force:objectHomeRecreateChart\&quot;,\&quot;markup://ui:showMore\&quot;,\&quot;markup://force:listViewManagerStateModelChanged\&quot;,\&quot;markup://ui:inputChange\&quot;,\&quot;markup://force:recordDataChange\&quot;,\&quot;markup://lightning:tabUpdated\&quot;,\&quot;markup://ui:autocompleteListCollapse\&quot;,\&quot;markup://force:socialPhotoShowFeedback\&quot;,\&quot;markup://ui:autocompleteListExpand\&quot;,\&quot;markup://force:cleanupRecordFieldError\&quot;,\&quot;markup://force:socialPhotoRenderDefaultIcon\&quot;,\&quot;markup://force:listViewManagerAdditionalMetadataFetch\&quot;,\&quot;markup://force:recordUpdated\&quot;,\&quot;markup://force:dirtyStateChanged\&quot;,\&quot;markup://ui:listHighlight\&quot;,\&quot;markup://ui:openPicker\&quot;,\&quot;markup://forceSearch:recordPreviewRecordLoaded\&quot;,\&quot;markup://force:recordPageError\&quot;,\&quot;markup://force:revertInlineEditFieldValue\&quot;,\&quot;markup://ui:inputFileChangeEvent\&quot;,\&quot;markup://force:lvmFocusRequest\&quot;,\&quot;markup://ui:dataChanged\&quot;,\&quot;markup://ui:searchEvent\&quot;,\&quot;markup://force:loadExtPoint\&quot;,\&quot;markup://force:refreshActions\&quot;,\&quot;markup://force:listSortOrderChange\&quot;,\&quot;markup://ui:registerDatePickerManager\&quot;,\&quot;markup://ui:scrollTo\&quot;,\&quot;markup://force:outputLookupClicked\&quot;,\&quot;markup://ui:dataProvideError\&quot;,\&quot;markup://force:onLoadError\&quot;,\&quot;markup://force:virtualAutocompleteMenuSelectionChange\&quot;,\&quot;markup://ui:updateSize\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewConfigurationModalEvent\&quot;,\&quot;markup://force:virtualAutocompleteMenuListCount\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnModalEvent\&quot;,\&quot;markup://force:recordCreatedFromLookup\&quot;,\&quot;markup://ui:hideDatePicker\&quot;,\&quot;markup://force:listViewManagerConfirmIfEdited\&quot;,\&quot;markup://forceSearch:recordPreviewRelatedListsLoaded\&quot;,\&quot;markup://force:inlineEditGridCollectionValueChanged\&quot;,\&quot;markup://force:virtualAutocompleteMenuClose\&quot;,\&quot;markup://ui:updateAriaAttributes\&quot;,\&quot;markup://forceSearch:bestResultChanged\&quot;,\&quot;markup://force:listViewManagerDisplaySpinner\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewRenderedEvent\&quot;,\&quot;markup://force:listViewManagerListViewClone\&quot;,\&quot;markup://force:listViewManagerListViewChangeComplete\&quot;,\&quot;markup://forceSearch:scopeSelected\&quot;,\&quot;markup://force:sortMruList\&quot;,\&quot;markup://force:objectHomeRecordChange\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewStateChangeEvent\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayChange\&quot;,\&quot;markup://force:animationEvent\&quot;,\&quot;markup://force:shortcutCommand\&quot;,\&quot;markup://force:listViewChange\&quot;,\&quot;markup://force:listViewManagerGridFooterCancel\&quot;,\&quot;markup://forceChatter:recordsHomeMobileScroll\&quot;,\&quot;markup://ui:fetchData\&quot;,\&quot;markup://force:entitySelected\&quot;,\&quot;markup://force:relatedListLoadFail\&quot;,\&quot;markup://force:recordError\&quot;,\&quot;markup://force:listStateChange\&quot;,\&quot;markup://ui:matchDone\&quot;,\&quot;markup://forceSearch:resultsSortAndPaging\&quot;,\&quot;markup://ui:dragEvent\&quot;,\&quot;markup://force:virtualAutocompleteMenuOptionClick\&quot;,\&quot;markup://runtime_sales_activities:activityTimelineRefresh\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewDragEvent\&quot;,\&quot;markup://forceSearch:resultsLoaded\&quot;,\&quot;markup://force:listViewManagerListViewDelete\&quot;,\&quot;markup://ui:addRemove\&quot;,\&quot;markup://force:hideLookup\&quot;,\&quot;markup://force:showLookup\&quot;,\&quot;markup://force:loadComplete\&quot;,\&quot;markup://one:closeTabsEvent\&quot;,\&quot;markup://force:splitViewRecordSelected\&quot;,\&quot;markup://force:listViewManagerViewModeChanged\&quot;,\&quot;markup://force:registerPicklist\&quot;,\&quot;markup://ui:collectionValueChanged\&quot;,\&quot;markup://force:listViewManagerListViewUpdate\&quot;,\&quot;markup://opencti:setClickToDial\&quot;,\&quot;markup://ui:abortFetchData\&quot;,\&quot;markup://force:imageChange\&quot;,\&quot;markup://force:toggleInlineEdit\&quot;,\&quot;markup://force:listViewManagerSecondaryDisplayChange\&quot;,\&quot;markup://ui:toggleRichText\&quot;,\&quot;markup://force:componentRendered\&quot;,\&quot;markup://force:listViewManagerGridReady\&quot;,\&quot;markup://ui:openRow\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderMenuSelect\&quot;,\&quot;markup://forceSearch:resultsVisibilityChanged\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:109544.51,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:communityApp\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://ui:inputRange\&quot;,\&quot;markup://forceSearch:recordPreviewBody\&quot;,\&quot;markup://force:listLoadingTemplate\&quot;,\&quot;markup://force:listViewManagerHeader\&quot;,\&quot;markup://ui:outputRichText\&quot;,\&quot;markup://force:virtualAutocompleteMenu\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://forceSearch:resultsGridLVMDataManager\&quot;,\&quot;markup://ui:inputPercent\&quot;,\&quot;markup://forceSearch:scopesListContainer\&quot;,\&quot;markup://force:outputAnimatedNumber\&quot;,\&quot;markup://force:changeOwnerContent\&quot;,\&quot;markup://forceSearch:recordPreviewTitle\&quot;,\&quot;markup://force:listViewPickerDataProvider\&quot;,\&quot;markup://forceSearch:multiScopesDataProvider\&quot;,\&quot;markup://force:dynamicLabelProvider\&quot;,\&quot;markup://forceSearch:searchPageDesktop\&quot;,\&quot;markup://force:highlightText\&quot;,\&quot;markup://force:inlineEditGrid\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayManager\&quot;,\&quot;markup://forceSearch:scopesListSection\&quot;,\&quot;markup://ui:inputFile\&quot;,\&quot;markup://forceSearch:recordPreviewActions\&quot;,\&quot;markup://forceSearch:noResults\&quot;,\&quot;markup://force:inlineEditPanelBody\&quot;,\&quot;markup://force:breadCrumbs\&quot;,\&quot;markup://force:inputLookupPanelItem\&quot;,\&quot;markup://force:virtualRecordList\&quot;,\&quot;markup://forceSearch:recordPreviewHeader\&quot;,\&quot;markup://forceSearch:scopesListPlaceholder\&quot;,\&quot;markup://forceSearch:searchResultsSummary\&quot;,\&quot;markup://ui:inputRichText\&quot;,\&quot;markup://forceSearch:lookupAdvanced\&quot;,\&quot;markup://ui:inputDateTimeHtml\&quot;,\&quot;markup://forceChatter:actionChatterContainer\&quot;,\&quot;markup://force:relatedListQuickLinksContainer\&quot;,\&quot;markup://force:sortFilterMenuItem\&quot;,\&quot;markup://ui:inputEmail\&quot;,\&quot;markup://force:virtualAutocompleteMenuOption\&quot;,\&quot;markup://forceSearch:resultsTopResultsDataProvider\&quot;,\&quot;markup://force:statusIconSummary\&quot;,\&quot;markup://ui:outputCheckbox\&quot;,\&quot;markup://forceSearch:inputLookupDesktopDataProvider\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineColumnDataProvider\&quot;,\&quot;markup://force:listViewManagerDisplayViewConfiguration\&quot;,\&quot;markup://forceSearch:mruMobile\&quot;,\&quot;markup://force:walkthrough\&quot;,\&quot;markup://force:relatedListQuickLinksContainerDataProvider\&quot;,\&quot;markup://force:listViewManager\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewCloseConfirmModal\&quot;,\&quot;markup://force:inputLookupPanelSelector\&quot;,\&quot;markup://runtime_search_federated:externalScopesList\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewMultipleRecordTypeTabSet\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://forceSearch:feedback\&quot;,\&quot;markup://force:relatedListsDataCollection\&quot;,\&quot;markup://ui:inputSelectOptionGroup\&quot;,\&quot;markup://forceChatter:crudStream\&quot;,\&quot;markup://forceChatter:addToStreamPopoverFollowButton\&quot;,\&quot;markup://ui:outputPhone\&quot;,\&quot;markup://force:socialPhotoController\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineView\&quot;,\&quot;markup://forceSearch:searchScopeHeader\&quot;,\&quot;markup://ui:outputSelect\&quot;,\&quot;markup://forceSearch:resultsCompact\&quot;,\&quot;markup://forceSearch:resultsTopResults\&quot;,\&quot;markup://forceChatter:addToStreamPopover\&quot;,\&quot;markup://force:buttonBarDeprecated\&quot;,\&quot;markup://forceSearch:entitySelectorMenu\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderConfiguration\&quot;,\&quot;markup://forceSearch:inputLookupDesktopActionItem\&quot;,\&quot;markup://ui:outputLabel\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://forceSearch:scopeOverflow\&quot;,\&quot;markup://ui:pill\&quot;,\&quot;markup://force:navigateConfirmation\&quot;,\&quot;markup://ui:dropzone\&quot;,\&quot;markup://ui:outputURL\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineDataProvider\&quot;,\&quot;markup://ui:outputEmail\&quot;,\&quot;markup://forceSearch:scopeItem\&quot;,\&quot;markup://ui:inputCheckbox\&quot;,\&quot;markup://force:statusIcon\&quot;,\&quot;markup://forceSearch:scopesRibbonDataProvider\&quot;,\&quot;markup://ui:inputSmartNumber\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnHeader\&quot;,\&quot;markup://force:objectHomePipelineView\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://forceChatter:addToStreamAction\&quot;,\&quot;markup://force:listViewPickerAutocompleteOption\&quot;,\&quot;markup://force:list\&quot;,\&quot;markup://ui:inputDateRange\&quot;,\&quot;markup://ui:inputDateHtml\&quot;,\&quot;markup://forceSearch:resultsFeedback\&quot;,\&quot;markup://ui:outputTextArea\&quot;,\&quot;markup://force:listSorterDataProvider\&quot;,\&quot;markup://force:splitViewListRecord\&quot;,\&quot;markup://ui:inputDate\&quot;,\&quot;markup://forceSearch:inputLookupDesktop\&quot;,\&quot;markup://force:listViewManagerSplitViewList\&quot;,\&quot;markup://forceSearch:recordPreviewFields\&quot;,\&quot;markup://ui:inputFileFilesList\&quot;,\&quot;markup://forceSearch:searchDataProvider\&quot;,\&quot;markup://ui:outputDateTime\&quot;,\&quot;markup://ui:inputFileDroppableZone\&quot;,\&quot;markup://force:listViewManagerSettingsMenuConfiguration\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://forceSearch:scopedResults\&quot;,\&quot;markup://forceSearch:bestResultFooter\&quot;,\&quot;markup://force:inputLookupTrigger\&quot;,\&quot;markup://forceSearch:scopesDataProvider\&quot;,\&quot;markup://forceSearch:inputLookupDesktopOption\&quot;,\&quot;markup://lightning:buttonMenu\&quot;,\&quot;markup://force:listTemplate\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://force:listViewManagerSettingsMenuOptionConfiguration\&quot;,\&quot;markup://force:listViewPicker\&quot;,\&quot;markup://forceSearch:scopesList\&quot;,\&quot;markup://lightning:menuItem\&quot;,\&quot;markup://force:socialPhoto_v2\&quot;,\&quot;markup://force:outputPhone\&quot;,\&quot;markup://force:relatedListHover\&quot;,\&quot;markup://force:dependencyManagerAPI\&quot;,\&quot;markup://forceSearch:scopesListDataProvider\&quot;,\&quot;markup://ui:autocompletePanel\&quot;,\&quot;markup://lightning:deprecatedIcon\&quot;,\&quot;markup://forceSearch:entityMenuItem\&quot;,\&quot;markup://ui:autocompleteList\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://lightning:buttonStateful\&quot;,\&quot;markup://ui:dataGrid\&quot;,\&quot;markup://ui:inputDateTime\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:label\&quot;,\&quot;markup://lightning:deprecatedPrimitiveIcon\&quot;,\&quot;markup://force:listViewManagerSecondaryDisplayManager\&quot;,\&quot;markup://force:inputLookupPanel\&quot;,\&quot;markup://forceSearch:scopeOverflowList\&quot;,\&quot;markup://ui:inputSearch\&quot;,\&quot;markup://runtime_sales_pipelineboard:genericPipelineDataProvider\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://forceSearch:baseSearchPage\&quot;,\&quot;markup://ui:asyncImage\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnModal\&quot;,\&quot;markup://forceSearch:recordPreview\&quot;,\&quot;markup://force:dataProviderLoadErrorMessage\&quot;,\&quot;markup://ui:inputSecret\&quot;,\&quot;markup://forceSearch:bestResult\&quot;,\&quot;markup://ui:infiniteList\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumn\&quot;,\&quot;markup://ui:inputFileOpenBrowse\&quot;,\&quot;markup://force:panelCallbackAction\&quot;,\&quot;markup://forceSearch:resultsHeaderFilters\&quot;,\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://force:listViewManagerStateManager\&quot;,\&quot;markup://ui:outputPercent\&quot;,\&quot;markup://forceSearch:mru\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewCloseLostTarget\&quot;,\&quot;markup://force:relatedListViewDataManager\&quot;,\&quot;markup://forceSearch:mruMobileItem\&quot;,\&quot;markup://runtime_search_federated:externalScopes\&quot;,\&quot;markup://forceSearch:recordPreviewRelatedList\&quot;,\&quot;markup://forceSearch:searchFor\&quot;,\&quot;markup://force:relatedListViewManager\&quot;,\&quot;markup://ui:inputCurrency\&quot;,\&quot;markup://ui:inputDateTrigger\&quot;,\&quot;markup://ui:dragAndDropAccessibilityMenu\&quot;,\&quot;markup://ui:inputRadio\&quot;,\&quot;markup://forceSearch:viewportChangeHandler\&quot;,\&quot;markup://opencti:outputPhone\&quot;,\&quot;markup://force:listViewSettingsMenu\&quot;,\&quot;markup://ui:output\&quot;,\&quot;markup://ui:inputTextAreaForAutocomplete\&quot;,\&quot;markup://force:listViewManagerDisplaysConfiguration\&quot;,\&quot;markup://ui:inputNumber\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewConfigurationModal\&quot;,\&quot;markup://force:breadCrumbItem\&quot;,\&quot;markup://runtime_search_federated:externalScopesListDataProvider\&quot;,\&quot;markup://forceSearch:search\&quot;,\&quot;markup://force:virtualAutocompleteMenuList\&quot;,\&quot;markup://force:listViewPlaceholder\&quot;,\&quot;markup://forceSearch:resultsGridLVM\&quot;,\&quot;markup://forceSearch:scopesRibbon\&quot;,\&quot;markup://force:inputLookup\&quot;,\&quot;markup://ui:autocompleteOption\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://forceSearch:groupContainer\&quot;,\&quot;markup://ui:pillContainer\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://forceSearch:searchPage\&quot;,\&quot;markup://force:listViewManagerDisplayDataConfiguration\&quot;,\&quot;markup://ui:outputNumber\&quot;,\&quot;markup://forceSearch:base\&quot;,\&quot;markup://forceSearch:searchResultsGridHeader\&quot;,\&quot;markup://forceSearch:baseSearch\&quot;,\&quot;markup://forceSearch:resultsRegion\&quot;,\&quot;markup://force:listViewManagerGrid\&quot;,\&quot;markup://force:inlineEditPanelFooter\&quot;,\&quot;markup://force:outputLookup\&quot;,\&quot;markup://ui:listSorter\&quot;,\&quot;markup://forceSearch:lookupAdvancedFooter\&quot;,\&quot;markup://ui:outputCurrency\&quot;,\&quot;markup://forceSearch:queryExpansionMessage\&quot;,\&quot;markup://ui:abstractDataGrid\&quot;,\&quot;markup://force:listViewManagerLayoutHandlingConfiguration\&quot;,\&quot;markup://force:relatedListContainerMetadataProvider\&quot;,\&quot;markup://force:lookupCreateActionManager\&quot;,\&quot;markup://forceSearch:resultsMultiScope\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://forceSearch:baseResults\&quot;,\&quot;markup://ui:outputDate\&quot;,\&quot;markup://force:entityIcon\&quot;,\&quot;markup://ui:dragAndDropAccessibility\&quot;,\&quot;markup://ui:inputURL\&quot;,\&quot;markup://ui:outputMultiSelect\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://ui:inputPhone\&quot;,\&quot;markup://forceSearch:scopes\&quot;,\&quot;markup://force:listViewManagerDisplaySwitcher\&quot;,\&quot;markup://force:actionEventLink\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderMenu\&quot;,\&quot;markup://force:listViewManagerGridFooter\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://force:shortcutCommandHandled\&quot;,\&quot;markup://force:getDependencyTreeInfo\&quot;,\&quot;markup://force:correlatedChange\&quot;,\&quot;markup://ui:noMoreContent\&quot;,\&quot;markup://force:recordFieldError\&quot;,\&quot;markup://force:inputLookupAdditionalFieldsUpdate\&quot;,\&quot;markup://ui:updateGridRow\&quot;,\&quot;markup://force:listViewManagerGridFooterSave\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewScrollEvent\&quot;,\&quot;markup://opencti:clickToDial\&quot;,\&quot;markup://force:inputLookupPanelItemSelect\&quot;,\&quot;markup://force:recordChanged\&quot;,\&quot;markup://ui:load\&quot;,\&quot;markup://force:toggleFieldsHighlight\&quot;,\&quot;markup://force:listViewManagerListViewCreate\&quot;,\&quot;markup://ui:closeRow\&quot;,\&quot;markup://force:validationErrors\&quot;,\&quot;markup://force:showAppMessage\&quot;,\&quot;markup://ui:selectListOption\&quot;,\&quot;markup://ui:dataProvide\&quot;,\&quot;markup://ui:resize\&quot;,\&quot;markup://force:updateMDPVisibility\&quot;,\&quot;markup://ui:matchText\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayChanged\&quot;,\&quot;markup://force:windowUpdate\&quot;,\&quot;markup://force:dataManagerChanged\&quot;,\&quot;markup://force:changeOwnerSubmit\&quot;,\&quot;markup://force:listIdChange\&quot;,\&quot;markup://ui:showDatePicker\&quot;,\&quot;markup://ui:sort\&quot;,\&quot;markup://ui:scrollBy\&quot;,\&quot;markup://force:objectHomeRecreateChart\&quot;,\&quot;markup://ui:showMore\&quot;,\&quot;markup://force:listViewManagerStateModelChanged\&quot;,\&quot;markup://ui:inputChange\&quot;,\&quot;markup://force:recordDataChange\&quot;,\&quot;markup://lightning:tabUpdated\&quot;,\&quot;markup://ui:autocompleteListCollapse\&quot;,\&quot;markup://force:socialPhotoShowFeedback\&quot;,\&quot;markup://ui:autocompleteListExpand\&quot;,\&quot;markup://force:cleanupRecordFieldError\&quot;,\&quot;markup://force:socialPhotoRenderDefaultIcon\&quot;,\&quot;markup://forceChatter:streamCreatedOrEdited\&quot;,\&quot;markup://force:listViewManagerAdditionalMetadataFetch\&quot;,\&quot;markup://force:recordUpdated\&quot;,\&quot;markup://force:dirtyStateChanged\&quot;,\&quot;markup://ui:listHighlight\&quot;,\&quot;markup://ui:openPicker\&quot;,\&quot;markup://forceSearch:recordPreviewRecordLoaded\&quot;,\&quot;markup://force:recordPageError\&quot;,\&quot;markup://ui:inputFileChangeEvent\&quot;,\&quot;markup://force:lvmFocusRequest\&quot;,\&quot;markup://ui:dataChanged\&quot;,\&quot;markup://ui:searchEvent\&quot;,\&quot;markup://force:loadExtPoint\&quot;,\&quot;markup://force:refreshActions\&quot;,\&quot;markup://force:listSortOrderChange\&quot;,\&quot;markup://ui:registerDatePickerManager\&quot;,\&quot;markup://ui:scrollTo\&quot;,\&quot;markup://force:outputLookupClicked\&quot;,\&quot;markup://ui:dataProvideError\&quot;,\&quot;markup://force:onLoadError\&quot;,\&quot;markup://force:virtualAutocompleteMenuSelectionChange\&quot;,\&quot;markup://ui:updateSize\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewConfigurationModalEvent\&quot;,\&quot;markup://forceChatter:addToStreamUpdated\&quot;,\&quot;markup://force:virtualAutocompleteMenuListCount\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewColumnModalEvent\&quot;,\&quot;markup://force:recordCreatedFromLookup\&quot;,\&quot;markup://ui:hideDatePicker\&quot;,\&quot;markup://force:listViewManagerConfirmIfEdited\&quot;,\&quot;markup://forceSearch:recordPreviewRelatedListsLoaded\&quot;,\&quot;markup://force:inlineEditGridCollectionValueChanged\&quot;,\&quot;markup://force:virtualAutocompleteMenuClose\&quot;,\&quot;markup://ui:updateAriaAttributes\&quot;,\&quot;markup://forceSearch:bestResultChanged\&quot;,\&quot;markup://force:listViewManagerDisplaySpinner\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewRenderedEvent\&quot;,\&quot;markup://force:listViewManagerListViewClone\&quot;,\&quot;markup://force:listViewManagerListViewChangeComplete\&quot;,\&quot;markup://forceSearch:scopeSelected\&quot;,\&quot;markup://force:sortMruList\&quot;,\&quot;markup://force:objectHomeRecordChange\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewStateChangeEvent\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayChange\&quot;,\&quot;markup://force:animationEvent\&quot;,\&quot;markup://force:shortcutCommand\&quot;,\&quot;markup://force:listViewChange\&quot;,\&quot;markup://force:listViewManagerGridFooterCancel\&quot;,\&quot;markup://forceChatter:recordsHomeMobileScroll\&quot;,\&quot;markup://ui:fetchData\&quot;,\&quot;markup://force:entitySelected\&quot;,\&quot;markup://force:relatedListLoadFail\&quot;,\&quot;markup://force:recordError\&quot;,\&quot;markup://force:listStateChange\&quot;,\&quot;markup://ui:matchDone\&quot;,\&quot;markup://forceSearch:resultsSortAndPaging\&quot;,\&quot;markup://ui:dragEvent\&quot;,\&quot;markup://force:virtualAutocompleteMenuOptionClick\&quot;,\&quot;markup://runtime_sales_activities:activityTimelineRefresh\&quot;,\&quot;markup://runtime_sales_pipelineboard:pipelineViewDragEvent\&quot;,\&quot;markup://forceSearch:resultsLoaded\&quot;,\&quot;markup://force:listViewManagerListViewDelete\&quot;,\&quot;markup://ui:addRemove\&quot;,\&quot;markup://force:hideLookup\&quot;,\&quot;markup://force:showLookup\&quot;,\&quot;markup://forceChatter:followUpdated\&quot;,\&quot;markup://force:loadComplete\&quot;,\&quot;markup://one:closeTabsEvent\&quot;,\&quot;markup://force:splitViewRecordSelected\&quot;,\&quot;markup://force:listViewManagerViewModeChanged\&quot;,\&quot;markup://force:registerPicklist\&quot;,\&quot;markup://force:listViewManagerListViewUpdate\&quot;,\&quot;markup://ui:collectionValueChanged\&quot;,\&quot;markup://opencti:setClickToDial\&quot;,\&quot;markup://ui:abortFetchData\&quot;,\&quot;markup://force:imageChange\&quot;,\&quot;markup://force:listViewManagerSecondaryDisplayChange\&quot;,\&quot;markup://ui:toggleRichText\&quot;,\&quot;markup://force:componentRendered\&quot;,\&quot;markup://force:listViewManagerGridReady\&quot;,\&quot;markup://ui:openRow\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderMenuSelect\&quot;,\&quot;markup://forceSearch:resultsVisibilityChanged\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:109571.17,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;storage-stats\&quot;,\&quot;attributes\&quot;:{\&quot;name\&quot;:\&quot;actionsManagerCache\&quot;,\&quot;adapter\&quot;:\&quot;memory\&quot;,\&quot;sizeKB\&quot;:-1,\&quot;maxSizeKB\&quot;:2048,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:103301.39,\&quot;duration\&quot;:6550,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:50,\&quot;endHeapMB\&quot;:307,\&quot;uiThreadDelay\&quot;:1089,\&quot;target\&quot;:\&quot;slds-text-color_default comm-user-profile-menu__menu-item-hover\&quot;,\&quot;scope\&quot;:\&quot;slds-dropdown__item\&quot;,\&quot;notInstrumented\&quot;:true,\&quot;pageContext\&quot;:\&quot;detail-005\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/profile/home\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:103314.18,\&quot;duration\&quot;:6542,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:103380.16,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:104585.26,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;recordLayout:initToAfterRender.109136.77\&quot;,\&quot;ts\&quot;:109136.82,\&quot;context\&quot;:{\&quot;globalId\&quot;:\&quot;1:441;a\&quot;,\&quot;metaRecordLayoutQualifiedName\&quot;:\&quot;layout://rl-User-VIEW-FULL----force_highlights-_1-0-346330595a6c755365653442424233534430443778673d3d.c\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayout\&quot;,\&quot;duration\&quot;:18},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;actions:CHATTER-SINGLE_ACTION_LINKS-RECORD\&quot;,\&quot;ts\&quot;:106347.93,\&quot;context\&quot;:{\&quot;context\&quot;:\&quot;CHATTER\&quot;,\&quot;section\&quot;:\&quot;SINGLE_ACTION_LINKS\&quot;,\&quot;entityApiName\&quot;:\&quot;RECORD\&quot;,\&quot;recordId\&quot;:\&quot;${ownerId}\&quot;,\&quot;actionsNumber\&quot;:0,\&quot;standardActions\&quot;:[],\&quot;quickActions\&quot;:[],\&quot;customButtons\&quot;:[],\&quot;otherActions\&quot;:[],\&quot;enableActionsConfiguration\&quot;:false},\&quot;owner\&quot;:\&quot;force:actionsContainer\&quot;,\&quot;duration\&quot;:3199},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;actions:RECORD-PAGE\&quot;,\&quot;ts\&quot;:106350.7,\&quot;context\&quot;:{\&quot;context\&quot;:\&quot;RECORD\&quot;,\&quot;section\&quot;:\&quot;PAGE\&quot;,\&quot;recordId\&quot;:\&quot;${ownerId}\&quot;,\&quot;actionsNumber\&quot;:1,\&quot;standardActions\&quot;:[\&quot;EditUserAction\&quot;],\&quot;quickActions\&quot;:[],\&quot;customButtons\&quot;:[],\&quot;otherActions\&quot;:[],\&quot;enableActionsConfiguration\&quot;:false,\&quot;StandardButton\&quot;:1},\&quot;owner\&quot;:\&quot;force:actionsContainer\&quot;,\&quot;duration\&quot;:3198}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:103418.53,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:1033,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;314;a\&quot;],\&quot;requestId\&quot;:\&quot;103418500000818683\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2255,\&quot;xhrDuration\&quot;:740,\&quot;xhrStall\&quot;:445,\&quot;startTime\&quot;:103420,\&quot;fetchStart\&quot;:103420,\&quot;requestStart\&quot;:103866,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:734,\&quot;transfer\&quot;:5,\&quot;transferSize\&quot;:1506,\&quot;serverTime\&quot;:168,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:744},{\&quot;ts\&quot;:103316.51,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:13,\&quot;requestLength\&quot;:1644,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;307;a\&quot;],\&quot;requestId\&quot;:\&quot;103316480000bba4d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:2903269,\&quot;xhrDuration\&quot;:1156,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:103319,\&quot;fetchStart\&quot;:103319,\&quot;requestStart\&quot;:103321,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:562,\&quot;transfer\&quot;:593,\&quot;transferSize\&quot;:311801,\&quot;serverTime\&quot;:417,\&quot;xhrDelay\&quot;:8},\&quot;duration\&quot;:1164},{\&quot;ts\&quot;:104560.21,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:5644,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;319;a\&quot;,\&quot;322;a\&quot;,\&quot;347;a\&quot;,\&quot;350;a\&quot;,\&quot;354;a\&quot;,\&quot;366;a\&quot;,\&quot;368;a\&quot;,\&quot;370;a\&quot;,\&quot;374;a\&quot;,\&quot;376;a\&quot;,\&quot;383;a\&quot;],\&quot;requestId\&quot;:\&quot;104560190000b057dd\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:76020,\&quot;xhrDuration\&quot;:1729,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:104563,\&quot;fetchStart\&quot;:104563,\&quot;requestStart\&quot;:104565,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1727,\&quot;transfer\&quot;:1,\&quot;transferSize\&quot;:8439,\&quot;serverTime\&quot;:1541,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1733},{\&quot;ts\&quot;:106394.49,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:17,\&quot;requestLength\&quot;:1062,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;441;a\&quot;],\&quot;requestId\&quot;:\&quot;106394480000e569d8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8449680,\&quot;xhrDuration\&quot;:2588,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:106396,\&quot;fetchStart\&quot;:106396,\&quot;requestStart\&quot;:106398,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:922,\&quot;transfer\&quot;:1665,\&quot;transferSize\&quot;:1101547,\&quot;serverTime\&quot;:672,\&quot;xhrDelay\&quot;:39},\&quot;duration\&quot;:2627},{\&quot;ts\&quot;:106356.16,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1763,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;437;a\&quot;],\&quot;requestId\&quot;:\&quot;106356130000baea8f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8148136,\&quot;xhrDuration\&quot;:3083,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:106359,\&quot;fetchStart\&quot;:106359,\&quot;requestStart\&quot;:106361,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:957,\&quot;transfer\&quot;:2126,\&quot;transferSize\&quot;:1069237,\&quot;serverTime\&quot;:705,\&quot;xhrDelay\&quot;:48},\&quot;duration\&quot;:3131}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:103372.63,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;314;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:45,\&quot;serverTime\&quot;:{\&quot;total\&quot;:139,\&quot;db\&quot;:35,\&quot;xhrServerTime\&quot;:168,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:791},{\&quot;ts\&quot;:103316.24,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;307;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:publiclyCacheableComponentLoader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:150,\&quot;db\&quot;:26,\&quot;xhrServerTime\&quot;:417,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:52,\&quot;duration\&quot;:1241},{\&quot;ts\&quot;:104507.57,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;319;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:50,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1822},{\&quot;ts\&quot;:104509.84,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;322;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:richText\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:50,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1820},{\&quot;ts\&quot;:104521.45,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;347;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userSettingsInternal\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userSettings.UserSettingsController/ACTION$getUserProfileSettings\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:36,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1138,\&quot;db\&quot;:704,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1818},{\&quot;ts\&quot;:104521.86,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;350;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userSettingsCustomizable\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userSettings.UserSettingsController/ACTION$getUserXdsEnabled\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:35,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1818},{\&quot;ts\&quot;:104525.46,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;354;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userProfileBase\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:32,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1814},{\&quot;ts\&quot;:104549.58,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;366;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:reputationWidget\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.reputation.ReputationWidgetController/ACTION$getReputationWidgetAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:8,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1790},{\&quot;ts\&quot;:104549.91,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;368;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userProfileBase\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:7,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1790},{\&quot;ts\&quot;:104550.34,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;370;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userProfileHeader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileHeader.UserProfileHeaderController/ACTION$getUserProfileHeaderAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:7,\&quot;serverTime\&quot;:{\&quot;total\&quot;:155,\&quot;db\&quot;:73,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:1793},{\&quot;ts\&quot;:104552.23,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;374;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userProfileBase\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileBase.UserProfileBaseController/ACTION$getUserProfileBaseAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1791},{\&quot;ts\&quot;:104552.5,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;376;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:userProfileDetail\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.userProfileDetail.UserProfileDetailController/ACTION$getUserProfileDetailAttributes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:76,\&quot;db\&quot;:32,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1801},{\&quot;ts\&quot;:104556.96,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;383;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:3,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:1539,\&quot;boxCarCount\&quot;:11},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1796},{\&quot;ts\&quot;:106375.63,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;441;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordView\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordViewEdit.RecordViewEditController/ACTION$getViewRecordLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:18,\&quot;serverTime\&quot;:{\&quot;total\&quot;:222,\&quot;db\&quot;:58,\&quot;xhrServerTime\&quot;:672,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:45,\&quot;duration\&quot;:2761},{\&quot;ts\&quot;:106348.4,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;437;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;one:actionsManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:7,\&quot;serverTime\&quot;:{\&quot;total\&quot;:185,\&quot;db\&quot;:77,\&quot;xhrServerTime\&quot;:705,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:3196}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:154.58,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-80186079-05ee-47d2-b5cb-b6029f559dc5.c264\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:51.54},{\&quot;name\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:33.05},{\&quot;name\&quot;:\&quot;rl-User-VIEW-FULL----force_highlights-_1-0-346330595a6c755365653442424233534430443778673d3d.c\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:44.59},{\&quot;name\&quot;:\&quot;force:actionsContainer\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:5.62},{\&quot;name\&quot;:\&quot;one:actionsRibbon\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:14.13}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:109858.55,\&quot;context\&quot;:{\&quot;storeIngest\&quot;:0.46000000000640284,\&quot;storeBroadcast\&quot;:0.05000000000291038}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:6541,\&quot;previousPage\&quot;:{\&quot;entity\&quot;:\&quot;home\&quot;,\&quot;entityType\&quot;:\&quot;User\&quot;,\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:1088,\&quot;longestTask\&quot;:247,\&quot;network\&quot;:{\&quot;rtt\&quot;:100,\&quot;downlink\&quot;:2.9},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:6541,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:3,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:109859.24,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;layout://siteforce-generatedpage-80186079-05ee-47d2-b5cb-b6029f559dc5.c264\&quot;,\&quot;markup://forceCommunity:userSettingsCustomizable\&quot;,\&quot;markup://forceCommunity:userSettingsInternal\&quot;,\&quot;markup://lightning:button\&quot;,\&quot;markup://forceCommunity:userProfileBase\&quot;,\&quot;markup://forceCommunity:userProfileBody\&quot;,\&quot;markup://forceCommunity:userProfileHeader\&quot;,\&quot;markup://force:placeholder\&quot;,\&quot;markup://ui:image\&quot;,\&quot;markup://forceCommunity:stamp\&quot;,\&quot;markup://forceCommunity:reputationWidget\&quot;,\&quot;markup://forceCommunity:userProfileDetail\&quot;,\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;markup://force:adsBridge\&quot;,\&quot;markup://ui:outputText\&quot;,\&quot;markup://ui:label\&quot;,\&quot;markup://ui:input\&quot;,\&quot;markup://ui:inputEmail\&quot;,\&quot;markup://lightning:combobox\&quot;,\&quot;markup://force:icon\&quot;,\&quot;markup://lightning:icon\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://force:recordView\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;layout://rl-User-VIEW-FULL----force_highlights-_1-0-346330595a6c755365653442424233534430443778673d3d.c\&quot;,\&quot;markup://force:pageBlock\&quot;,\&quot;markup://force:pageBlockSection\&quot;,\&quot;markup://force:pageBlockSectionView\&quot;,\&quot;markup://force:pageBlockSectionRow\&quot;,\&quot;markup://force:pageBlockItem\&quot;,\&quot;markup://force:pageBlockItemView\&quot;,\&quot;markup://ui:interactive\&quot;,\&quot;markup://force:outputNameForUser\&quot;,\&quot;markup://force:outputPhone\&quot;,\&quot;markup://emailui:formattedEmail\&quot;,\&quot;markup://aura:renderIf\&quot;,\&quot;markup://force:outputAddress\&quot;,\&quot;markup://force:outputAddressText\&quot;,\&quot;markup://force:outputPicklist\&quot;,\&quot;markup://one:actionsRibbon\&quot;,\&quot;markup://one:actionsDropDown\&quot;,\&quot;markup://force:action\&quot;,\&quot;markup://force:actionLink\&quot;,\&quot;markup://force:actionEventLink\&quot;],\&quot;pageCounter\&quot;:3,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:11,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:109859.39,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Home.c264\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Home\&quot;,\&quot;name\&quot;:\&quot;c264\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;forceCommunity:richText\&quot;:{\&quot;namespace\&quot;:\&quot;forceCommunity\&quot;,\&quot;name\&quot;:\&quot;richText\&quot;,\&quot;auraApiVersion\&quot;:\&quot;192\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c264\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c264\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:12,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614150530424000,\&quot;duration\&quot;:6541000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/profile/home\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;detail-005\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;4096247ab64641d0\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;timestamp\&quot;:1614150530427000,\&quot;duration\&quot;:1164000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=12&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;103316480000bba4d4\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;13ca46087fa07aac\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;timestamp\&quot;:1614150530529000,\&quot;duration\&quot;:744000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=10&amp;aura.NavigationMenu.getCommunityNavigationMenu=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;103418500000818683\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;b543a875b3516d77\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;timestamp\&quot;:1614150531670000,\&quot;duration\&quot;:1734000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=13&amp;ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;104560190000b057dd\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;ab586a2ebcdb5136\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;timestamp\&quot;:1614150533466000,\&quot;duration\&quot;:3132000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=15&amp;ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute=1&amp;ui-communities-components-aura-components-forceCommunity-reputation.ReputationWidget.getReputationWidgetAttributes=1&amp;ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue=1&amp;ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData=1&amp;ui-communities-components-aura-components-forceCommunity-userProfileBase.UserProfileBase.getUserProfileBaseAttributes=3&amp;ui-communities-components-aura-components-forceCommunity-userProfileDetail.UserProfileDetail.getUserProfileDetailAttributes=1&amp;ui-communities-components-aura-components-forceCommunity-userProfileHeader.UserProfileHeader.getUserProfileHeaderAttributes=1&amp;ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserProfileSettings=1&amp;ui-communities-components-aura-components-forceCommunity-userSettings.UserSettings.getUserXdsEnabled=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;106356130000baea8f\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;id\&quot;:\&quot;5094c879ba128ddb\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;e342de5915d40b58\&quot;,\&quot;timestamp\&quot;:1614150533505000,\&quot;duration\&quot;:2627000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=14&amp;ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;106394480000e569d8\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536970,\&quot;value\&quot;:[1,1,8]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536970,\&quot;value\&quot;:[1,1,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536970,\&quot;value\&quot;:[1,1,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150533518,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150533518,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536962,\&quot;value\&quot;:[68,74,6550]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536966,\&quot;value\&quot;:[19582086]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536966,\&quot;value\&quot;:[13656]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150530424,\&quot;value\&quot;:[2857]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150530424,\&quot;value\&quot;:[47016]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150530424,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150536969,\&quot;value\&quot;:[6541]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614150533518,\&quot;value\&quot;:[1]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">10986052000037d419</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account Information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">19</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/comm-my-account</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;509;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;1e187cf3-55b7-4d16-8f70-d4dfbcb9e4b6&quot;,&quot;routeType&quot;:&quot;my-account&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;4059f595-06e6-4358-9572-fa43894c739f&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:${publishedChangelistNum},&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">51bbc8691887e903</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">1477723370000003fd</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">deef70dc9f99aa29</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">51bbc8691887e903</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Account ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;value&quot;:&quot;(\d\w+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Account ID" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Account ID: &quot; + vars.get(&quot;accountId&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account Information - getRecordAndLayout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-controller.RecordValidation.getOnLoadErrorMessage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-controller.RecordValidation.getOnLoadErrorMessage</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-tabset.Tabset.getLocalizedRegionLabels" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-tabset.Tabset.getLocalizedRegionLabels</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-detail.Detail.getEntityConfig" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-detail.Detail.getEntityConfig</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/comm-my-account</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;515;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;527;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getEntityConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${accountId}&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;isCreateOrClone&quot;:false,&quot;isCloneWithRelated&quot;:false},&quot;storable&quot;:true},{&quot;id&quot;:&quot;529;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${accountId}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;FULL&quot;,&quot;layoutOverride&quot;:&quot;&quot;,&quot;inContextOfRecordId&quot;:&quot;${accountId}&quot;,&quot;inContextOfComponent&quot;:&quot;&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[aura:html] &gt; [siteforce:publiclyCacheableComponentLoader] &gt; [siteforce:baseApp] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264] &gt; [forceCommunity:recordDetail] &gt; [forceCommunity:recordDetail] &gt; [forceCommunity:recordDetail] &gt; [forceCommunity:recordDetail] &gt; [forceCommunity:recordDetail] &gt; [force:detailPanel] &gt; [force:detailPanel] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}},{&quot;id&quot;:&quot;532;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.controller.RecordValidationController/ACTION$getOnLoadErrorMessage&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:recordDetail&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${accountId}&quot;},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;535;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;p&gt;Account Details information is maintained by EJ and not editable. If you need to update this information, visit the &lt;a class=\&quot;my-account_contact-us--link\&quot; href=\&quot;https://www.ejco.com/am/en/contact/\&quot;&gt;contact us&lt;/a&gt; and send us your request, or contact your EJ Sales Representative.&lt;/p&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;545;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.tabset.TabsetController/ACTION$getLocalizedRegionLabels&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:tabset&quot;,&quot;params&quot;:{&quot;componentId&quot;:&quot;2cb209fb-77d7-4f1b-b450-d1ddb7241415&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">51bbc8691887e903</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">1479125140000a5e0d</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">f52c247d0394c9cc</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">51bbc8691887e903</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account Information - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">21</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/comm-my-account</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;681;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1477708.34,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/profile/home\&quot;,\&quot;requestURI\&quot;:\&quot;/s/comm-my-account\&quot;,\&quot;entityId\&quot;:null}},\&quot;sequence\&quot;:13,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1477715.71,\&quot;duration\&quot;:1374402,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:3,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:593084,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:1479044.68,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://force:duplicateTabs\&quot;,\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://force:dedupeManager\&quot;,\&quot;markup://force:liveRecordsDelegate\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://force:toast\&quot;,\&quot;markup://force:inlineEdit\&quot;,\&quot;markup://forceCommunity:placeholder\&quot;,\&quot;markup://ui:message\&quot;,\&quot;markup://force:detailPanelDesktop\&quot;,\&quot;markup://force:recordList\&quot;,\&quot;markup://force:duplicateList\&quot;,\&quot;markup://force:duplicateListDataManager\&quot;,\&quot;markup://force:recordEditActions\&quot;,\&quot;markup://forceCommunity:seoAssistant\&quot;,\&quot;layout://siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264\&quot;,\&quot;markup://force:pageError\&quot;,\&quot;markup://force:message\&quot;,\&quot;markup://sfa:importButton\&quot;,\&quot;markup://forceCommunity:richText\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;markup://force:recordLayoutBroker\&quot;,\&quot;markup://force:saveOption\&quot;,\&quot;markup://forceCommunity:recordDetail\&quot;,\&quot;markup://force:recordLayoutTemplate\&quot;,\&quot;markup://forceCommunity:htmlBlock\&quot;,\&quot;markup://siteforce:hiddenRegion\&quot;,\&quot;markup://force:detailPanel\&quot;,\&quot;markup://force:detailPanelMobile\&quot;,\&quot;markup://forceCommunity:tabset\&quot;,\&quot;markup://forceCommunity:baseRecordValidationComponent\&quot;,\&quot;markup://forceCommunity:outputRichText\&quot;,\&quot;markup://force:recordListDummyDataProvider\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://force:pageBlockSectionToggled\&quot;,\&quot;markup://force:inlineEditStateChange\&quot;,\&quot;markup://force:cancelEdit\&quot;,\&quot;markup://force:revertInlineEditFieldValue\&quot;,\&quot;markup://force:loadMore\&quot;,\&quot;markup://force:recordDuplicateSelected\&quot;,\&quot;markup://forceContent:contentVersionCreated\&quot;,\&quot;markup://force:loadMoreError\&quot;,\&quot;markup://selfService:refreshCaseData\&quot;,\&quot;markup://force:componentReady\&quot;,\&quot;markup://force:save\&quot;,\&quot;markup://force:inlineEditDataChanged\&quot;,\&quot;markup://force:inlineEditEnable\&quot;,\&quot;markup://force:refresh\&quot;,\&quot;markup://runtime_sales_activities:taskAfterCreatePrepend\&quot;,\&quot;markup://one:splitViewModeChanged\&quot;,\&quot;markup://force:recordDuplicateDetected\&quot;,\&quot;markup://force:saveAndNew\&quot;,\&quot;markup://one:recordPanelUpdate\&quot;,\&quot;markup://force:localRecordChangeCheck\&quot;,\&quot;markup://today:executeDeviceCommand\&quot;,\&quot;markup://force:duplicateDetectedOnSave\&quot;,\&quot;markup://force:toggleInlineEdit\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1479177.36,\&quot;duration\&quot;:1,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;My_Account\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:1479530.21,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:communityApp\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://force:pageBlockSectionEdit\&quot;,\&quot;markup://force:pageBlockItem\&quot;,\&quot;markup://force:pageBlockItemView\&quot;,\&quot;markup://force:pageBlockSectionRow\&quot;,\&quot;markup://force:pageBlock\&quot;,\&quot;markup://force:pageBlockItemEdit\&quot;,\&quot;markup://force:pageBlockSectionView\&quot;,\&quot;layout://rl-Account-VIEW-FULL-012E00000002NsuIAE--${accountId}--_1-0-6477595a4479696f714b674a4c4562492f77717868413d3d.c\&quot;,\&quot;markup://force:pageBlockSection\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1479664.39,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;storage-stats\&quot;,\&quot;attributes\&quot;:{\&quot;name\&quot;:\&quot;actions\&quot;,\&quot;adapter\&quot;:\&quot;memory\&quot;,\&quot;sizeKB\&quot;:-1,\&quot;maxSizeKB\&quot;:153600,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1479765.51,\&quot;duration\&quot;:4,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;navigate\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;My_Account\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1479771.53,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;force:detailPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-primeMetadataStore\&quot;,\&quot;attributes\&quot;:{\&quot;isRecordEverPrimed\&quot;:false,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;entityApiName\&quot;:\&quot;Account\&quot;,\&quot;layoutType\&quot;:\&quot;FULL\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;force:detailPanel\&quot;,\&quot;scope\&quot;:\&quot;force:detailPanel\&quot;},\&quot;sequence\&quot;:14,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1477699.01,\&quot;duration\&quot;:2081,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:59,\&quot;endHeapMB\&quot;:86,\&quot;uiThreadDelay\&quot;:409,\&quot;target\&quot;:\&quot;slds-text-color_default comm-user-profile-menu__menu-item-hover\&quot;,\&quot;scope\&quot;:\&quot;slds-dropdown__item\&quot;,\&quot;notInstrumented\&quot;:true,\&quot;pageContext\&quot;:\&quot;my-account\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/comm-my-account\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:1477718,\&quot;duration\&quot;:2066,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479177.06,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLBCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479102.58,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;hasRecord\&quot;:false,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;FULL\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutBroker\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutBroker\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;detailPanelController_initEnd\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479533.85,\&quot;context\&quot;:{\&quot;recordId\&quot;:\&quot;${accountId}\&quot;,\&quot;entityApiName\&quot;:\&quot;Account\&quot;},\&quot;owner\&quot;:\&quot;force:detailPanel\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;recordLayout:initToAfterRender.1479599.68\&quot;,\&quot;ts\&quot;:1479599.74,\&quot;context\&quot;:{\&quot;globalId\&quot;:\&quot;1:529;a\&quot;,\&quot;metaRecordLayoutQualifiedName\&quot;:\&quot;layout://rl-Account-VIEW-FULL-012E00000002NsuIAE--${accountId}--_1-0-6477595a4479696f714b674a4c4562492f77717868413d3d.c\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayout\&quot;,\&quot;duration\&quot;:139},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;detailPanel:initToRecordLayoutAfterRender.1479094.79\&quot;,\&quot;ts\&quot;:1479094.85,\&quot;context\&quot;:{\&quot;globalId\&quot;:\&quot;28:509;a\&quot;,\&quot;layoutType\&quot;:\&quot;FULL\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;},\&quot;owner\&quot;:\&quot;force:detailPanel\&quot;,\&quot;duration\&quot;:664},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;detailPanel:detailPanelFields\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479760.23,\&quot;context\&quot;:{\&quot;ui:outputText\&quot;:2,\&quot;force:outputPhone\&quot;:2,\&quot;force:outputPicklist\&quot;:1,\&quot;force:outputAddress\&quot;:2,\&quot;one:alohaPage\&quot;:0,\&quot;force:canvasApps\&quot;:0,\&quot;analytics:embeddedReportCharts\&quot;:0,\&quot;totalCount\&quot;:7,\&quot;mode\&quot;:\&quot;VIEW\&quot;},\&quot;owner\&quot;:\&quot;force:detailPanel\&quot;},{\&quot;ns\&quot;:\&quot;force:recordLayoutBroker\&quot;,\&quot;name\&quot;:\&quot;layoutItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479668.3,\&quot;context\&quot;:{\&quot;itemCount\&quot;:1}},{\&quot;ns\&quot;:\&quot;force:recordLayoutBroker\&quot;,\&quot;name\&quot;:\&quot;storageSize\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479668.65,\&quot;context\&quot;:{\&quot;storageSize\&quot;:\&quot;0.2978515625 KB\&quot;}}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:1477723.51,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:19,\&quot;requestLength\&quot;:1705,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;509;a\&quot;],\&quot;requestId\&quot;:\&quot;1477723370000003fd\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1077173,\&quot;xhrDuration\&quot;:1303,\&quot;xhrStall\&quot;:449,\&quot;startTime\&quot;:1477727,\&quot;fetchStart\&quot;:1477727,\&quot;requestStart\&quot;:1478176,\&quot;dns\&quot;:170,\&quot;tcp\&quot;:234,\&quot;ttfb\&quot;:949,\&quot;transfer\&quot;:354,\&quot;transferSize\&quot;:140902,\&quot;serverTime\&quot;:360,\&quot;xhrDelay\&quot;:7},\&quot;duration\&quot;:1310},{\&quot;ts\&quot;:1479125.16,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:20,\&quot;requestLength\&quot;:5103,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;515;a\&quot;,\&quot;527;a\&quot;,\&quot;529;a\&quot;,\&quot;532;a\&quot;,\&quot;535;a\&quot;,\&quot;545;a\&quot;],\&quot;requestId\&quot;:\&quot;1479125140000a5e0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:296644,\&quot;xhrDuration\&quot;:395,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:1479126,\&quot;fetchStart\&quot;:1479126,\&quot;requestStart\&quot;:1479129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:389,\&quot;transfer\&quot;:6,\&quot;transferSize\&quot;:35185,\&quot;serverTime\&quot;:260,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:398}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:1477722.47,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;509;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:publiclyCacheableComponentLoader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:194,\&quot;db\&quot;:96,\&quot;xhrServerTime\&quot;:360,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:72,\&quot;duration\&quot;:1395},{\&quot;ts\&quot;:1479055.51,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;515;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:7,\&quot;enqueueWait\&quot;:62,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:476},{\&quot;ts\&quot;:1479097.69,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;527;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:detailPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getEntityConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:5,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:2,\&quot;duration\&quot;:436},{\&quot;ts\&quot;:1479106.13,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;529;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutBroker\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:7,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:70,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:496},{\&quot;ts\&quot;:1479107.26,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;532;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:recordDetail\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.controller.RecordValidationController/ACTION$getOnLoadErrorMessage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:7,\&quot;enqueueWait\&quot;:11,\&quot;serverTime\&quot;:{\&quot;total\&quot;:113,\&quot;db\&quot;:14,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:496},{\&quot;ts\&quot;:1479109.16,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;535;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:richText\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:15,\&quot;serverTime\&quot;:{\&quot;total\&quot;:2,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:494},{\&quot;ts\&quot;:1479114.79,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;545;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:tabset\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.tabset.TabsetController/ACTION$getLocalizedRegionLabels\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:10,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:259,\&quot;boxCarCount\&quot;:6},\&quot;callbackTime\&quot;:18,\&quot;duration\&quot;:508}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:148.96,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:69.72},{\&quot;name\&quot;:\&quot;rl-Account-VIEW-FULL-012E00000002NsuIAE--${accountId}--_1-0-6477595a4479696f714b674a4c4562492f77717868413d3d.c\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:59.12},{\&quot;name\&quot;:\&quot;ui:tabset\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16.33},{\&quot;name\&quot;:\&quot;ui:tab\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1.23},{\&quot;name\&quot;:\&quot;ui:tabItem\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:2.54}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:1479785.95,\&quot;context\&quot;:{\&quot;storeIngest\&quot;:0.970000000204891,\&quot;storeBroadcast\&quot;:0.27000000001862645}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:2065,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;detail-005\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/profile/home\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;perceivedEPT\&quot;:2046,\&quot;longTaskTotal\&quot;:408,\&quot;longestTask\&quot;:173,\&quot;network\&quot;:{\&quot;rtt\&quot;:50,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;COMFY\&quot;,\&quot;totalEpt\&quot;:2065,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:3},\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_forceDetailPanel\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraStorage_recordLayoutMap\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraStorage_oneStoragePrimeMetadata\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:7}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:4,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;,\&quot;traceSampled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1479786.58,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;layout://siteforce-generatedpage-4059f595-06e6-4358-9572-fa43894c739f.c264\&quot;,\&quot;markup://forceCommunity:tabset\&quot;,\&quot;markup://forceCommunity:baseRecordValidationComponent\&quot;,\&quot;markup://forceCommunity:recordDetail\&quot;,\&quot;markup://force:detailPanel\&quot;,\&quot;markup://force:detailPanelDesktop\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://lightning:pageReferenceUtils\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://force:liveRecordsDelegate\&quot;,\&quot;markup://force:recordLayoutBroker\&quot;,\&quot;markup://forceCommunity:placeholder\&quot;,\&quot;layout://rl-Account-VIEW-FULL-012E00000002NsuIAE--${accountId}--_1-0-6477595a4479696f714b674a4c4562492f77717868413d3d.c\&quot;,\&quot;markup://force:staticGoogleMap\&quot;,\&quot;markup://ui:tabset\&quot;,\&quot;markup://ui:tabBar\&quot;,\&quot;markup://ui:tabOverflowMenuItem\&quot;,\&quot;markup://ui:popup\&quot;,\&quot;markup://ui:menu\&quot;,\&quot;markup://ui:popupTrigger\&quot;,\&quot;markup://ui:menuTriggerLink\&quot;,\&quot;markup://ui:popupTarget\&quot;,\&quot;markup://ui:menuList\&quot;,\&quot;markup://ui:tab\&quot;,\&quot;markup://ui:tabItem\&quot;],\&quot;pageCounter\&quot;:4,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:15,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1479786.74,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;forceCommunity:richText\&quot;:{\&quot;namespace\&quot;:\&quot;forceCommunity\&quot;,\&quot;name\&quot;:\&quot;richText\&quot;,\&quot;auraApiVersion\&quot;:\&quot;192\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c264\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c264\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:16,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906948,\&quot;value\&quot;:[8,8,41]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906948,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906948,\&quot;value\&quot;:[0,0,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906690,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906690,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906941,\&quot;value\&quot;:[75,63,61,71,2081]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906944,\&quot;value\&quot;:[1374913]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906944,\&quot;value\&quot;:[7927]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151904877,\&quot;value\&quot;:[2928]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151904877,\&quot;value\&quot;:[95683]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151904877,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906947,\&quot;value\&quot;:[2065]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151906690,\&quot;value\&quot;:[2]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">14797881300009f96c</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Addresses" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Addresses" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.Component.getComponent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.Component.getComponent</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;699;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://siteforce:regionLoaderWrapper&quot;,&quot;attributes&quot;:{&quot;itemId&quot;:&quot;9c642c81-cdce-4de9-bf17-aacc7a0bab43&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;4059f595-06e6-4358-9572-fa43894c739f&quot;,&quot;view_uddid&quot;:&quot;0I37f000000Exsf&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;picasso_id&quot;:&quot;1e187cf3-55b7-4d16-8f70-d4dfbcb9e4b6&quot;,&quot;routeId&quot;:&quot;1e187cf3-55b7-4d16-8f70-d4dfbcb9e4b6&quot;}}}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">1490414290000b6cce</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
                <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Addresses - getMetadataInitialLoad" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ui-force-components-controllers-lists-listViewManager.ListViewManager.getMetadataInitialLoad" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-lists-listViewManager.ListViewManager.getMetadataInitialLoad</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">23</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account?tabset-2cb20=tab3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;794;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewManager.ListViewManagerController/ACTION$getMetadataInitialLoad&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;listReference&quot;:{&quot;listViewIdOrName&quot;:&quot;ContactPointAddresses&quot;,&quot;inContextOfRecordId&quot;:&quot;${accountId}&quot;,&quot;isMRU&quot;:false,&quot;isSearch&quot;:false}}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">14908242100003cc1e</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Addresses - RelatedListViewDataManager.getItems" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-lists-listViewManagerGrid.ListViewManagerGrid.getRecordLayoutComponent</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-force-components-controllers-relatedList.RelatedListViewDataManager.getItems</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account?tabset-2cb20=tab3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;802;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewManagerGrid.ListViewManagerGridController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;listReference&quot;:{&quot;listViewIdOrName&quot;:&quot;ContactPointAddresses&quot;,&quot;inContextOfRecordId&quot;:&quot;${accountId}&quot;,&quot;isMRU&quot;:false,&quot;isSearch&quot;:false},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;,&quot;layoutMode&quot;:&quot;VIEW&quot;,&quot;inContextOfComponent&quot;:&quot;force:listViewManagerGrid&quot;,&quot;enableMassActions&quot;:true,&quot;enableRowErrors&quot;:false,&quot;useHoversForLookup&quot;:false}},{&quot;id&quot;:&quot;805;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;ContactPointAddresses&quot;,&quot;pageSize&quot;:50,&quot;sortBy&quot;:&quot;&quot;,&quot;limit&quot;:1000,&quot;useTimeout&quot;:false,&quot;queryLocator&quot;:null,&quot;parentRecordId&quot;:&quot;${accountId}&quot;,&quot;getCount&quot;:false,&quot;isPreview&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">14908554800007a408</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Addresses - handleAction" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">r</stringProp>
                    <stringProp name="Argument.value">25</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ui-global-components-one-actionsManager.ActionsManager.handleAction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui-global-components-one-actionsManager.ActionsManager.handleAction</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/s/comm-my-account?tabset-2cb20=tab3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;832;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;recordId&quot;:&quot;${accountId}&quot;,&quot;context&quot;:&quot;RELATED_LIST&quot;,&quot;entityApiName&quot;:&quot;ContactPointAddress&quot;,&quot;record&quot;:null,&quot;listNameOrId&quot;:&quot;ContactPointAddresses&quot;,&quot;size&quot;:5,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionNames&quot;:[],&quot;enableActionsConfiguration&quot;:false,&quot;isLABPreview&quot;:false,&quot;actionsRequestId&quot;:2}]}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">1491105510000802bf</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="My Projects" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Projects" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/mylists</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1082;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;14d94a0d-f97f-4c2d-9906-884ec8cb8dbb&quot;,&quot;routeType&quot;:&quot;wishlist&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;8f637d27-33f1-405a-a208-90937603c048&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:${publishedChangelistNum},&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">71634b4c8434cf4d</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">4262018870000da683</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">def1c84adda86365</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">71634b4c8434cf4d</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Projects - getRecordAndTranslationData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Wishlist.getWishlists" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Wishlist.getWishlists</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/mylists</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1088;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;1094;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WishlistController/ACTION$getWishlists&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;includeDisplayedList&quot;:true,&quot;productFieldNames&quot;:[&quot;ProductCode&quot;,&quot;ProductCode&quot;],&quot;sortOrder&quot;:&quot;CreatedDateDesc&quot;}},{&quot;id&quot;:&quot;1096;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">71634b4c8434cf4d</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">4263536970000ccc6f</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">7331660d4a0dade3</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">71634b4c8434cf4d</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Projects - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">28</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/mylists</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1159;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1490407.66,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:\&quot;tab3\&quot;},\&quot;target\&quot;:\&quot;tab-bar-content__tab\&quot;,\&quot;scope\&quot;:\&quot;tab-bar\&quot;},\&quot;sequence\&quot;:17,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1490443.26,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;navigate\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;My_Account\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:1490703.44,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://siteforce:regionLoader\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://forceCommunity:relatedList\&quot;,\&quot;markup://forceCommunity:actionsContainerMobile\&quot;,\&quot;markup://siteforce:regionLoaderWrapper\&quot;,\&quot;markup://offline:banner\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;sitepage://siteforce-generatedcomponent-9c642c81-cdce-4de9-bf17-aacc7a0bab43.c1614151917826\&quot;,\&quot;markup://offline:sash\&quot;,\&quot;markup://forceCommunity:actionButtonMobile\&quot;,\&quot;markup://force:relatedList\&quot;],\&quot;eventDefs\&quot;:[\&quot;markup://offline:draftChange\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:1491282.29,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:listViewManagerPrimaryDisplayManager\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://ui:dataTableHeader\&quot;,\&quot;markup://force:virtualCheckbox\&quot;,\&quot;markup://force:virtualRowNumberCell\&quot;,\&quot;markup://force:inlineEditGridStencil\&quot;,\&quot;markup://force:inlineEditKeyNavCell\&quot;,\&quot;markup://force:virtualSelectionColumn\&quot;,\&quot;layout://rl-Account-VIEW-RELATED_LIST-012E00000002NsuIAE-ContactPointAddresses-0017f00000crhQ7AAI-force_relatedListDesktop-_1-0-46527861684a4c6458705070437a3866624738456e773d3d.c\&quot;,\&quot;markup://force:noRowActions\&quot;,\&quot;markup://force:virtualAction\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:1491309.73,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;8lW7f000000CaSKEA0\&quot;,\&quot;8lW7f000000CaTNEA0\&quot;,\&quot;8lW7f000000CaSFEA0\&quot;,\&quot;8lW7f000000CaRqEAK\&quot;],\&quot;recordType\&quot;:\&quot;ContactPointAddress\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;sequence\&quot;:18,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:1491593.54,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:listViewManager\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://force:actionEventLink\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1491614.69,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;storage-stats\&quot;,\&quot;attributes\&quot;:{\&quot;name\&quot;:\&quot;actionsManagerCache\&quot;,\&quot;adapter\&quot;:\&quot;memory\&quot;,\&quot;sizeKB\&quot;:-1,\&quot;maxSizeKB\&quot;:2048,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:1490403.27,\&quot;duration\&quot;:1259,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:65,\&quot;endHeapMB\&quot;:73,\&quot;uiThreadDelay\&quot;:500,\&quot;target\&quot;:\&quot;tab-bar-content__tab\&quot;,\&quot;scope\&quot;:\&quot;tab-bar\&quot;,\&quot;devNameOrId\&quot;:\&quot;tab3\&quot;,\&quot;pageContext\&quot;:\&quot;my-account\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/comm-my-account\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;forceRecordMarksEnabled\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:4262002.27,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/comm-my-account\&quot;,\&quot;requestURI\&quot;:\&quot;/s/mylists\&quot;,\&quot;entityId\&quot;:null}},\&quot;sequence\&quot;:19,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4262012.36,\&quot;duration\&quot;:2784294,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:4,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:21378,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:4262012.78,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://siteforce:regionLoaderWrapper\&quot;,\&quot;markup://siteforce:regionLoader\&quot;,\&quot;sitepage://siteforce-generatedcomponent-9c642c81-cdce-4de9-bf17-aacc7a0bab43.c1614151917826\&quot;,\&quot;markup://forceCommunity:relatedList\&quot;,\&quot;markup://force:relatedListViewManager\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderConfiguration\&quot;,\&quot;markup://force:listViewManagerDisplaysConfiguration\&quot;,\&quot;markup://force:listViewManagerDisplayDataConfiguration\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://force:relatedListViewDataManager\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://force:listViewManager\&quot;,\&quot;markup://force:listViewManagerStateManager\&quot;,\&quot;markup://force:listViewManagerHeader\&quot;,\&quot;markup://force:breadCrumbs\&quot;,\&quot;markup://force:listViewManagerStatusInfo\&quot;,\&quot;markup://force:listViewSettingsMenu\&quot;,\&quot;markup://force:listViewManagerButtonBar\&quot;,\&quot;markup://force:listViewManagerPrimaryDisplayManager\&quot;,\&quot;markup://force:listViewManagerGrid\&quot;,\&quot;markup://force:listViewManagerSettingsMenuConfiguration\&quot;,\&quot;markup://force:listViewManagerSettingsMenuOptionConfiguration\&quot;,\&quot;markup://force:listViewManagerGridFooter\&quot;,\&quot;markup://force:statusIcon\&quot;,\&quot;markup://lightning:deprecatedIcon\&quot;,\&quot;markup://lightning:deprecatedPrimitiveIcon\&quot;,\&quot;markup://ui:button\&quot;,\&quot;markup://force:listViewPlaceholder\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://force:listLoadingTemplate\&quot;,\&quot;markup://force:inlineEditGrid\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://force:listViewManagerSecondaryDisplayManager\&quot;,\&quot;markup://force:inlineSpinner\&quot;,\&quot;markup://force:dotsSpinner\&quot;,\&quot;markup://lightning:buttonMenu\&quot;,\&quot;markup://lightning:positionLibrary\&quot;,\&quot;markup://lightning:tooltipLibrary\&quot;,\&quot;markup://lightning:primitiveIcon\&quot;,\&quot;markup://force:breadCrumbItem\&quot;,\&quot;layout://rl-Account-VIEW-RELATED_LIST-012E00000002NsuIAE-ContactPointAddresses-0017f00000crhQ7AAI-force_relatedListDesktop-_1-0-46527861684a4c6458705070437a3866624738456e773d3d.c\&quot;,\&quot;markup://force:inlineEditGridStencil\&quot;,\&quot;markup://ui:dataTableHeader\&quot;,\&quot;markup://force:virtualSelectionColumn\&quot;,\&quot;markup://force:virtualCheckbox\&quot;,\&quot;markup://force:listViewManagerGridColumnHeaderMenu\&quot;,\&quot;markup://force:inlineEditKeyNavCell\&quot;,\&quot;markup://force:virtualRowNumberCell\&quot;,\&quot;markup://force:outputLookup\&quot;,\&quot;markup://ui:outputCheckbox\&quot;,\&quot;markup://ui:outputTextArea\&quot;,\&quot;markup://force:virtualAction\&quot;],\&quot;pageCounter\&quot;:4,\&quot;phase\&quot;:\&quot;navFromPage\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:20,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:4263506.39,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://siteforce:sldsOneColLayout\&quot;,\&quot;markup://b2b_buyer_data:wishlistService\&quot;,\&quot;markup://siteforce:runtimeComponent\&quot;,\&quot;markup://lightning:overlayLibrary\&quot;,\&quot;markup://lightning:messageChannel\&quot;,\&quot;markup://b2b_buyer_data:cartService\&quot;,\&quot;markup://forceCommunity:seoAssistant\&quot;,\&quot;markup://b2b_buyer_builder:wishlistsManager\&quot;,\&quot;layout://siteforce-generatedpage-8f637d27-33f1-405a-a208-90937603c048.c264\&quot;,\&quot;markup://siteforce:runtimeRegion\&quot;,\&quot;markup://siteforce:hiddenRegion\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4264077.09,\&quot;duration\&quot;:2,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Wishlist\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4264338.5,\&quot;duration\&quot;:6,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__recordPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;recordId\&quot;:\&quot;01t2S00000C8WpsQAF\&quot;,\&quot;actionName\&quot;:\&quot;view\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4261993.43,\&quot;duration\&quot;:2416,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:67,\&quot;endHeapMB\&quot;:85,\&quot;uiThreadDelay\&quot;:722,\&quot;target\&quot;:\&quot;slds-text-color_default comm-user-profile-menu__menu-item-hover\&quot;,\&quot;scope\&quot;:\&quot;slds-dropdown__item\&quot;,\&quot;notInstrumented\&quot;:true,\&quot;pageContext\&quot;:\&quot;wishlist\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/mylists\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:4262014.55,\&quot;duration\&quot;:2402,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:4264076.84,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:4262019.03,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:2015,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1082;a\&quot;],\&quot;requestId\&quot;:\&quot;4262018870000da683\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:609477,\&quot;xhrDuration\&quot;:1474,\&quot;xhrStall\&quot;:633,\&quot;startTime\&quot;:4262023,\&quot;fetchStart\&quot;:4262023,\&quot;requestStart\&quot;:4262657,\&quot;dns\&quot;:161,\&quot;tcp\&quot;:452,\&quot;ttfb\&quot;:1076,\&quot;transfer\&quot;:398,\&quot;transferSize\&quot;:90386,\&quot;serverTime\&quot;:196,\&quot;xhrDelay\&quot;:7},\&quot;duration\&quot;:1481},{\&quot;ts\&quot;:4263537,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:2248,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1088;a\&quot;,\&quot;1094;a\&quot;,\&quot;1096;a\&quot;],\&quot;requestId\&quot;:\&quot;4263536970000ccc6f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7244,\&quot;xhrDuration\&quot;:686,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:4263539,\&quot;fetchStart\&quot;:4263539,\&quot;requestStart\&quot;:4263542,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:661,\&quot;transfer\&quot;:24,\&quot;transferSize\&quot;:2734,\&quot;serverTime\&quot;:526,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:689}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:4262018.02,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1082;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:publiclyCacheableComponentLoader\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:71,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:196,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:29,\&quot;duration\&quot;:1518},{\&quot;ts\&quot;:4263514.94,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1088;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:21,\&quot;serverTime\&quot;:{\&quot;total\&quot;:2,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:526,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:713},{\&quot;ts\&quot;:4263524.05,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1094;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:wishlistService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.WishlistController/ACTION$getWishlists\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:362,\&quot;db\&quot;:36,\&quot;xhrServerTime\&quot;:526,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:704},{\&quot;ts\&quot;:4263528.65,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1096;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:8,\&quot;serverTime\&quot;:{\&quot;total\&quot;:120,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:526,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:699}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:27.47,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-8f637d27-33f1-405a-a208-90937603c048.c264\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26.45},{\&quot;name\&quot;:\&quot;b2b_buyer_wishlists:manager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0.75},{\&quot;name\&quot;:\&quot;b2b_buyer_wishlists:itemsAddedToCartModal\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0.14},{\&quot;name\&quot;:\&quot;b2b_buyer_wishlists:unavailableItemsAddedToCartModal\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0.12}]}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:2401,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;my-account\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/comm-my-account\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:722,\&quot;longestTask\&quot;:600,\&quot;network\&quot;:{\&quot;rtt\&quot;:150,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;COMFY\&quot;,\&quot;totalEpt\&quot;:2401,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:5,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;wishlist\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/mylists\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;71634b4c8434cf4d\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:4264446.51,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;layout://siteforce-generatedpage-8f637d27-33f1-405a-a208-90937603c048.c264\&quot;],\&quot;pageCounter\&quot;:5,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;sequence\&quot;:21,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;wishlist\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/mylists\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:4264446.68,\&quot;pageStartTime\&quot;:1614150427111,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Inner.c264\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c264\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:22,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;wishlist\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/mylists\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;id\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614154689167000,\&quot;duration\&quot;:2401000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/mylists\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;wishlist\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;id\&quot;:\&quot;def1c84adda86365\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;timestamp\&quot;:1614154689171000,\&quot;duration\&quot;:1481000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=25&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;4262018870000da683\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;id\&quot;:\&quot;7331660d4a0dade3\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;71634b4c8434cf4d\&quot;,\&quot;timestamp\&quot;:1614154690689000,\&quot;duration\&quot;:690000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=26&amp;ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;4263536970000ccc6f\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691599,\&quot;value\&quot;:[41,97,97]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691599,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691599,\&quot;value\&quot;:[0,0,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-broadcast-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151918441,\&quot;value\&quot;:[0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-ingest-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151918441,\&quot;value\&quot;:[0,0,0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691561,\&quot;value\&quot;:[1260,67,74,70,2416]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691569,\&quot;value\&quot;:[617817]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691569,\&quot;value\&quot;:[5135]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154689166,\&quot;value\&quot;:[485258]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154689166,\&quot;value\&quot;:[41898]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154689166,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614154691598,\&quot;value\&quot;:[2401]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;ads-bridge-add-records-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614151918441,\&quot;value\&quot;:[1]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">426444799000062c71</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log out" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ui-force-components-controllers-logoutHandler.LogoutHandler.getLogoutURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-logoutHandler.LogoutHandler.getLogoutURL</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/mylists</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1172;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.logoutHandler.LogoutHandlerController/ACTION$getLogoutURL&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">a856a216e695902a</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">ff6936fe-8f9c-4f52-882b-31de0124ede5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">4731076500000d5508</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">c87b483b4d9ae186</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">a856a216e695902a</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;,&quot;COMPONENT@markup://force:outputField&quot;:&quot;i0e8iLBfbzmWMyeMzqBfzQ&quot;,&quot;COMPONENT@markup://forceCommunity:recordDetail&quot;:&quot;C_OQpgngM5Bs2MbTypu11Q&quot;,&quot;COMPONENT@markup://siteforce:regionLoaderWrapper&quot;:&quot;MSlWg5juejNIoUafZbExJA&quot;,&quot;COMPONENT@markup://forceCommunity:relatedList&quot;:&quot;fgzM0ygMoJKtjP3A7rhhsQ&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_ONE&quot;},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/mylists</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1173;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4731071.15,\&quot;duration\&quot;:469057,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:5,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:60592,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:usedDefs\&quot;,\&quot;ts\&quot;:4731073.64,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:logoutHandler\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;usedDefs\&quot;,\&quot;attributes\&quot;:{\&quot;lightning\&quot;:[\&quot;overlayLibrary\&quot;,\&quot;platformOverlayUtils\&quot;,\&quot;navigation\&quot;,\&quot;messageChannel\&quot;,\&quot;messageServiceInternal\&quot;,\&quot;messageContextConsumer\&quot;,\&quot;__LightningMessageChannel__commerce_cartChanged\&quot;,\&quot;iconSvgTemplatesUtility\&quot;,\&quot;button\&quot;,\&quot;combobox\&quot;,\&quot;icon\&quot;,\&quot;workspaceAPI\&quot;,\&quot;pageReferenceUtils\&quot;,\&quot;deprecatedIcon\&quot;,\&quot;deprecatedPrimitiveIcon\&quot;,\&quot;buttonMenu\&quot;,\&quot;positionLibrary\&quot;,\&quot;tooltipLibrary\&quot;,\&quot;primitiveIcon\&quot;],\&quot;ui\&quot;:[\&quot;asyncComponentManager\&quot;,\&quot;panelManager2\&quot;,\&quot;containerManager\&quot;,\&quot;outputRichText\&quot;,\&quot;image\&quot;,\&quot;outputText\&quot;,\&quot;label\&quot;,\&quot;input\&quot;,\&quot;inputEmail\&quot;,\&quot;interactive\&quot;,\&quot;resizeObserver\&quot;,\&quot;tabset\&quot;,\&quot;tabBar\&quot;,\&quot;tabOverflowMenuItem\&quot;,\&quot;popup\&quot;,\&quot;menu\&quot;,\&quot;popupTrigger\&quot;,\&quot;menuTriggerLink\&quot;,\&quot;popupTarget\&quot;,\&quot;menuList\&quot;,\&quot;tab\&quot;,\&quot;tabItem\&quot;,\&quot;button\&quot;,\&quot;scroller\&quot;,\&quot;virtualDataTable\&quot;,\&quot;dataTableHeader\&quot;,\&quot;outputCheckbox\&quot;,\&quot;outputTextArea\&quot;],\&quot;lockerMethods\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:4731073.8,\&quot;duration\&quot;:4731074,\&quot;pageStartTime\&quot;:1614150427111,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:logoutHandler\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:6,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;}],&quot;traces&quot;:&quot;[]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158217,\&quot;value\&quot;:[97,97,97]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158217,\&quot;value\&quot;:[2,2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158217,\&quot;value\&quot;:[0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155156859,\&quot;value\&quot;:[65,69]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158216,\&quot;value\&quot;:[3175]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158216,\&quot;value\&quot;:[34834]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614155158216,\&quot;value\&quot;:[1]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">a856a216e695902a</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">ff6936fe-8f9c-4f52-882b-31de0124ede5</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">473108327000014917</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">2b9ce089fd9653d1</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">a856a216e695902a</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out - CommunitiesLanding" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="retUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">retUrl</stringProp>
                  <stringProp name="Argument.value">https://full-ej.cs199.force.com/CommunitiesLanding</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">secur/logout.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out - CommunitiesLanding" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CommunitiesLanding</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">815.0</stringProp>
              <stringProp name="ConstantTimer.delay">407.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 815 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">240.0</stringProp>
              <stringProp name="ConstantTimer.delay">120</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 240 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - isAction=true" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;apck&quot;:&quot;gp-lyxFKGqNO4g2ubZvVzw&quot;,&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.isAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.isAction</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;220c91fd-374f-4a56-b2aa-6eef6654e349&quot;,&quot;routeType&quot;:&quot;login-home&quot;,&quot;themeLayoutType&quot;:&quot;Login&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;187daaf6-07f9-4dfb-816b-bb0c6a09f287&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:264,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">067577dc-71ec-4bfc-9e05-fa22d5f2b47b</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page - getConfigData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ui-force-components-controllers-hostConfig.HostConfig.getConfigData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-force-components-controllers-hostConfig.HostConfig.getConfigData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnector.fetchClientContextData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;27;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.cmsPersonalizationProxyConnector.CMSPersonalizationProxyConnectorController/ACTION$fetchClientContextData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;33;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">067577dc-71ec-4bfc-9e05-fa22d5f2b47b</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page - getParsedRichTextValue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getSelfRegistrationUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getSelfRegistrationUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getForgotPasswordUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getForgotPasswordUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getIsSelfRegistrationEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getIsSelfRegistrationEnabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getIsUsernamePasswordEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getIsUsernamePasswordEnabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-richText.RichText.getParsedRichTextValue</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;41;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;img src=\&quot;/sfsites/c/resource/branding/assets/images/logo.png\&quot; alt=\&quot;EJLOGO\&quot; class=\&quot;login-ej-logo\&quot; /&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;44;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;span class=\&quot;login-headline\&quot;&gt;SIGN IN&lt;/span&gt;\n&lt;br&gt;&lt;br&gt;\n&lt;p class=\&quot;login-description\&quot;&gt;If you have an account with EJ, please sign in.&lt;/p&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;57;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getIsUsernamePasswordEnabled&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;58;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getIsSelfRegistrationEnabled&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;59;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getForgotPasswordUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;60;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getSelfRegistrationUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true},{&quot;id&quot;:&quot;63;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.richText.RichTextController/ACTION$getParsedRichTextValue&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:richText&quot;,&quot;params&quot;:{&quot;html&quot;:&quot;&lt;img class=\&quot;sidebar-image\&quot; src=\&quot;/sfsites/c/resource/branding/assets/images/signInPage.jpg\&quot; /&gt;&quot;},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">067577dc-71ec-4bfc-9e05-fa22d5f2b47b</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page - getLoginRightFrameUrl" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applauncher.LoginForm.getLoginRightFrameUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applauncher.LoginForm.getLoginRightFrameUrl</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;71;a&quot;,&quot;descriptor&quot;:&quot;apex://applauncher.LoginFormController/ACTION$getLoginRightFrameUrl&quot;,&quot;callingDescriptor&quot;:&quot;markup://salesforceIdentity:loginForm2&quot;,&quot;params&quot;:{},&quot;version&quot;:&quot;51.0&quot;,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">067577dc-71ec-4bfc-9e05-fa22d5f2b47b</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page - getComponentDef" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.Component.getComponentDef" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.Component.getComponentDef</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:loginApp2&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:loginApp2&quot;:&quot;U0pRSSzJMR3mh1zL5Wb8sg&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/login/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;86;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponentDef&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;lightning:iconSvgTemplatesUtility&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">067577dc-71ec-4bfc-9e05-fa22d5f2b47b</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login &gt; SRP &gt; Facet Filter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
          <stringProp name="TestPlan.comments">Login the same for all requests</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1969335403">Login &gt; PLP  &gt; Load More &gt; Facet Filter &gt; PDP</stringProp>
            <stringProp name="73596745">Login</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Search" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Get Search Queries" enabled="true">
            <stringProp name="filename">data/EJ/query.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter"></stringProp>
            <stringProp name="variableNames">query</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.Component.getComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.Component.getComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/global-search/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;187;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://siteforce:pageLoader&quot;,&quot;attributes&quot;:{&quot;pageLoadType&quot;:&quot;THEME_LAYOUT&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;}}},{&quot;id&quot;:&quot;188;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;5f31fc53-9517-4cc6-80d0-6ec0361fb896&quot;,&quot;routeType&quot;:&quot;global-search&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;f9b68031-5c61-4639-af6c-de42ca06d2bc&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;term&quot;:&quot;&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:266,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">7f241ef6087b42e8</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">15948200000ecf320b</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">8f5290fd6006ef45</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">7f241ef6087b42e8</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Query" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Query: &quot; + vars.get(&quot;query&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search - getRecordAndTranslationData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">79</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-seoAssistant.SeoAssistant.getRecordAndTranslationData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-qb.Quarterback.validateRoute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/global-search/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1316;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData&quot;,&quot;callingDescriptor&quot;:&quot;markup://forceCommunity:seoAssistant&quot;,&quot;params&quot;:{&quot;fields&quot;:[],&quot;activeLanguageCodes&quot;:[]},&quot;version&quot;:&quot;51.0&quot;},{&quot;id&quot;:&quot;1322;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;routeId&quot;:&quot;5f31fc53-9517-4cc6-80d0-6ec0361fb896&quot;,&quot;viewParams&quot;:{&quot;viewid&quot;:&quot;f9b68031-5c61-4639-af6c-de42ca06d2bc&quot;,&quot;view_uddid&quot;:&quot;0I37f000000YT1w&quot;,&quot;audience_name&quot;:&quot;Default&quot;,&quot;term&quot;:&quot;${query}&quot;,&quot;searchString&quot;:&quot;${query}&quot;,&quot;picasso_id&quot;:&quot;5f31fc53-9517-4cc6-80d0-6ec0361fb896&quot;,&quot;routeId&quot;:&quot;5f31fc53-9517-4cc6-80d0-6ec0361fb896&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">8394096d06496582</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">45019299000029bdc2</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">5582cffec8f10aba</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">8394096d06496582</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search - RetrieveCartSummary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/global-search/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1326;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;statusOrCartId&quot;:&quot;active&quot;}},{&quot;id&quot;:&quot;1355;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo_NoCat&quot;,&quot;method&quot;:&quot;getCategoryInfo&quot;,&quot;params&quot;:{},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}},{&quot;id&quot;:&quot;1356;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;B2BGetInfo&quot;,&quot;method&quot;:&quot;getCartSummary&quot;,&quot;params&quot;:{&quot;communityId&quot;:&quot;0DB7f000000Cb36&quot;,&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}},{&quot;id&quot;:&quot;1357;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;b2b_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;includePrices&quot;:false,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[],&quot;searchTerm&quot;:&quot;${query}&quot;,&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">8394096d06496582</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">45033289000085c711</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">6c9f4241ac8ce5fc</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">8394096d06496582</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Flag isFilterable" enabled="true">
              <stringProp name="TestPlan.comments">If filters exist for SRP</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">isFilterable</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.returnValue.facets[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Value " enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterValue</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.returnValue.facets[0].values[0].displayName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.returnValue.facets[0].nameOrId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Type" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.returnValue.facets[0].values[0].type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Filter Attribute Type" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">filterAttributeType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[3].returnValue.returnValue.facets[0].attributeType</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log isFilterable PLP" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****isFilterable: &quot; + vars.get(&quot;isFilterable&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Value" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Value: &quot; + vars.get(&quot;filterValue&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Name" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Name: &quot; + vars.get(&quot;filterName&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Type" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Type: &quot; + vars.get(&quot;filterType&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log Filter Attribute Type" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;****Filter Attribute Type: &quot; + vars.get(&quot;filterAttributeType&quot;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search - InstrumentationBeacon.sendData" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">81</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-instrumentation-components-beacon.InstrumentationBeacon.sendData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-instrumentation-components-beacon.InstrumentationBeacon.sendData</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/global-search/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1367;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:447315.05,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-input\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{}},\&quot;sequence\&quot;:52,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:450176,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-button\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{}},\&quot;sequence\&quot;:53,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:450179.61,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communitynavigation\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;link\&quot;,\&quot;scope\&quot;:\&quot;communitynavigation\&quot;,\&quot;context\&quot;:{\&quot;unifiedEventType\&quot;:\&quot;COMMUNITY_PAGE_NAVIGATION\&quot;,\&quot;referrer\&quot;:\&quot;/s/\&quot;,\&quot;requestURI\&quot;:\&quot;/s/global-search/${query}\&quot;,\&quot;searchString\&quot;:\&quot;${query}\&quot;}},\&quot;sequence\&quot;:54,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:450182.53,\&quot;duration\&quot;:12936,\&quot;pageStartTime\&quot;:1614262697990,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:13,\&quot;phase\&quot;:\&quot;END\&quot;,\&quot;defaultCmp\&quot;:[],\&quot;nonDefaultCmp\&quot;:[],\&quot;backgroundTime\&quot;:0,\&quot;trxDeleted\&quot;:{},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:450192.7,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:\&quot;b2b_search_builder:searchInput\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:55,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;global-search\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/global-search/${query}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:450221.84,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:\&quot;b2b_search_suggestions:combobox\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-load\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;search-list-box\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;context\&quot;:{\&quot;optionCount\&quot;:0}},\&quot;sequence\&quot;:56,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;global-search\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/global-search/${query}\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:450305.5,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614262697990,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;resolveUrl\&quot;,\&quot;pageType\&quot;:\&quot;standard__search\&quot;,\&quot;pageAttributes\&quot;:{},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:450352.67,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1614262697990,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;siteforce:navigationProvider\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-communityembarcadero\&quot;,\&quot;attributes\&quot;:{\&quot;methodName\&quot;:\&quot;generateUrl\&quot;,\&quot;pageType\&quot;:\&quot;comm__namedPage\&quot;,\&quot;pageAttributes\&quot;:{\&quot;name\&quot;:\&quot;Home\&quot;},\&quot;success\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:450175.03,\&quot;duration\&quot;:2219,\&quot;pageStartTime\&quot;:1614262697990,\&quot;marks\&quot;:{},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;scenarioTime\&quot;,\&quot;attributes\&quot;:{\&quot;startHeapMB\&quot;:47,\&quot;endHeapMB\&quot;:50,\&quot;uiThreadDelay\&quot;:182,\&quot;target\&quot;:\&quot;search-button\&quot;,\&quot;scope\&quot;:\&quot;search-suggestions\&quot;,\&quot;pageContext\&quot;:\&quot;global-search\&quot;,\&quot;pageUrl\&quot;:\&quot;/s/global-search/${query}\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{\&quot;LWCMarksEnabled\&quot;:false,\&quot;scenarioTrackerMarksEnabled\&quot;:false}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:450184.17,\&quot;duration\&quot;:2212,\&quot;pageStartTime\&quot;:1614262697990,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:450238.75,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5},\&quot;owner\&quot;:\&quot;community_navigation:multiLevelNavigationContainer\&quot;},{\&quot;ns\&quot;:\&quot;multi-level-nav\&quot;,\&quot;name\&quot;:\&quot;data-shape\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:450331.34,\&quot;context\&quot;:{\&quot;topLevelItems\&quot;:5,\&quot;maxDepth\&quot;:5,\&quot;orientation\&quot;:\&quot;horizontal\&quot;},\&quot;owner\&quot;:\&quot;forceCommunity:multiLevelNavigation\&quot;}],\&quot;transport\&quot;:[{\&quot;ts\&quot;:450193.01,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:79,\&quot;requestLength\&quot;:1816,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1316;a\&quot;,\&quot;1322;a\&quot;],\&quot;requestId\&quot;:\&quot;45019299000029bdc2\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:1978,\&quot;xhrDuration\&quot;:927,\&quot;xhrStall\&quot;:464,\&quot;startTime\&quot;:450197,\&quot;fetchStart\&quot;:450197,\&quot;requestStart\&quot;:450662,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:924,\&quot;transfer\&quot;:2,\&quot;transferSize\&quot;:1291,\&quot;serverTime\&quot;:49,\&quot;xhrDelay\&quot;:7},\&quot;duration\&quot;:934},{\&quot;ts\&quot;:450332.91,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:80,\&quot;requestLength\&quot;:2544,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1326;a\&quot;,\&quot;1355;a\&quot;,\&quot;1356;a\&quot;,\&quot;1357;a\&quot;],\&quot;requestId\&quot;:\&quot;45033289000085c711\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7887,\&quot;xhrDuration\&quot;:1984,\&quot;xhrStall\&quot;:790,\&quot;startTime\&quot;:450335,\&quot;fetchStart\&quot;:450335,\&quot;requestStart\&quot;:451126,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1977,\&quot;transfer\&quot;:7,\&quot;transferSize\&quot;:2553,\&quot;serverTime\&quot;:1021,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1988}],\&quot;actions\&quot;:[{\&quot;ts\&quot;:450187.82,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1316;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;forceCommunity:seoAssistant\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.seoAssistant.SeoAssistantController/ACTION$getRecordAndTranslationData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:5,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:49,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:940},{\&quot;ts\&quot;:450191.34,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1322;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;siteforce:baseApp\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.qb.QuarterbackController/ACTION$validateRoute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:49,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:937},{\&quot;ts\&quot;:450230.38,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1326;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;b2b_buyer_data:cartService\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.communities.components.aura.components.forceCommunity.commerce.CartController/ACTION$retrieveCartSummary\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:102,\&quot;serverTime\&quot;:{\&quot;total\&quot;:121,\&quot;db\&quot;:27,\&quot;xhrServerTime\&quot;:1021,\&quot;boxCarCount\&quot;:4},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:2091},{\&quot;ts\&quot;:450307.91,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1355;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;ERROR\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:24,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:1021,\&quot;boxCarCount\&quot;:4},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:2014},{\&quot;ts\&quot;:450315.15,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1356;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:17,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:10,\&quot;xhrServerTime\&quot;:1021,\&quot;boxCarCount\&quot;:4},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:2007},{\&quot;ts\&quot;:450321.75,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1357;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ApexActionController/ACTION$execute\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:11,\&quot;serverTime\&quot;:{\&quot;total\&quot;:784,\&quot;db\&quot;:174,\&quot;xhrServerTime\&quot;:1021,\&quot;boxCarCount\&quot;:4},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:2000}],\&quot;component\&quot;:[{\&quot;totalCreateTime\&quot;:5.31,\&quot;slowestCreates\&quot;:[{\&quot;name\&quot;:\&quot;siteforce-generatedpage-f9b68031-5c61-4639-af6c-de42ca06d2bc.c265\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:5.31}]}],\&quot;lds\&quot;:[{\&quot;ns\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;runtime-perf\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:452398.93,\&quot;context\&quot;:{\&quot;storeLookup\&quot;:0.1000000000349246}}]},\&quot;owner\&quot;:\&quot;siteforce:routerInitializer\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:2212,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;home\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/\&quot;}},\&quot;attributes\&quot;:{\&quot;designTime\&quot;:false,\&quot;domain\&quot;:\&quot;https://full-ej.cs199.force.com\&quot;,\&quot;template\&quot;:\&quot;B2B Commerce Template\&quot;,\&quot;priorityDuration\&quot;:{},\&quot;longTaskTotal\&quot;:181,\&quot;longestTask\&quot;:181,\&quot;network\&quot;:{\&quot;rtt\&quot;:250,\&quot;downlink\&quot;:10},\&quot;cores\&quot;:12,\&quot;eptDeviation\&quot;:false,\&quot;density\&quot;:\&quot;UNKNOWN\&quot;,\&quot;totalEpt\&quot;:2212,\&quot;defaultCmp\&quot;:[],\&quot;gates\&quot;:{\&quot;scenarioTrackerEnabled.instrumentation.ltng\&quot;:true,\&quot;scenarioTrackerMarksEnabled.instrumentation.ltng\&quot;:false,\&quot;browserIdleTime.instrumentation.ltng\&quot;:false,\&quot;clientTelemetry.instrumentation.ltng\&quot;:true,\&quot;componentProfiler.instrumentation.ltng\&quot;:false,\&quot;LWCMarksEnabled\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false},\&quot;cacheStats\&quot;:{\&quot;total\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:0}},\&quot;complexity\&quot;:null,\&quot;sequence\&quot;:14,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;global-search\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/global-search/${query}\&quot;,\&quot;traceSampled\&quot;:true,\&quot;traceId\&quot;:\&quot;8394096d06496582\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:452399.21,\&quot;pageStartTime\&quot;:1614262697990,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;locker-component-data\&quot;,\&quot;attributes\&quot;:{\&quot;siteforce-generatedpage-Home.c265\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Home\&quot;,\&quot;name\&quot;:\&quot;c265\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;siteforce-generatedpage-Inner.c265\&quot;:{\&quot;namespace\&quot;:\&quot;siteforce-generatedpage-Inner\&quot;,\&quot;name\&quot;:\&quot;c265\&quot;,\&quot;auraApiVersion\&quot;:\&quot;51.0\&quot;,\&quot;isLockerized\&quot;:false},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:false,\&quot;gates\&quot;:{}},\&quot;locator\&quot;:null,\&quot;sequence\&quot;:57,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;global-search\&quot;,\&quot;attributes\&quot;:{\&quot;url\&quot;:\&quot;/s/global-search/${query}\&quot;}}}&quot;}],&quot;traces&quot;:&quot;[{\&quot;name\&quot;:\&quot;pageView\&quot;,\&quot;traceId\&quot;:\&quot;8394096d06496582\&quot;,\&quot;id\&quot;:\&quot;8394096d06496582\&quot;,\&quot;sampled\&quot;:1,\&quot;timestamp\&quot;:1614263148128000,\&quot;duration\&quot;:2212000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/global-search/${query}\&quot;,\&quot;sfrd.ltng.page.context\&quot;:\&quot;global-search\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;8394096d06496582\&quot;,\&quot;id\&quot;:\&quot;5582cffec8f10aba\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;8394096d06496582\&quot;,\&quot;timestamp\&quot;:1614263148137000,\&quot;duration\&quot;:934000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=78&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;45019299000029bdc2\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}},{\&quot;name\&quot;:\&quot;aura-transport-request\&quot;,\&quot;traceId\&quot;:\&quot;8394096d06496582\&quot;,\&quot;id\&quot;:\&quot;6c9f4241ac8ce5fc\&quot;,\&quot;sampled\&quot;:1,\&quot;parentId\&quot;:\&quot;8394096d06496582\&quot;,\&quot;timestamp\&quot;:1614263148277000,\&quot;duration\&quot;:1989000,\&quot;kind\&quot;:\&quot;CLIENT\&quot;,\&quot;annotations\&quot;:[],\&quot;tags\&quot;:{\&quot;http.url\&quot;:\&quot;/s/sfsites/aura?r=76&amp;ui-communities-components-aura-components-forceCommunity-commerce.Cart.retrieveCartSummary=1&amp;ui-communities-components-aura-components-forceCommunity-commerce.Wishlist.getWishlists=1\&quot;,\&quot;sfrd.requestId\&quot;:\&quot;45033289000085c711\&quot;,\&quot;sfrd.requestStatus\&quot;:\&quot;200\&quot;}}]&quot;,&quot;metrics&quot;:&quot;[{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-size-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150343,\&quot;value\&quot;:[55,55]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-watch-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150343,\&quot;value\&quot;:[2,2]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-snapshot-subscriptions-count\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150343,\&quot;value\&quot;:[1,0]},{\&quot;owner\&quot;:\&quot;lds\&quot;,\&quot;name\&quot;:\&quot;store-lookup-duration\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263148266,\&quot;value\&quot;:[0,0,0]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;scenarioTime.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150339,\&quot;value\&quot;:[62,2220]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150341,\&quot;value\&quot;:[10991]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.beforeEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150341,\&quot;value\&quot;:[5136]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageReceived.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263148127,\&quot;value\&quot;:[2853]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsageSent.afterEpt.bytes\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263148127,\&quot;value\&quot;:[21849]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;bwUsage.instrSizePct\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263148127,\&quot;value\&quot;:[1]},{\&quot;owner\&quot;:\&quot;Instrumentation\&quot;,\&quot;name\&quot;:\&quot;pageview.ept.ms\&quot;,\&quot;type\&quot;:\&quot;PercentileHistogram\&quot;,\&quot;ts\&quot;:1614263150343,\&quot;value\&quot;:[2212]}]&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">452399630000828488</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Facet Filter" enabled="true"/>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While filters are not available" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;isFilterable&quot;).equals(&quot;false&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Go to Search" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1462766763">Login &gt; SRP &gt; Facet Filter</stringProp>
                <stringProp name="-1822469688">Search</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.ApexAction.execute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.ApexAction.execute</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/global-search/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;187;a&quot;,&quot;descriptor&quot;:&quot;aura://ApexActionController/ACTION$execute&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;namespace&quot;:&quot;&quot;,&quot;classname&quot;:&quot;b2b_Search_NoCat&quot;,&quot;method&quot;:&quot;search&quot;,&quot;params&quot;:{&quot;searchRequest&quot;:{&quot;includePrices&quot;:false,&quot;fields&quot;:[&quot;ProductImage__c&quot;,&quot;b2b_Web_Name__c&quot;,&quot;Name&quot;,&quot;Product_Drawing_URL__c&quot;],&quot;page&quot;:0,&quot;pageSize&quot;:25,&quot;refinements&quot;:[{&quot;nameOrId&quot;:&quot;${filterName}&quot;,&quot;type&quot;:&quot;${filterType}&quot;,&quot;attributeType&quot;:&quot;${filterAttributeType}&quot;,&quot;values&quot;:[&quot;${filterValue}&quot;]}],&quot;searchTerm&quot;:&quot;${query}&quot;,&quot;effectiveAccountId&quot;:&quot;${accountId}&quot;}},&quot;cacheable&quot;:false,&quot;isContinuation&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinkTime}</stringProp>
              <stringProp name="RandomTimer.range">${randomThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter - getPageComponent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableComponentLoader.getPageComponent</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PRODDEBUG&quot;,&quot;fwuid&quot;:&quot;${fwuid}&quot;,&quot;app&quot;:&quot;siteforce:communityApp&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://siteforce:communityApp&quot;:&quot;qg_1jZeIaWpj8q3veLXfQA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/s/no-results/${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;193;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableComponentLoaderController/ACTION$getPageComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;attributes&quot;:{&quot;viewId&quot;:&quot;8e1199b0-b47c-425a-9e68-9b01c479e912&quot;,&quot;routeType&quot;:&quot;no-results&quot;,&quot;themeLayoutType&quot;:&quot;Inner&quot;,&quot;params&quot;:{&quot;viewid&quot;:&quot;5238bc26-478f-4706-a56c-6b2eab76f06d&quot;,&quot;view_uddid&quot;:&quot;&quot;,&quot;entity_name&quot;:&quot;&quot;,&quot;audience_name&quot;:&quot;&quot;,&quot;term&quot;:&quot;&quot;,&quot;picasso_id&quot;:&quot;&quot;,&quot;routeId&quot;:&quot;&quot;},&quot;hasAttrVaringCmps&quot;:false,&quot;pageLoadType&quot;:&quot;STANDARD_PAGE_CONTENT&quot;,&quot;includeLayout&quot;:true},&quot;publishedChangelistNum&quot;:267,&quot;brandingSetId&quot;:&quot;8ff42622-9f7e-4242-add4-0015a67ab67f&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SSLProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">s/sfsites/aura</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">925d659552e7f040</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Page-Scope-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Page-Scope-Id</stringProp>
                  <stringProp name="Header.value">cb3f85d3-b94e-4423-a66d-a1b1e0420d7f</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">459667750000d2f0c5</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">3efedc0edd929e79</stringProp>
                </elementProp>
                <elementProp name="X-B3-ParentSpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-ParentSpanId</stringProp>
                  <stringProp name="Header.value">925d659552e7f040</stringProp>
                </elementProp>
                <elementProp name="X-B3-Sampled" elementType="Header">
                  <stringProp name="Header.name">X-B3-Sampled</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
              <stringProp name="HtmlExtractor.refname"></stringProp>
              <stringProp name="HtmlExtractor.expr"></stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
